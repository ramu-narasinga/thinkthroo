{
  "title": "shadcn-ui/ui codebase analysis-How does shadcn-ui CLI work? — Part 3.0\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\nI wanted to find out how shadcn-ui CLI works. In this article, I discuss the code used to build the shadcn-ui/ui CLI.\r\n\r\nIn part 2.0 to 2.15, I discussed how *npx shadcn-ui init* works under the hood.\r\n\r\nWe will look at how *npx shadcn-ui add &lt;component&gt;* works in this part 3.x.\r\n\r\nSince the [packages/cli/src/commands/add.ts](https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/commands/add.ts) file is large, I will break this analysis down into parts and talk about code snippets and explain how stuff works.\r\n\r\nIn this article, we will look the concepts:\r\n\r\n1. Add command.\r\n    \r\n2. Commander.js package\r\n    \r\n3. How add command is registered?\r\n    \r\n4. Argument and options\r\n    \r\n5. addOptionsSchema\r\n    \r\n\r\n# **add command**\r\n\r\n```plaintext\r\nexport const add = new Command()\r\n  .name(\"add\")\r\n  .description(\"add a component to your project\")\r\n  .argument(\"[components...]\", \"the components to add\")\r\n  .option(\"-y, --yes\", \"skip confirmation prompt.\", true)\r\n  .option(\"-o, --overwrite\", \"overwrite existing files.\", false)\r\n  .option(\r\n    \"-c, --cwd <cwd>\",\r\n    \"the working directory. defaults to the current directory.\",\r\n    process.cwd()\r\n  )\r\n  .option(\"-a, --all\", \"add all available components\", false)\r\n  .option(\"-p, --path <path>\", \"the path to add the component to.\")\r\n  .action(async (components, opts) => {\r\n    try {\r\n      const options = addOptionsSchema.parse({\r\n        components,\r\n        ...opts,\r\n      })\r\n```\r\n\r\nWe will begin with how add command is added. The above code snippet is picked from [packages/cli/src/commands/add.ts](https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/commands/add.ts#L31C1-L49C9)\r\n\r\n# **Commander.js package:**\r\n\r\nCommand is imported from [commander.js](https://www.npmjs.com/package/commander), a complete solution for [node.js](http://nodejs.org/) command-line interfaces.\r\n\r\n# **How add command is registered?**\r\n\r\nThe way add command is registered is that, if you open this [src/commands/index.ts](https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/index.ts#L24) in a new tab, you will find this code as shown below\r\n\r\n![](https://miro.medium.com/v2/resize:fit:875/1*P3t8GFZm8Qrzc0iKp7u2aA.png)\r\n\r\nCommands are created separately in the [folder named commands](https://github.com/shadcn-ui/ui/tree/main/packages/cli/src/commands) for maintainability purposes. If you were to fork this shadcn-ui/ui repo and want to add your own command, this is one way to do it.\r\n\r\n# **Argument and options**\r\n\r\nWhen you write something like `npx shadcn-ui add Button`, `Button` here is an argument.\r\n\r\n```plaintext\r\n.argument(\"[components...]\", \"the components to add\")\r\n```\r\n\r\nThe above code snippet is picked from [here](https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/commands/add.ts#L34C3-L34C56).\r\n\r\nYou also have options that go with your add command as shown below:\r\n\r\n```plaintext\r\n.option(\"-y, --yes\", \"skip confirmation prompt.\", true)\r\n.option(\"-o, --overwrite\", \"overwrite existing files.\", false)\r\n.option(\r\n  \"-c, --cwd <cwd>\",\r\n  \"the working directory. defaults to the current directory.\",\r\n  process.cwd()\r\n)\r\n.option(\"-a, --all\", \"add all available components\", false)\r\n.option(\"-p, --path <path>\", \"the path to add the component to.\")\r\n```\r\n\r\nand then you have `action`\r\n\r\n```plaintext\r\n.action(async (components, opts) => {\r\n```\r\n\r\n# **addOptionsSchema**\r\n\r\n```plaintext\r\n const options = addOptionsSchema.parse({\r\n  components,\r\n  ...opts,\r\n})\r\n\r\nconst cwd = path.resolve(options.cwd)\r\n\r\nif (!existsSync(cwd)) {\r\n  logger.error(`The path ${cwd} does not exist. Please try again.`)\r\n  process.exit(1)\r\n}\r\n```\r\n\r\nThe above snippet is picked from [add.ts](https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/commands/add.ts#L34C3-L34C56)\r\n\r\naddOptionsSchema is declared just above the add function as shown below:\r\n\r\n```plaintext\r\nconst addOptionsSchema = z.object({\r\n  components: z.array(z.string()).optional(),\r\n  yes: z.boolean(),\r\n  overwrite: z.boolean(),\r\n  cwd: z.string(),\r\n  all: z.boolean(),\r\n  path: z.string().optional(),\r\n})\r\n```\r\n\r\nThis schema basically ensures all the options and arguments are valid before processing them further.\r\n\r\n# **Conclusion:**\r\n\r\nIn Part 2.0 to 2.15, I discussed how npx shadcn-ui init works under the hood. It is time for a version bump to my articles. In 3.x articles, I will write about how npx shadcn-ui add works under the hood. Please note that [semver](https://semver.org/) is not applicable to my articles lol.\r\n\r\nCommand is imported from [commander.js](https://www.npmjs.com/package/commander), a complete solution for [node.js](http://nodejs.org/) command-line interfaces. The way add command is registered with npx shadcn-ui CLI is that, if you open this [src/commands/index.ts](https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/index.ts#L24) in a new tab, you will find this code as shown below:\r\n\r\n```plaintext\r\nprogram.addCommand(init).addCommand(add).addCommand(diff)\r\n```\r\n\r\nThere’s an argument that accepts a single component name or an array of component names, that is why you would write something like `npx shadcn-ui add Button`\r\n\r\n`Button`here is an argument. add command also has few options such -y, -o, -c, -a, -p. Read more about these in the [shadcn-ui CLI documentation](https://ui.shadcn.com/docs/cli).\r\n\r\naddOptionsSchema ensures that arguments and the options passed to the add command are valid using zod\r\n\r\n![](https://miro.medium.com/v2/resize:fit:875/1*47EKz3q3aUidRrzxVGAjLg.png)\r\n\r\n> [*Get free courses inspired by the best practices used in open source.*](https://app.thinkthroo.com/best-practices)\r\n\r\n# **About me:**\r\n\r\nHey, my name is [**Ramu Narasinga**](https://ramunarasinga.com/). I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\r\n\r\n***I am open to work on interesting projects. Send me an email at*** [***ramu.narasinga@gmail.com***](mailto:ramu.narasinga@gmail.com)\r\n\r\nMy Github — [**https://github.com/ramu-narasinga**](https://github.com/ramu-narasinga)\r\n\r\nMy website — [**https://ramunarasinga.com**](https://ramunarasinga.com/)\r\n\r\nMy Youtube channel — [**https://www.youtube.com/@thinkthroo**](https://www.youtube.com/@thinkthroo)\r\n\r\nLearning platform — [**https://thinkthroo.com**](https://thinkthroo.com/)\r\n\r\nCodebase Architecture — [**https://app.thinkthroo.com/architecture**](https://app.thinkthroo.com/architecture)\r\n\r\nBest practices — [**https://app.thinkthroo.com/best-practices**](https://app.thinkthroo.com/best-practices)\r\n\r\nProduction-grade projects — [**https://app.thinkthroo.com/production-grade-projects**](https://app.thinkthroo.com/production-grade-projects)\r\n\r\n# **References**\r\n\r\n1. [https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/commands/add.ts](https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/commands/add.ts)\r\n    \r\n2. [https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/commands/add.ts#L31C1-L49C9](https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/commands/add.ts#L31C1-L49C9)\r\n    \r\n3. [https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/index.ts#L24](https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/index.ts#L24)\r\n    \r\n4. [https://www.npmjs.com/package/commander](https://www.npmjs.com/package/commander)\r\n    \r\n5. [https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/commands/add.ts#L22](https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/commands/add.ts#L22)",
    "code": "var Component=(()=>{var p=Object.create;var s=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var w=(a,n)=>()=>(n||a((n={exports:{}}).exports,n),n.exports),b=(a,n)=>{for(var i in n)s(a,i,{get:n[i],enumerable:!0})},t=(a,n,i,d)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let c of u(n))!f.call(a,c)&&c!==i&&s(a,c,{get:()=>n[c],enumerable:!(d=m(n,c))||d.enumerable});return a};var y=(a,n,i)=>(i=a!=null?p(g(a)):{},t(n||!a||!a.__esModule?s(i,\"default\",{value:a,enumerable:!0}):i,a)),k=a=>t(s({},\"__esModule\",{value:!0}),a);var l=w((C,r)=>{r.exports=_jsx_runtime});var x={};b(x,{default:()=>o,frontmatter:()=>N});var e=y(l()),N={title:\"shadcn-ui/ui codebase analysis-How does shadcn-ui CLI work? \\u2014 Part 3.0\"};function h(a){let n={a:\"a\",blockquote:\"blockquote\",code:\"code\",div:\"div\",em:\"em\",h1:\"h1\",img:\"img\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",...a.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.p,{children:\"I wanted to find out how shadcn-ui CLI works. In this article, I discuss the code used to build the shadcn-ui/ui CLI.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"In part 2.0 to 2.15, I discussed how \",(0,e.jsx)(n.em,{children:\"npx shadcn-ui init\"}),\" works under the hood.\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"We will look at how \",(0,e.jsx)(n.em,{children:\"npx shadcn-ui add <component>\"}),\" works in this part 3.x.\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Since the \",(0,e.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/commands/add.ts\",children:\"packages/cli/src/commands/add.ts\"}),\" file is large, I will break this analysis down into parts and talk about code snippets and explain how stuff works.\"]}),`\n`,(0,e.jsx)(n.p,{children:\"In this article, we will look the concepts:\"}),`\n`,(0,e.jsxs)(n.ol,{children:[`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:\"Add command.\"}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:\"Commander.js package\"}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:\"How add command is registered?\"}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:\"Argument and options\"}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:\"addOptionsSchema\"}),`\n`]}),`\n`]}),`\n`,(0,e.jsx)(n.h1,{id:\"add-command\",children:(0,e.jsx)(n.strong,{children:\"add command\"})}),`\n`,(0,e.jsx)(n.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,e.jsx)(n.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,e.jsxs)(n.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"export const add = new Command()\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:'  .name(\"add\")'})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:'  .description(\"add a component to your project\")'})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:'  .argument(\"[components...]\", \"the components to add\")'})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:'  .option(\"-y, --yes\", \"skip confirmation prompt.\", true)'})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:'  .option(\"-o, --overwrite\", \"overwrite existing files.\", false)'})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  .option(\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:'    \"-c, --cwd <cwd>\",'})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:'    \"the working directory. defaults to the current directory.\",'})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"    process.cwd()\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  )\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:'  .option(\"-a, --all\", \"add all available components\", false)'})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:'  .option(\"-p, --path <path>\", \"the path to add the component to.\")'})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  .action(async (components, opts) => {\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"    try {\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"      const options = addOptionsSchema.parse({\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"        components,\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"        ...opts,\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"      })\"})})]})})}),`\n`,(0,e.jsxs)(n.p,{children:[\"We will begin with how add command is added. The above code snippet is picked from \",(0,e.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/commands/add.ts#L31C1-L49C9\",children:\"packages/cli/src/commands/add.ts\"})]}),`\n`,(0,e.jsx)(n.h1,{id:\"commanderjs-package\",children:(0,e.jsx)(n.strong,{children:\"Commander.js package:\"})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Command is imported from \",(0,e.jsx)(n.a,{href:\"https://www.npmjs.com/package/commander\",children:\"commander.js\"}),\", a complete solution for \",(0,e.jsx)(n.a,{href:\"http://nodejs.org/\",children:\"node.js\"}),\" command-line interfaces.\"]}),`\n`,(0,e.jsx)(n.h1,{id:\"how-add-command-is-registered\",children:(0,e.jsx)(n.strong,{children:\"How add command is registered?\"})}),`\n`,(0,e.jsxs)(n.p,{children:[\"The way add command is registered is that, if you open this \",(0,e.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/index.ts#L24\",children:\"src/commands/index.ts\"}),\" in a new tab, you will find this code as shown below\"]}),`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{src:\"https://miro.medium.com/v2/resize:fit:875/1*P3t8GFZm8Qrzc0iKp7u2aA.png\",alt:\"\"})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Commands are created separately in the \",(0,e.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/packages/cli/src/commands\",children:\"folder named commands\"}),\" for maintainability purposes. If you were to fork this shadcn-ui/ui repo and want to add your own command, this is one way to do it.\"]}),`\n`,(0,e.jsx)(n.h1,{id:\"argument-and-options\",children:(0,e.jsx)(n.strong,{children:\"Argument and options\"})}),`\n`,(0,e.jsxs)(n.p,{children:[\"When you write something like \",(0,e.jsx)(n.code,{children:\"npx shadcn-ui add Button\"}),\", \",(0,e.jsx)(n.code,{children:\"Button\"}),\" here is an argument.\"]}),`\n`,(0,e.jsx)(n.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,e.jsx)(n.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,e.jsx)(n.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:'.argument(\"[components...]\", \"the components to add\")'})})})})}),`\n`,(0,e.jsxs)(n.p,{children:[\"The above code snippet is picked from \",(0,e.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/commands/add.ts#L34C3-L34C56\",children:\"here\"}),\".\"]}),`\n`,(0,e.jsx)(n.p,{children:\"You also have options that go with your add command as shown below:\"}),`\n`,(0,e.jsx)(n.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,e.jsx)(n.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,e.jsxs)(n.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:'.option(\"-y, --yes\", \"skip confirmation prompt.\", true)'})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:'.option(\"-o, --overwrite\", \"overwrite existing files.\", false)'})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\".option(\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:'  \"-c, --cwd <cwd>\",'})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:'  \"the working directory. defaults to the current directory.\",'})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  process.cwd()\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\")\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:'.option(\"-a, --all\", \"add all available components\", false)'})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:'.option(\"-p, --path <path>\", \"the path to add the component to.\")'})})]})})}),`\n`,(0,e.jsxs)(n.p,{children:[\"and then you have \",(0,e.jsx)(n.code,{children:\"action\"})]}),`\n`,(0,e.jsx)(n.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,e.jsx)(n.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,e.jsx)(n.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\".action(async (components, opts) => {\"})})})})}),`\n`,(0,e.jsx)(n.h1,{id:\"addoptionsschema\",children:(0,e.jsx)(n.strong,{children:\"addOptionsSchema\"})}),`\n`,(0,e.jsx)(n.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,e.jsx)(n.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,e.jsxs)(n.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\" const options = addOptionsSchema.parse({\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  components,\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  ...opts,\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"})\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"const cwd = path.resolve(options.cwd)\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"if (!existsSync(cwd)) {\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  logger.error(`The path ${cwd} does not exist. Please try again.`)\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  process.exit(1)\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"}\"})})]})})}),`\n`,(0,e.jsxs)(n.p,{children:[\"The above snippet is picked from \",(0,e.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/commands/add.ts#L34C3-L34C56\",children:\"add.ts\"})]}),`\n`,(0,e.jsx)(n.p,{children:\"addOptionsSchema is declared just above the add function as shown below:\"}),`\n`,(0,e.jsx)(n.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,e.jsx)(n.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,e.jsxs)(n.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"const addOptionsSchema = z.object({\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  components: z.array(z.string()).optional(),\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  yes: z.boolean(),\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  overwrite: z.boolean(),\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  cwd: z.string(),\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  all: z.boolean(),\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  path: z.string().optional(),\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"})\"})})]})})}),`\n`,(0,e.jsx)(n.p,{children:\"This schema basically ensures all the options and arguments are valid before processing them further.\"}),`\n`,(0,e.jsx)(n.h1,{id:\"conclusion\",children:(0,e.jsx)(n.strong,{children:\"Conclusion:\"})}),`\n`,(0,e.jsxs)(n.p,{children:[\"In Part 2.0 to 2.15, I discussed how npx shadcn-ui init works under the hood. It is time for a version bump to my articles. In 3.x articles, I will write about how npx shadcn-ui add works under the hood. Please note that \",(0,e.jsx)(n.a,{href:\"https://semver.org/\",children:\"semver\"}),\" is not applicable to my articles lol.\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Command is imported from \",(0,e.jsx)(n.a,{href:\"https://www.npmjs.com/package/commander\",children:\"commander.js\"}),\", a complete solution for \",(0,e.jsx)(n.a,{href:\"http://nodejs.org/\",children:\"node.js\"}),\" command-line interfaces. The way add command is registered with npx shadcn-ui CLI is that, if you open this \",(0,e.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/index.ts#L24\",children:\"src/commands/index.ts\"}),\" in a new tab, you will find this code as shown below:\"]}),`\n`,(0,e.jsx)(n.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,e.jsx)(n.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,e.jsx)(n.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"program.addCommand(init).addCommand(add).addCommand(diff)\"})})})})}),`\n`,(0,e.jsxs)(n.p,{children:[\"There\\u2019s an argument that accepts a single component name or an array of component names, that is why you would write something like \",(0,e.jsx)(n.code,{children:\"npx shadcn-ui add Button\"})]}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.code,{children:\"Button\"}),\"here is an argument. add command also has few options such -y, -o, -c, -a, -p. Read more about these in the \",(0,e.jsx)(n.a,{href:\"https://ui.shadcn.com/docs/cli\",children:\"shadcn-ui CLI documentation\"}),\".\"]}),`\n`,(0,e.jsx)(n.p,{children:\"addOptionsSchema ensures that arguments and the options passed to the add command are valid using zod\"}),`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{src:\"https://miro.medium.com/v2/resize:fit:875/1*47EKz3q3aUidRrzxVGAjLg.png\",alt:\"\"})}),`\n`,(0,e.jsxs)(n.blockquote,{children:[`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.a,{href:\"https://app.thinkthroo.com/best-practices\",children:(0,e.jsx)(n.em,{children:\"Get free courses inspired by the best practices used in open source.\"})})}),`\n`]}),`\n`,(0,e.jsx)(n.h1,{id:\"about-me\",children:(0,e.jsx)(n.strong,{children:\"About me:\"})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Hey, my name is \",(0,e.jsx)(n.a,{href:\"https://ramunarasinga.com/\",children:(0,e.jsx)(n.strong,{children:\"Ramu Narasinga\"})}),\". I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\"]}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.em,{children:(0,e.jsx)(n.strong,{children:\"I am open to work on interesting projects. Send me an email at\"})}),\" \",(0,e.jsx)(n.a,{href:\"mailto:ramu.narasinga@gmail.com\",children:(0,e.jsx)(n.em,{children:(0,e.jsx)(n.strong,{children:\"ramu.narasinga@gmail.com\"})})})]}),`\n`,(0,e.jsxs)(n.p,{children:[\"My Github\\u200A\\u2014\\u200A\",(0,e.jsx)(n.a,{href:\"https://github.com/ramu-narasinga\",children:(0,e.jsx)(n.strong,{children:\"https://github.com/ramu-narasinga\"})})]}),`\n`,(0,e.jsxs)(n.p,{children:[\"My website\\u200A\\u2014\\u200A\",(0,e.jsx)(n.a,{href:\"https://ramunarasinga.com/\",children:(0,e.jsx)(n.strong,{children:\"https://ramunarasinga.com\"})})]}),`\n`,(0,e.jsxs)(n.p,{children:[\"My Youtube channel\\u200A\\u2014\\u200A\",(0,e.jsx)(n.a,{href:\"https://www.youtube.com/@thinkthroo\",children:(0,e.jsx)(n.strong,{children:\"https://www.youtube.com/@thinkthroo\"})})]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Learning platform\\u200A\\u2014\\u200A\",(0,e.jsx)(n.a,{href:\"https://thinkthroo.com/\",children:(0,e.jsx)(n.strong,{children:\"https://thinkthroo.com\"})})]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Codebase Architecture\\u200A\\u2014\\u200A\",(0,e.jsx)(n.a,{href:\"https://app.thinkthroo.com/architecture\",children:(0,e.jsx)(n.strong,{children:\"https://app.thinkthroo.com/architecture\"})})]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Best practices\\u200A\\u2014\\u200A\",(0,e.jsx)(n.a,{href:\"https://app.thinkthroo.com/best-practices\",children:(0,e.jsx)(n.strong,{children:\"https://app.thinkthroo.com/best-practices\"})})]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Production-grade projects\\u200A\\u2014\\u200A\",(0,e.jsx)(n.a,{href:\"https://app.thinkthroo.com/production-grade-projects\",children:(0,e.jsx)(n.strong,{children:\"https://app.thinkthroo.com/production-grade-projects\"})})]}),`\n`,(0,e.jsx)(n.h1,{id:\"references\",children:(0,e.jsx)(n.strong,{children:\"References\"})}),`\n`,(0,e.jsxs)(n.ol,{children:[`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/commands/add.ts\",children:\"https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/commands/add.ts\"})}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/commands/add.ts#L31C1-L49C9\",children:\"https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/commands/add.ts#L31C1-L49C9\"})}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/index.ts#L24\",children:\"https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/index.ts#L24\"})}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.a,{href:\"https://www.npmjs.com/package/commander\",children:\"https://www.npmjs.com/package/commander\"})}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/commands/add.ts#L22\",children:\"https://github.com/shadcn-ui/ui/blob/main/packages/cli/src/commands/add.ts#L22\"})}),`\n`]}),`\n`]})]})}function o(a={}){let{wrapper:n}=a.components||{};return n?(0,e.jsx)(n,{...a,children:(0,e.jsx)(h,{...a})}):h(a)}return k(x);})();\n;return Component;"
  },
  "_id": "blog/shadcn-ui-codebase-3-0.mdx",
  "_raw": {
    "sourceFilePath": "blog/shadcn-ui-codebase-3-0.mdx",
    "sourceFileName": "shadcn-ui-codebase-3-0.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/shadcn-ui-codebase-3-0"
  },
  "type": "Doc",
  "slug": "/blog/shadcn-ui-codebase-3-0",
  "slugAsParams": "shadcn-ui-codebase-3-0"
}
{
<<<<<<< HEAD
  "title": "esMain(import.meta) in Nue-js source code.\r",
=======
  "title": "esMain(import.meta) in Nue-js source code.",
>>>>>>> 442b740f3cf43317109944c6cf4b7ca543a8cddf
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
<<<<<<< HEAD
    "raw": "\r\nIn this article, we will review a function, esMain(), in Nue.js source code. You will find the below code snippet at [line 127 in packages/nuekit/cli.js](https://github.com/nuejs/nue/blob/master/packages/nuekit/src/cli.js#L127).\r\n\r\n```plaintext\r\n// Only run main when called as real CLI\r\nif (esMain(import.meta)) {\r\n```\r\n\r\nWhat caught my attention is this comment below:\r\n\r\n> // Only run main when called as real CLI\r\n\r\nI was thinking how does this check happen? To understand that we need to see the esMain function code. It is located in [packages/nuekit/src/util.js](https://github.com/nuejs/nue/blob/master/packages/nuekit/src/util.js#L16).\r\n\r\n```plaintext\r\nexport function esMain(meta) {\r\n  if (!meta || !process.argv[1]) return false\r\n  return fileURLToPath(\r\n    meta.resolve(process.argv[1])) === fileURLToPath(meta.url\r\n  )\r\n}\r\n```\r\n\r\nLet’s break this down. I would start with finding out what [import.meta](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta) is.\r\n\r\n![](https://cdn-images-1.medium.com/max/1000/1*wbn68rKZuOICouiAFJEwdg.png)\r\n\r\n#### import.meta\r\n\r\nThe `import.meta` meta-property exposes context-specific metadata to a JavaScript module. It contains information about the module, such as the module's URL.\r\n\r\nRead more about [import.meta](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta).\r\n\r\nTLDR: import.meta is created by the host environment and the object looks something like below:\r\n\r\n```plaintext\r\n{\r\n  // In browsers, this is either the URL from which the script was obtained \r\n  // (for external scripts), or the URL of the containing document \r\n  // (for inline scripts). In Node.js, this is the file path (including the \r\n  // file:// protocol).\r\n  \"url\": <value>, // ()\r\n  // Resolves a module specifier to a URL \r\n  // using the current module's URL as base.\r\n  \"resolve\": \r\n}\r\n```\r\n\r\nSo if there is not meta or process.argv\\[1\\], this esMain function returns false.\r\n\r\n```plaintext\r\nif (!meta || !process.argv[1]) return false\r\n```\r\n\r\notherwise, the below code is executed:\r\n\r\n```plaintext\r\nreturn fileURLToPath(\r\n  meta.resolve(process.argv[1])\r\n) === fileURLToPath(meta.url)\r\n```\r\n\r\nfileURLToPath is imported from “node:url” at the top of this file as shown below:\r\n\r\n```plaintext\r\nimport { fileURLToPath, pathToFileURL } from 'node:url'\r\n```\r\n\r\n### About me:\r\n\r\nHey, my name is [Ramu Narasinga](https://ramunarasinga.com). I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\r\n\r\n***I am open to work on interesting projects. Send me an email at ramu.narasinga@gmail.com***\r\n\r\nMy Github —  [https://github.com/ramu-narasinga](https://github.com/ramu-narasinga)\r\n\r\nMy website —  [https://ramunarasinga.com](https://ramunarasinga.com/)\r\n\r\nMy Youtube channel —  [https://www.youtube.com/@ramu-narasinga](https://www.youtube.com/@ramu-narasinga)\r\n\r\nLearning platform —  [https://thinkthroo.com](https://thinkthroo.com/)\r\n\r\nCodebase Architecture —  [https://app.thinkthroo.com/architecture](https://app.thinkthroo.com/architecture)\r\n\r\nBest practices —  [https://app.thinkthroo.com/best-practices](https://app.thinkthroo.com/best-practices)\r\n\r\nProduction-grade projects —  [https://app.thinkthroo.com/production-grade-projects](https://app.thinkthroo.com/production-grade-projects)\r\n\r\n### References:\r\n\r\n1. [https://github.com/nuejs/nue/blob/master/packages/nuekit/src/cli.js#L126](https://github.com/nuejs/nue/blob/master/packages/nuekit/src/cli.js#L126)\r\n    \r\n2. [https://github.com/nuejs/nue/blob/master/packages/nuekit/src/util.js#L16](https://github.com/nuejs/nue/blob/master/packages/nuekit/src/util.js#L16)\r\n    \r\n3. [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta)",
=======
    "raw": "\nIn this article, we will review a function, esMain(), in Nue.js source code. You will find the below code snippet at [line 127 in packages/nuekit/cli.js](https://github.com/nuejs/nue/blob/master/packages/nuekit/src/cli.js#L127).\n\n```plaintext\n// Only run main when called as real CLI\nif (esMain(import.meta)) {\n```\n\nWhat caught my attention is this comment below:\n\n> // Only run main when called as real CLI\n\nI was thinking how does this check happen? To understand that we need to see the esMain function code. It is located in [packages/nuekit/src/util.js](https://github.com/nuejs/nue/blob/master/packages/nuekit/src/util.js#L16).\n\n```plaintext\nexport function esMain(meta) {\n  if (!meta || !process.argv[1]) return false\n  return fileURLToPath(\n    meta.resolve(process.argv[1])) === fileURLToPath(meta.url\n  )\n}\n```\n\nLet’s break this down. I would start with finding out what [import.meta](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta) is.\n\n![](https://cdn-images-1.medium.com/max/1000/1*wbn68rKZuOICouiAFJEwdg.png)\n\n#### import.meta\n\nThe `import.meta` meta-property exposes context-specific metadata to a JavaScript module. It contains information about the module, such as the module's URL.\n\nRead more about [import.meta](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta).\n\nTLDR: import.meta is created by the host environment and the object looks something like below:\n\n```plaintext\n{\n  // In browsers, this is either the URL from which the script was obtained \n  // (for external scripts), or the URL of the containing document \n  // (for inline scripts). In Node.js, this is the file path (including the \n  // file:// protocol).\n  \"url\": <value>, // ()\n  // Resolves a module specifier to a URL \n  // using the current module's URL as base.\n  \"resolve\": \n}\n```\n\nSo if there is not meta or process.argv\\[1\\], this esMain function returns false.\n\n```plaintext\nif (!meta || !process.argv[1]) return false\n```\n\notherwise, the below code is executed:\n\n```plaintext\nreturn fileURLToPath(\n  meta.resolve(process.argv[1])\n) === fileURLToPath(meta.url)\n```\n\nfileURLToPath is imported from “node:url” at the top of this file as shown below:\n\n```plaintext\nimport { fileURLToPath, pathToFileURL } from 'node:url'\n```\n\n### About me:\n\nHey, my name is [Ramu Narasinga](https://ramunarasinga.com). I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\n\n***I am open to work on interesting projects. Send me an email at ramu.narasinga@gmail.com***\n\nMy Github —  [https://github.com/ramu-narasinga](https://github.com/ramu-narasinga)\n\nMy website —  [https://ramunarasinga.com](https://ramunarasinga.com/)\n\nMy Youtube channel —  [https://www.youtube.com/@ramu-narasinga](https://www.youtube.com/@ramu-narasinga)\n\nLearning platform —  [https://thinkthroo.com](https://thinkthroo.com/)\n\nCodebase Architecture —  [https://app.thinkthroo.com/architecture](https://app.thinkthroo.com/architecture)\n\nBest practices —  [https://app.thinkthroo.com/best-practices](https://app.thinkthroo.com/best-practices)\n\nProduction-grade projects —  [https://app.thinkthroo.com/production-grade-projects](https://app.thinkthroo.com/production-grade-projects)\n\n### References:\n\n1. [https://github.com/nuejs/nue/blob/master/packages/nuekit/src/cli.js#L126](https://github.com/nuejs/nue/blob/master/packages/nuekit/src/cli.js#L126)\n    \n2. [https://github.com/nuejs/nue/blob/master/packages/nuekit/src/util.js#L16](https://github.com/nuejs/nue/blob/master/packages/nuekit/src/util.js#L16)\n    \n3. [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta)",
>>>>>>> 442b740f3cf43317109944c6cf4b7ca543a8cddf
    "code": "var Component=(()=>{var p=Object.create;var i=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var b=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),w=(a,e)=>{for(var t in e)i(a,t,{get:e[t],enumerable:!0})},c=(a,e,t,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of u(e))!f.call(a,r)&&r!==t&&i(a,r,{get:()=>e[r],enumerable:!(l=m(e,r))||l.enumerable});return a};var k=(a,e,t)=>(t=a!=null?p(g(a)):{},c(e||!a||!a.__esModule?i(t,\"default\",{value:a,enumerable:!0}):t,a)),v=a=>c(i({},\"__esModule\",{value:!0}),a);var h=b((y,s)=>{s.exports=_jsx_runtime});var x={};w(x,{default:()=>d,frontmatter:()=>j});var n=k(h()),j={title:\"esMain(import.meta) in Nue-js source\\xA0code.\"};function o(a){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",div:\"div\",em:\"em\",h3:\"h3\",h4:\"h4\",img:\"img\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",...a.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"In this article, we will review a function, esMain(), in Nue.js source code. You will find the below code snippet at \",(0,n.jsx)(e.a,{href:\"https://github.com/nuejs/nue/blob/master/packages/nuekit/src/cli.js#L127\",children:\"line 127 in packages/nuekit/cli.js\"}),\".\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"// Only run main when called as real CLI\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"if (esMain(import.meta)) {\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"What caught my attention is this comment below:\"}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:\"// Only run main when called as real CLI\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"I was thinking how does this check happen? To understand that we need to see the esMain function code. It is located in \",(0,n.jsx)(e.a,{href:\"https://github.com/nuejs/nue/blob/master/packages/nuekit/src/util.js#L16\",children:\"packages/nuekit/src/util.js\"}),\".\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"export function esMain(meta) {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  if (!meta || !process.argv[1]) return false\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  return fileURLToPath(\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    meta.resolve(process.argv[1])) === fileURLToPath(meta.url\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  )\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Let\\u2019s break this down. I would start with finding out what \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta\",children:\"import.meta\"}),\" is.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://cdn-images-1.medium.com/max/1000/1*wbn68rKZuOICouiAFJEwdg.png\",alt:\"\"})}),`\n`,(0,n.jsx)(e.h4,{id:\"importmeta\",children:\"import.meta\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"import.meta\"}),\" meta-property exposes context-specific metadata to a JavaScript module. It contains information about the module, such as the module's URL.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Read more about \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta\",children:\"import.meta\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"TLDR: import.meta is created by the host environment and the object looks something like below:\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"{\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  // In browsers, this is either the URL from which the script was obtained \"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  // (for external scripts), or the URL of the containing document \"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  // (for inline scripts). In Node.js, this is the file path (including the \"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  // file:// protocol).\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:'  \"url\": <value>, // ()'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  // Resolves a module specifier to a URL \"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  // using the current module's URL as base.\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:'  \"resolve\": '})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"So if there is not meta or process.argv[1], this esMain function returns false.\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsx)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"if (!meta || !process.argv[1]) return false\"})})})})}),`\n`,(0,n.jsx)(e.p,{children:\"otherwise, the below code is executed:\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"return fileURLToPath(\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  meta.resolve(process.argv[1])\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\") === fileURLToPath(meta.url)\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"fileURLToPath is imported from \\u201Cnode:url\\u201D at the top of this file as shown below:\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsx)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"import { fileURLToPath, pathToFileURL } from 'node:url'\"})})})})}),`\n`,(0,n.jsx)(e.h3,{id:\"about-me\",children:\"About me:\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Hey, my name is \",(0,n.jsx)(e.a,{href:\"https://ramunarasinga.com\",children:\"Ramu Narasinga\"}),\". I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:(0,n.jsxs)(e.strong,{children:[\"I am open to work on interesting projects. Send me an email at \",(0,n.jsx)(e.a,{href:\"mailto:ramu.narasinga@gmail.com\",children:\"ramu.narasinga@gmail.com\"})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Github\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://github.com/ramu-narasinga\",children:\"https://github.com/ramu-narasinga\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My website\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://ramunarasinga.com/\",children:\"https://ramunarasinga.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Youtube channel\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://www.youtube.com/@ramu-narasinga\",children:\"https://www.youtube.com/@ramu-narasinga\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Learning platform\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://thinkthroo.com/\",children:\"https://thinkthroo.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Codebase Architecture\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/architecture\",children:\"https://app.thinkthroo.com/architecture\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Best practices\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/best-practices\",children:\"https://app.thinkthroo.com/best-practices\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Production-grade projects\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/production-grade-projects\",children:\"https://app.thinkthroo.com/production-grade-projects\"})]}),`\n`,(0,n.jsx)(e.h3,{id:\"references\",children:\"References:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/nuejs/nue/blob/master/packages/nuekit/src/cli.js#L126\",children:\"https://github.com/nuejs/nue/blob/master/packages/nuekit/src/cli.js#L126\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/nuejs/nue/blob/master/packages/nuekit/src/util.js#L16\",children:\"https://github.com/nuejs/nue/blob/master/packages/nuekit/src/util.js#L16\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta\",children:\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/import.meta\"})}),`\n`]}),`\n`]})]})}function d(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,{...a,children:(0,n.jsx)(o,{...a})}):o(a)}return v(x);})();\n;return Component;"
  },
  "_id": "blog/esMain-import.meta-in-Nue.js.mdx",
  "_raw": {
    "sourceFilePath": "blog/esMain-import.meta-in-Nue.js.mdx",
    "sourceFileName": "esMain-import.meta-in-Nue.js.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/esMain-import.meta-in-Nue.js"
  },
  "type": "Doc",
  "slug": "/blog/esMain-import.meta-in-Nue.js",
  "slugAsParams": "esMain-import.meta-in-Nue.js"
}
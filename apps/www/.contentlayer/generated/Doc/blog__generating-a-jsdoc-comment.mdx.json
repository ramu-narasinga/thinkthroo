{
  "title": "Generating a JSDoc comment for your function using OpenAI.\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\nThis article is inspired by Remotion’s internal package, [ai-improvements](https://github.com/remotion-dev/remotion/tree/main/packages/ai-improvements). This internal package is used to improve/generate JSDoc comment and log in the console for a function in the [Remotion’s source code](https://github.com/remotion-dev/remotion/blob/main/packages/core/src/AbsoluteFill.tsx#L26-L29).\r\n\r\nThis use case is quite different because you would normally use the source code and let OpenAI generate API documentation but instead in Remotion, this internal package uses the OpenAI API to generate JSDoc comment for a function using API documentation and the source code.\r\n\r\n[![](https://miro.medium.com/v2/resize:fit:875/1*ANC_Hz5Shl-L6RVCefINZA.png)](https://thinkthroo.com/)\r\n\r\nWe will look at a high level how this package is configured:\r\n\r\n1. improve-docs.ts\r\n    \r\n2. generate-jsdoc\r\n    \r\n\r\n# **Improve docs**\r\n\r\n```plaintext\r\nimport path from \"path\";\r\nimport { OpenAI } from \"openai\";\r\nimport { getApis } from \"./map-over-api\";\r\nimport { findMistakes } from \"./tasks/find-mistakes\";\r\nimport { generateJSDocTask } from \"./tasks/generate-jsdoc\";\r\n```\r\n\r\n[improve-docs.ts](https://github.com/remotion-dev/remotion/blob/main/packages/ai-improvements/improve-docs.ts) has the above imports. generateJSDocTask is imported from ‘tasks’ folder.\r\n\r\n[![](https://miro.medium.com/v2/resize:fit:875/1*FSLTVNat9n9PV4DoUS1tJQ.png)](https://thinkthroo.com/)\r\n\r\ndepending on the task, you could either generate a JSDoc or find mistakes.\r\n\r\n# **Generate JSDoc**\r\n\r\n[![](https://miro.medium.com/v2/resize:fit:875/1*Us8-4uQOGWH9c6cDSj-LxA.png)](https://thinkthroo.com/)\r\n\r\n[generate-jsdoc.ts](https://github.com/remotion-dev/remotion/blob/main/packages/ai-improvements/tasks/generate-jsdoc.ts) uses the openai API and has prompts as shown in the above image.\r\n\r\n[![](https://miro.medium.com/v2/resize:fit:875/1*7PWIWnDYKu4sL4SKmDV-9Q.png)](https://thinkthroo.com/)\r\n\r\nPlease note that this will only write the generated JSDoc to the console. Would it be possible to write these JSDoc comments programatically in the file? Not sure, but it is worth reading the AST documentation to see if there’s any API available to add JSDoc comments just above the function or class name. [ts-morph](https://ts-morph.com/manipulation/) is known to be used in shadcn-ui/ui to manipulate the source code at AST level.\r\n\r\n[![](https://miro.medium.com/v2/resize:fit:875/0*QlUA8-jvrCQnSBIJ.png)](https://thinkthroo.com/)\r\n\r\n# **About me:**\r\n\r\nHey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\r\n\r\nI am open to work on interesting projects. Send me an email at ramu.narasinga@gmail.com\r\n\r\nMy Github — [https://github.com/ramu-narasinga](https://github.com/ramu-narasinga)\r\n\r\nMy website — [https://ramunarasinga.com](https://ramunarasinga.com/)\r\n\r\nMy Youtube channel — [https://www.youtube.com/@thinkthroo](https://www.youtube.com/@thinkthroo)\r\n\r\nLearning platform — [https://thinkthroo.com](https://thinkthroo.com/)\r\n\r\nCodebase Architecture — [https://app.thinkthroo.com/architecture](https://app.thinkthroo.com/architecture)\r\n\r\nBest practices — [https://app.thinkthroo.com/best-practices](https://app.thinkthroo.com/best-practices)\r\n\r\nProduction-grade projects — [https://app.thinkthroo.com/production-grade-projects](https://app.thinkthroo.com/production-grade-projects)\r\n\r\n# **References:**\r\n\r\n1. [https://github.com/remotion-dev/remotion/tree/main/packages/ai-improvements](https://github.com/remotion-dev/remotion/tree/main/packages/ai-improvements)\r\n    \r\n2. [https://github.com/remotion-dev/remotion/blob/main/packages/ai-improvements/improve-docs.ts](https://github.com/remotion-dev/remotion/blob/main/packages/ai-improvements/improve-docs.ts)\r\n    \r\n3. [https://github.com/remotion-dev/remotion/blob/main/packages/ai-improvements/tasks/generate-jsdoc.ts](https://github.com/remotion-dev/remotion/blob/main/packages/ai-improvements/tasks/generate-jsdoc.ts)\r\n    \r\n4. [https://github.com/remotion-dev/remotion/blob/main/packages/ai-improvements/tasks/find-mistakes.ts](https://github.com/remotion-dev/remotion/blob/main/packages/ai-improvements/tasks/find-mistakes.ts)\r\n    \r\n5. [https://github.com/remotion-dev/remotion/blob/main/packages/ai-improvements/map-over-api.ts](https://github.com/remotion-dev/remotion/blob/main/packages/ai-improvements/map-over-api.ts)\r\n    \r\n6. [https://github.com/remotion-dev/remotion/blob/main/packages/docs/src/data/articles.ts](https://github.com/remotion-dev/remotion/blob/main/packages/docs/src/data/articles.ts)\r\n",
    "code": "var Component=(()=>{var d=Object.create;var r=Object.defineProperty;var l=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var f=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),v=(n,e)=>{for(var i in e)r(n,i,{get:e[i],enumerable:!0})},s=(n,e,i,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of g(e))!b.call(n,o)&&o!==i&&r(n,o,{get:()=>e[o],enumerable:!(a=l(e,o))||a.enumerable});return n};var k=(n,e,i)=>(i=n!=null?d(u(n)):{},s(e||!n||!n.__esModule?r(i,\"default\",{value:n,enumerable:!0}):i,n)),j=n=>s(r({},\"__esModule\",{value:!0}),n);var h=f((w,c)=>{c.exports=_jsx_runtime});var A={};v(A,{default:()=>p,frontmatter:()=>y});var t=k(h()),y={title:\"Generating a JSDoc comment for your function using OpenAI.\"};function m(n){let e={a:\"a\",code:\"code\",div:\"div\",h1:\"h1\",img:\"img\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"This article is inspired by Remotion\\u2019s internal package, \",(0,t.jsx)(e.a,{href:\"https://github.com/remotion-dev/remotion/tree/main/packages/ai-improvements\",children:\"ai-improvements\"}),\". This internal package is used to improve/generate JSDoc comment and log in the console for a function in the \",(0,t.jsx)(e.a,{href:\"https://github.com/remotion-dev/remotion/blob/main/packages/core/src/AbsoluteFill.tsx#L26-L29\",children:\"Remotion\\u2019s source code\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:\"This use case is quite different because you would normally use the source code and let OpenAI generate API documentation but instead in Remotion, this internal package uses the OpenAI API to generate JSDoc comment for a function using API documentation and the source code.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:\"https://thinkthroo.com/\",children:(0,t.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:875/1*ANC_Hz5Shl-L6RVCefINZA.png\",alt:\"\"})})}),`\n`,(0,t.jsx)(e.p,{children:\"We will look at a high level how this package is configured:\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:\"improve-docs.ts\"}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:\"generate-jsdoc\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsx)(e.h1,{id:\"improve-docs\",children:(0,t.jsx)(e.strong,{children:\"Improve docs\"})}),`\n`,(0,t.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,t.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,t.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,t.jsx)(e.span,{className:\"line\",children:(0,t.jsx)(e.span,{children:'import path from \"path\";'})}),`\n`,(0,t.jsx)(e.span,{className:\"line\",children:(0,t.jsx)(e.span,{children:'import { OpenAI } from \"openai\";'})}),`\n`,(0,t.jsx)(e.span,{className:\"line\",children:(0,t.jsx)(e.span,{children:'import { getApis } from \"./map-over-api\";'})}),`\n`,(0,t.jsx)(e.span,{className:\"line\",children:(0,t.jsx)(e.span,{children:'import { findMistakes } from \"./tasks/find-mistakes\";'})}),`\n`,(0,t.jsx)(e.span,{className:\"line\",children:(0,t.jsx)(e.span,{children:'import { generateJSDocTask } from \"./tasks/generate-jsdoc\";'})})]})})}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:\"https://github.com/remotion-dev/remotion/blob/main/packages/ai-improvements/improve-docs.ts\",children:\"improve-docs.ts\"}),\" has the above imports. generateJSDocTask is imported from \\u2018tasks\\u2019 folder.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:\"https://thinkthroo.com/\",children:(0,t.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:875/1*FSLTVNat9n9PV4DoUS1tJQ.png\",alt:\"\"})})}),`\n`,(0,t.jsx)(e.p,{children:\"depending on the task, you could either generate a JSDoc or find mistakes.\"}),`\n`,(0,t.jsx)(e.h1,{id:\"generate-jsdoc\",children:(0,t.jsx)(e.strong,{children:\"Generate JSDoc\"})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:\"https://thinkthroo.com/\",children:(0,t.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:875/1*Us8-4uQOGWH9c6cDSj-LxA.png\",alt:\"\"})})}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:\"https://github.com/remotion-dev/remotion/blob/main/packages/ai-improvements/tasks/generate-jsdoc.ts\",children:\"generate-jsdoc.ts\"}),\" uses the openai API and has prompts as shown in the above image.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:\"https://thinkthroo.com/\",children:(0,t.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:875/1*7PWIWnDYKu4sL4SKmDV-9Q.png\",alt:\"\"})})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Please note that this will only write the generated JSDoc to the console. Would it be possible to write these JSDoc comments programatically in the file? Not sure, but it is worth reading the AST documentation to see if there\\u2019s any API available to add JSDoc comments just above the function or class name. \",(0,t.jsx)(e.a,{href:\"https://ts-morph.com/manipulation/\",children:\"ts-morph\"}),\" is known to be used in shadcn-ui/ui to manipulate the source code at AST level.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:\"https://thinkthroo.com/\",children:(0,t.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:875/0*QlUA8-jvrCQnSBIJ.png\",alt:\"\"})})}),`\n`,(0,t.jsx)(e.h1,{id:\"about-me\",children:(0,t.jsx)(e.strong,{children:\"About me:\"})}),`\n`,(0,t.jsx)(e.p,{children:\"Hey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"I am open to work on interesting projects. Send me an email at \",(0,t.jsx)(e.a,{href:\"mailto:ramu.narasinga@gmail.com\",children:\"ramu.narasinga@gmail.com\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"My Github \\u2014 \",(0,t.jsx)(e.a,{href:\"https://github.com/ramu-narasinga\",children:\"https://github.com/ramu-narasinga\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"My website \\u2014 \",(0,t.jsx)(e.a,{href:\"https://ramunarasinga.com/\",children:\"https://ramunarasinga.com\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"My Youtube channel \\u2014 \",(0,t.jsx)(e.a,{href:\"https://www.youtube.com/@thinkthroo\",children:\"https://www.youtube.com/@thinkthroo\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Learning platform \\u2014 \",(0,t.jsx)(e.a,{href:\"https://thinkthroo.com/\",children:\"https://thinkthroo.com\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Codebase Architecture \\u2014 \",(0,t.jsx)(e.a,{href:\"https://app.thinkthroo.com/architecture\",children:\"https://app.thinkthroo.com/architecture\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Best practices \\u2014 \",(0,t.jsx)(e.a,{href:\"https://app.thinkthroo.com/best-practices\",children:\"https://app.thinkthroo.com/best-practices\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Production-grade projects \\u2014 \",(0,t.jsx)(e.a,{href:\"https://app.thinkthroo.com/production-grade-projects\",children:\"https://app.thinkthroo.com/production-grade-projects\"})]}),`\n`,(0,t.jsx)(e.h1,{id:\"references\",children:(0,t.jsx)(e.strong,{children:\"References:\"})}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:\"https://github.com/remotion-dev/remotion/tree/main/packages/ai-improvements\",children:\"https://github.com/remotion-dev/remotion/tree/main/packages/ai-improvements\"})}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:\"https://github.com/remotion-dev/remotion/blob/main/packages/ai-improvements/improve-docs.ts\",children:\"https://github.com/remotion-dev/remotion/blob/main/packages/ai-improvements/improve-docs.ts\"})}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:\"https://github.com/remotion-dev/remotion/blob/main/packages/ai-improvements/tasks/generate-jsdoc.ts\",children:\"https://github.com/remotion-dev/remotion/blob/main/packages/ai-improvements/tasks/generate-jsdoc.ts\"})}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:\"https://github.com/remotion-dev/remotion/blob/main/packages/ai-improvements/tasks/find-mistakes.ts\",children:\"https://github.com/remotion-dev/remotion/blob/main/packages/ai-improvements/tasks/find-mistakes.ts\"})}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:\"https://github.com/remotion-dev/remotion/blob/main/packages/ai-improvements/map-over-api.ts\",children:\"https://github.com/remotion-dev/remotion/blob/main/packages/ai-improvements/map-over-api.ts\"})}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:\"https://github.com/remotion-dev/remotion/blob/main/packages/docs/src/data/articles.ts\",children:\"https://github.com/remotion-dev/remotion/blob/main/packages/docs/src/data/articles.ts\"})}),`\n`]}),`\n`]})]})}function p(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(m,{...n})}):m(n)}return j(A);})();\n;return Component;"
  },
  "_id": "blog/generating-a-jsdoc-comment.mdx",
  "_raw": {
    "sourceFilePath": "blog/generating-a-jsdoc-comment.mdx",
    "sourceFileName": "generating-a-jsdoc-comment.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/generating-a-jsdoc-comment"
  },
  "type": "Doc",
  "slug": "/blog/generating-a-jsdoc-comment",
  "slugAsParams": "generating-a-jsdoc-comment"
}
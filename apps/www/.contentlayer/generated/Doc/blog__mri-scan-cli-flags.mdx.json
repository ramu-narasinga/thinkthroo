{
  "title": "Scan for CLI flags and arguments using MRI package\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\nIn this article, an overview of MRI package is provided with a usage example picked from [Changesets source code](https://github.com/changesets/changesets/blob/main/packages/cli/src/index.ts#L1C18-L1C21).\r\n\r\n### MRI package:\r\n\r\nYou can use MRI package to quickly scan for flags and arguments. It is an alternative to [yargs-parser](https://github.com/yargs/yargs-parser).\r\n\r\n#### Install\r\n\r\n```plaintext\r\nnpm install - save mri\r\n```\r\n\r\n#### Usage\r\n\r\n```plaintext\r\n// Example CLI with options \r\n$ demo-cli - foo - bar=baz -mtv - hello world\r\n```\r\n\r\nThe following code is picked from [MRI npm package documentation](https://www.npmjs.com/package/mri).\r\n\r\n```plaintext\r\nconst mri = require('mri');\r\nconst argv = process.argv.slice(2);\r\nmri(argv);\r\n//=> { _: ['hello', 'world'], foo:true, bar:'baz', m:true, t:true, v:true }\r\nmri(argv, { boolean:['bar'] });\r\n//=> { _: ['baz', 'hello', 'world'], foo:true, bar:true, m:true, t:true, v:true }\r\nmri(argv, {\r\n alias: {\r\n b: 'bar',\r\n foo: ['f', 'fuz']\r\n }\r\n});\r\n//=> { _: ['hello', 'world'], foo:true, f:true, fuz:true, b:'baz', bar:'baz', m:true, t:true, v:true }\r\n```\r\n\r\nRead more about the options:\r\n\r\n* [Alias](https://www.npmjs.com/package/mri#optionsalias)\r\n    \r\n* [Boolean](https://www.npmjs.com/package/mri#optionsboolean)\r\n    \r\n* [Default](https://www.npmjs.com/package/mri#optionsdefault)\r\n    \r\n\r\nIn essence, we get the CLI args converted into an object. Now that we understand the basics of MRI, it is time we look at its usage in Changesets.\r\n\r\n### MRI usage in Changesets:\r\n\r\nMRI is found to be imported in [Changesets CLI package](https://github.com/changesets/changesets/blob/main/packages/cli/src/index.ts#L1)\r\n\r\n![](https://cdn-images-1.medium.com/max/1600/1*824-bK3Ybw6r2Y59S43vNQ.png)\r\n\r\nWhen you [add a changeset](https://github.com/changesets/changesets/blob/main/docs/intro-to-using-changesets.md#adding-changesets) using the command `npx changeset add` or `npx changeset`, these are accessed in the CLI package as shown below.\r\n\r\n```plaintext\r\nconst args = process.argv.slice(2);\r\n```\r\n\r\n#### Parsing CLI args in changeset\r\n\r\nThe below code shows how mri used in Changeset CLI package\r\n\r\n```plaintext\r\nconst parsed = mri(args, {\r\n boolean: [\"sinceMaster\", \"verbose\", \"empty\", \"open\", \"gitTag\", \"snapshot\"],\r\n string: [\r\n \"output\",\r\n \"otp\",\r\n \"since\",\r\n \"ignore\",\r\n \"tag\",\r\n \"snapshot\",\r\n \"snapshotPrereleaseTemplate\",\r\n ],\r\n alias: {\r\n // Short flags\r\n v: \"verbose\",\r\n o: \"output\",\r\n // Support kebab-case flags\r\n \"since-master\": \"sinceMaster\",\r\n \"git-tag\": \"gitTag\",\r\n \"snapshot-prerelease-template\": \"snapshotPrereleaseTemplate\",\r\n // Deprecated flags\r\n \"update-changelog\": \"updateChangelog\",\r\n \"is-public\": \"isPublic\",\r\n \"skip-c-i\": \"skipCI\",\r\n },\r\n default: {\r\n gitTag: true,\r\n },\r\n});\r\n```\r\n\r\n`parsed` value will look like below, I deduced this based on the documentation:\r\n\r\n```plaintext\r\n{\r\n // string value (if you have used 'add' in npx changeset add)\r\n ['add'],\r\n// boolean values\r\n \"sinceMaster\": true, \r\n \"verbose\": true, \r\n \"empty\": true, \r\n \"open\": true, \r\n \"gitTag\": true, \r\n \"snapshot\": true\r\n// string values\r\n // Note: if you have passed these options in your CLI, these keys will be parsed as string, no matter the what you pass in\r\n // example: if you pass in - otp=123, 123 here, even though is a number, gets parsed as string since otp is configured to be parsed as\r\n // string in the above code\r\n \"output\",\r\n \"otp\",\r\n \"since\",\r\n \"ignore\",\r\n \"tag\",\r\n \"snapshot\",\r\n \"snapshotPrereleaseTemplate\",\r\n// The alias option in mri allows you to define alternative names (aliases) for CLI arguments.\r\n // This is particularly useful for supporting:\r\n// Short flags: Such as -v for - verbose.\r\n // Kebab-case flags: Allowing flags like - since-master to map to camelCase variables in JavaScript (e.g., sinceMaster).\r\n // Deprecated flags: If you want to support older names for backward compatibility but still map them to the current property names.\r\n}\r\n```\r\n\r\nparsed variable is used in a function named run imported from [/run.ts](https://github.com/changesets/changesets/blob/main/packages/cli/src/run.ts#L75-L88)\r\n\r\n```plaintext\r\n// run function call\r\nrun(parsed._, parsed, cwd).catch((err)\r\n```\r\n\r\nThe first parameter is `pared._` because in the documentation, it is provided that parsed commands like ‘add’ looks like `{ _: [‘add’]}`\r\n\r\n```plaintext\r\n// run function definition\r\nexport async function run(\r\n input: string[],\r\n flags: { [name: string]: any },\r\n cwd: string\r\n) {\r\n```\r\n\r\n`parsed` contains mri parsed object based on the CLI args and the configuration set for booleans, strings, defaults, aliases.\r\n\r\ncwd is a current working directory, you can get this with `process.cwd()`\r\n\r\n# **About me:**\r\n\r\nHey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\r\n\r\nI am open to work on interesting projects. Send me an email at ramu.narasinga@gmail.com\r\n\r\nMy Github — [https://github.com/ramu-narasinga](https://github.com/ramu-narasinga)\r\n\r\nMy website — [https://ramunarasinga.com](https://ramunarasinga.com/)\r\n\r\nMy Youtube channel — [https://www.youtube.com/@thinkthroo](https://www.youtube.com/@thinkthroo)\r\n\r\nLearning platform — [https://thinkthroo.com](https://thinkthroo.com/)\r\n\r\nCodebase Architecture — [https://app.thinkthroo.com/architecture](https://app.thinkthroo.com/architecture)\r\n\r\nBest practices — [https://app.thinkthroo.com/best-practices](https://app.thinkthroo.com/best-practices)\r\n\r\nProduction-grade projects — [https://app.thinkthroo.com/production-grade-projects](https://app.thinkthroo.com/production-grade-projects)\r\n\r\n### References:\r\n\r\n1. [https://www.npmjs.com/package/mri](https://www.npmjs.com/package/mri)\r\n    \r\n2. [https://github.com/changesets/changesets/blob/main/packages/cli/src/index.ts#L1C18-L1C21](https://github.com/changesets/changesets/blob/main/packages/cli/src/index.ts#L1C18-L1C21)\r\n    \r\n3. [https://github.com/changesets/changesets/blob/main/packages/cli/src/index.ts#L9](https://github.com/changesets/changesets/blob/main/packages/cli/src/index.ts#L9)\r\n",
    "code": "var Component=(()=>{var o=Object.create;var l=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var b=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),N=(a,e)=>{for(var s in e)l(a,s,{get:e[s],enumerable:!0})},c=(a,e,s,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of g(e))!f.call(a,i)&&i!==s&&l(a,i,{get:()=>e[i],enumerable:!(r=m(e,i))||r.enumerable});return a};var w=(a,e,s)=>(s=a!=null?o(u(a)):{},c(e||!a||!a.__esModule?l(s,\"default\",{value:a,enumerable:!0}):s,a)),k=a=>c(l({},\"__esModule\",{value:!0}),a);var h=b((C,t)=>{t.exports=_jsx_runtime});var y={};N(y,{default:()=>p,frontmatter:()=>v});var n=w(h()),v={title:\"Scan for CLI flags and arguments using MRI\\xA0package\"};function d(a){let e={a:\"a\",code:\"code\",div:\"div\",h1:\"h1\",h3:\"h3\",h4:\"h4\",img:\"img\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",ul:\"ul\",...a.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"In this article, an overview of MRI package is provided with a usage example picked from \",(0,n.jsx)(e.a,{href:\"https://github.com/changesets/changesets/blob/main/packages/cli/src/index.ts#L1C18-L1C21\",children:\"Changesets source code\"}),\".\"]}),`\n`,(0,n.jsx)(e.h3,{id:\"mri-package\",children:\"MRI package:\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can use MRI package to quickly scan for flags and arguments. It is an alternative to \",(0,n.jsx)(e.a,{href:\"https://github.com/yargs/yargs-parser\",children:\"yargs-parser\"}),\".\"]}),`\n`,(0,n.jsx)(e.h4,{id:\"install\",children:\"Install\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsx)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"npm install - save mri\"})})})})}),`\n`,(0,n.jsx)(e.h4,{id:\"usage\",children:\"Usage\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"// Example CLI with options \"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"$ demo-cli - foo - bar=baz -mtv - hello world\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The following code is picked from \",(0,n.jsx)(e.a,{href:\"https://www.npmjs.com/package/mri\",children:\"MRI npm package documentation\"}),\".\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const mri = require('mri');\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const argv = process.argv.slice(2);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"mri(argv);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"//=> { _: ['hello', 'world'], foo:true, bar:'baz', m:true, t:true, v:true }\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"mri(argv, { boolean:['bar'] });\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"//=> { _: ['baz', 'hello', 'world'], foo:true, bar:true, m:true, t:true, v:true }\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"mri(argv, {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" alias: {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" b: 'bar',\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" foo: ['f', 'fuz']\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" }\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"});\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"//=> { _: ['hello', 'world'], foo:true, f:true, fuz:true, b:'baz', bar:'baz', m:true, t:true, v:true }\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"Read more about the options:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://www.npmjs.com/package/mri#optionsalias\",children:\"Alias\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://www.npmjs.com/package/mri#optionsboolean\",children:\"Boolean\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://www.npmjs.com/package/mri#optionsdefault\",children:\"Default\"})}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"In essence, we get the CLI args converted into an object. Now that we understand the basics of MRI, it is time we look at its usage in Changesets.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"mri-usage-in-changesets\",children:\"MRI usage in Changesets:\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"MRI is found to be imported in \",(0,n.jsx)(e.a,{href:\"https://github.com/changesets/changesets/blob/main/packages/cli/src/index.ts#L1\",children:\"Changesets CLI package\"})]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://cdn-images-1.medium.com/max/1600/1*824-bK3Ybw6r2Y59S43vNQ.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"When you \",(0,n.jsx)(e.a,{href:\"https://github.com/changesets/changesets/blob/main/docs/intro-to-using-changesets.md#adding-changesets\",children:\"add a changeset\"}),\" using the command \",(0,n.jsx)(e.code,{children:\"npx changeset add\"}),\" or \",(0,n.jsx)(e.code,{children:\"npx changeset\"}),\", these are accessed in the CLI package as shown below.\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsx)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const args = process.argv.slice(2);\"})})})})}),`\n`,(0,n.jsx)(e.h4,{id:\"parsing-cli-args-in-changeset\",children:\"Parsing CLI args in changeset\"}),`\n`,(0,n.jsx)(e.p,{children:\"The below code shows how mri used in Changeset CLI package\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const parsed = mri(args, {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' boolean: [\"sinceMaster\", \"verbose\", \"empty\", \"open\", \"gitTag\", \"snapshot\"],'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" string: [\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' \"output\",'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' \"otp\",'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' \"since\",'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' \"ignore\",'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' \"tag\",'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' \"snapshot\",'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' \"snapshotPrereleaseTemplate\",'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" ],\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" alias: {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" // Short flags\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' v: \"verbose\",'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' o: \"output\",'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" // Support kebab-case flags\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' \"since-master\": \"sinceMaster\",'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' \"git-tag\": \"gitTag\",'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' \"snapshot-prerelease-template\": \"snapshotPrereleaseTemplate\",'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" // Deprecated flags\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' \"update-changelog\": \"updateChangelog\",'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' \"is-public\": \"isPublic\",'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' \"skip-c-i\": \"skipCI\",'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" },\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" default: {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" gitTag: true,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" },\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"});\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"parsed\"}),\" value will look like below, I deduced this based on the documentation:\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"{\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" // string value (if you have used 'add' in npx changeset add)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" ['add'],\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"// boolean values\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' \"sinceMaster\": true, '})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' \"verbose\": true, '})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' \"empty\": true, '})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' \"open\": true, '})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' \"gitTag\": true, '})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' \"snapshot\": true'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"// string values\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" // Note: if you have passed these options in your CLI, these keys will be parsed as string, no matter the what you pass in\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" // example: if you pass in - otp=123, 123 here, even though is a number, gets parsed as string since otp is configured to be parsed as\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" // string in the above code\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' \"output\",'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' \"otp\",'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' \"since\",'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' \"ignore\",'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' \"tag\",'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' \"snapshot\",'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' \"snapshotPrereleaseTemplate\",'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"// The alias option in mri allows you to define alternative names (aliases) for CLI arguments.\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" // This is particularly useful for supporting:\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"// Short flags: Such as -v for - verbose.\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" // Kebab-case flags: Allowing flags like - since-master to map to camelCase variables in JavaScript (e.g., sinceMaster).\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" // Deprecated flags: If you want to support older names for backward compatibility but still map them to the current property names.\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"parsed variable is used in a function named run imported from \",(0,n.jsx)(e.a,{href:\"https://github.com/changesets/changesets/blob/main/packages/cli/src/run.ts#L75-L88\",children:\"/run.ts\"})]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"// run function call\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"run(parsed._, parsed, cwd).catch((err)\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The first parameter is \",(0,n.jsx)(e.code,{children:\"pared._\"}),\" because in the documentation, it is provided that parsed commands like \\u2018add\\u2019 looks like \",(0,n.jsx)(e.code,{children:\"{ _: [\\u2018add\\u2019]}\"})]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"// run function definition\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"export async function run(\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" input: string[],\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" flags: { [name: string]: any },\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" cwd: string\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\") {\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"parsed\"}),\" contains mri parsed object based on the CLI args and the configuration set for booleans, strings, defaults, aliases.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"cwd is a current working directory, you can get this with \",(0,n.jsx)(e.code,{children:\"process.cwd()\"})]}),`\n`,(0,n.jsx)(e.h1,{id:\"about-me\",children:(0,n.jsx)(e.strong,{children:\"About me:\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Hey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"I am open to work on interesting projects. Send me an email at \",(0,n.jsx)(e.a,{href:\"mailto:ramu.narasinga@gmail.com\",children:\"ramu.narasinga@gmail.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Github \\u2014 \",(0,n.jsx)(e.a,{href:\"https://github.com/ramu-narasinga\",children:\"https://github.com/ramu-narasinga\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My website \\u2014 \",(0,n.jsx)(e.a,{href:\"https://ramunarasinga.com/\",children:\"https://ramunarasinga.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Youtube channel \\u2014 \",(0,n.jsx)(e.a,{href:\"https://www.youtube.com/@thinkthroo\",children:\"https://www.youtube.com/@thinkthroo\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Learning platform \\u2014 \",(0,n.jsx)(e.a,{href:\"https://thinkthroo.com/\",children:\"https://thinkthroo.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Codebase Architecture \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/architecture\",children:\"https://app.thinkthroo.com/architecture\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Best practices \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/best-practices\",children:\"https://app.thinkthroo.com/best-practices\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Production-grade projects \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/production-grade-projects\",children:\"https://app.thinkthroo.com/production-grade-projects\"})]}),`\n`,(0,n.jsx)(e.h3,{id:\"references\",children:\"References:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://www.npmjs.com/package/mri\",children:\"https://www.npmjs.com/package/mri\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/changesets/changesets/blob/main/packages/cli/src/index.ts#L1C18-L1C21\",children:\"https://github.com/changesets/changesets/blob/main/packages/cli/src/index.ts#L1C18-L1C21\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/changesets/changesets/blob/main/packages/cli/src/index.ts#L9\",children:\"https://github.com/changesets/changesets/blob/main/packages/cli/src/index.ts#L9\"})}),`\n`]}),`\n`]})]})}function p(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,{...a,children:(0,n.jsx)(d,{...a})}):d(a)}return k(y);})();\n;return Component;"
  },
  "_id": "blog/mri-scan-cli-flags.mdx",
  "_raw": {
    "sourceFilePath": "blog/mri-scan-cli-flags.mdx",
    "sourceFileName": "mri-scan-cli-flags.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/mri-scan-cli-flags"
  },
  "type": "Doc",
  "slug": "/blog/mri-scan-cli-flags",
  "slugAsParams": "mri-scan-cli-flags"
}
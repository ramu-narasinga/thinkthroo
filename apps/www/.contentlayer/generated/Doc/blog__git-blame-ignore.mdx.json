{
<<<<<<< HEAD
  "title": "git-blame-ignore-revs file in React vs Refine.\r",
=======
  "title": "git-blame-ignore-revs file in React vs Refine.",
>>>>>>> 442b740f3cf43317109944c6cf4b7ca543a8cddf
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
<<<<<<< HEAD
    "raw": "\r\nI wrote an [in-depth article](https://medium.com/@ramunarasinga/git-blame-ignore-revs-to-ignore-bulk-formatting-changes-f20ac23e6155) about `.git-blame-ignore-revs` file found in [React source code](https://github.com/facebook/react/blob/main/.git-blame-ignore-revs), but in this article, let’s draw a comparison between React and Refine codebase’s .git-blame-ignore-revs.\r\n\r\n> Before you continue reading this article, I recommend you first read my article, [`.git-blame-ignore-revs` to ignore bulk formatting changes](https://medium.com/@ramunarasinga/git-blame-ignore-revs-to-ignore-bulk-formatting-changes-f20ac23e6155), to understand what this file is about.\r\n\r\nLet me first provide the code inside the files — .git-blame-ignore-revs\r\n\r\n### .git-blame-ignore-revs in React codebase\r\n\r\n```plaintext\r\nc998bb1ed4b3285398c9c7797135d3f060243c6a\r\nfd2b3e13d330a4559f5aa21462e1cb2cbbcf144b\r\n```\r\n\r\nI copied this above code from the file shown in the below image.\r\n\r\n![](https://cdn-images-1.medium.com/max/1000/1*x_SSSQQBg1B7_n7h2JlGAg.png)\r\n\r\n### .git-blame-ignore-revs in Refine codebase\r\n\r\n```plaintext\r\n# Since version 2.23 (released in August 2019), git-blame has a feature\r\n# to ignore or bypass certain commits.\r\n#\r\n# This file contains a list of commits that are not likely what you\r\n# are looking for in a blame, such as mass reformatting or renaming.\r\n#\r\n# Run the following command to apply this file as the default ignore file.\r\n#\r\n# git config blame.ignoreRevsFile .git-blame-ignore-revs\r\n\r\n# chore: format all files (#5684)\r\n# https://github.com/refinedev/refine/pull/5684\r\n# This commit updates the linter and formatter configuration and applies to all relevant files.\r\n16eefc493da3e66a095a11d9dcbeff0ec64dca57\r\n```\r\n\r\nThis above code is picked from the .git-blame-ignore-revs file in Refine codebase as shown in the below image:\r\n\r\n![](https://cdn-images-1.medium.com/max/1000/1*--T5hZsMDzV42_1vF7ZNAA.png)\r\n\r\nSo let’s talk about differences, before you read further, try to come up with your own differences that you have identified.\r\n\r\n### The comment\r\n\r\nI like the fact that there is a comment in Refine’s .git-blame-ignore-revs explaining what this file is about and also points to the PR that has all those formatting changes that can be safely ignored when looking to blame who wrote a line.\r\n\r\nThe reason why you do this is, if you have changed formatting all across the codebase, the blame overrides the original author’s line with your formatting and there’s no way you could tell when you use ‘blame’ feature in Git.\r\n\r\n### Numbers of revs ignored\r\n\r\nThere’s two commit hashes in React codebase and there is only 1 commit hash in Refine codebase.\r\n\r\n### About me:\r\n\r\nHey, my name is [Ramu Narasinga](https://ramunarasinga.com). I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\r\n\r\n***I am open to work on interesting projects. Send me an email at ramu.narasinga@gmail.com***\r\n\r\nMy Github — [https://github.com/ramu-narasinga](https://github.com/ramu-narasinga)\r\n\r\nMy website — [https://ramunarasinga.com](https://ramunarasinga.com/)\r\n\r\nMy Youtube channel — [https://www.youtube.com/@thinkthroo](https://www.youtube.com/@ramu-narasinga)\r\n\r\nLearning platform — [https://thinkthroo.com](https://thinkthroo.com/)\r\n\r\nCodebase Architecture — [https://app.thinkthroo.com/architecture](https://app.thinkthroo.com/architecture)\r\n\r\nBest practices — [https://app.thinkthroo.com/best-practices](https://app.thinkthroo.com/best-practices)\r\n\r\nProduction-grade projects — [https://app.thinkthroo.com/production-grade-projects](https://app.thinkthroo.com/production-grade-projects)\r\n\r\n### References:\r\n\r\n1. [https://github.com/facebook/react/blob/main/.git-blame-ignore-revs](https://github.com/facebook/react/blob/main/.git-blame-ignore-revs)\r\n    \r\n2. [https://github.com/refinedev/refine/blob/main/.git-blame-ignore-revs](https://github.com/refinedev/refine/blob/main/.git-blame-ignore-revs)\r\n    \r\n3. [https://medium.com/@ramunarasinga/git-blame-ignore-revs-to-ignore-bulk-formatting-changes-f20ac23e6155](https://medium.com/@ramunarasinga/git-blame-ignore-revs-to-ignore-bulk-formatting-changes-f20ac23e6155)",
=======
    "raw": "\nI wrote an [in-depth article](https://medium.com/@ramunarasinga/git-blame-ignore-revs-to-ignore-bulk-formatting-changes-f20ac23e6155) about `.git-blame-ignore-revs` file found in [React source code](https://github.com/facebook/react/blob/main/.git-blame-ignore-revs), but in this article, let’s draw a comparison between React and Refine codebase’s .git-blame-ignore-revs.\n\n> Before you continue reading this article, I recommend you first read my article, [`.git-blame-ignore-revs` to ignore bulk formatting changes](https://medium.com/@ramunarasinga/git-blame-ignore-revs-to-ignore-bulk-formatting-changes-f20ac23e6155), to understand what this file is about.\n\nLet me first provide the code inside the files — .git-blame-ignore-revs\n\n### .git-blame-ignore-revs in React codebase\n\n```plaintext\nc998bb1ed4b3285398c9c7797135d3f060243c6a\nfd2b3e13d330a4559f5aa21462e1cb2cbbcf144b\n```\n\nI copied this above code from the file shown in the below image.\n\n![](https://cdn-images-1.medium.com/max/1000/1*x_SSSQQBg1B7_n7h2JlGAg.png)\n\n### .git-blame-ignore-revs in Refine codebase\n\n```plaintext\n# Since version 2.23 (released in August 2019), git-blame has a feature\n# to ignore or bypass certain commits.\n#\n# This file contains a list of commits that are not likely what you\n# are looking for in a blame, such as mass reformatting or renaming.\n#\n# Run the following command to apply this file as the default ignore file.\n#\n# git config blame.ignoreRevsFile .git-blame-ignore-revs\n\n# chore: format all files (#5684)\n# https://github.com/refinedev/refine/pull/5684\n# This commit updates the linter and formatter configuration and applies to all relevant files.\n16eefc493da3e66a095a11d9dcbeff0ec64dca57\n```\n\nThis above code is picked from the .git-blame-ignore-revs file in Refine codebase as shown in the below image:\n\n![](https://cdn-images-1.medium.com/max/1000/1*--T5hZsMDzV42_1vF7ZNAA.png)\n\nSo let’s talk about differences, before you read further, try to come up with your own differences that you have identified.\n\n### The comment\n\nI like the fact that there is a comment in Refine’s .git-blame-ignore-revs explaining what this file is about and also points to the PR that has all those formatting changes that can be safely ignored when looking to blame who wrote a line.\n\nThe reason why you do this is, if you have changed formatting all across the codebase, the blame overrides the original author’s line with your formatting and there’s no way you could tell when you use ‘blame’ feature in Git.\n\n### Numbers of revs ignored\n\nThere’s two commit hashes in React codebase and there is only 1 commit hash in Refine codebase.\n\n### About me:\n\nHey, my name is [Ramu Narasinga](https://ramunarasinga.com). I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\n\n***I am open to work on interesting projects. Send me an email at ramu.narasinga@gmail.com***\n\nMy Github — [https://github.com/ramu-narasinga](https://github.com/ramu-narasinga)\n\nMy website — [https://ramunarasinga.com](https://ramunarasinga.com/)\n\nMy Youtube channel — [https://www.youtube.com/@thinkthroo](https://www.youtube.com/@ramu-narasinga)\n\nLearning platform — [https://thinkthroo.com](https://thinkthroo.com/)\n\nCodebase Architecture — [https://app.thinkthroo.com/architecture](https://app.thinkthroo.com/architecture)\n\nBest practices — [https://app.thinkthroo.com/best-practices](https://app.thinkthroo.com/best-practices)\n\nProduction-grade projects — [https://app.thinkthroo.com/production-grade-projects](https://app.thinkthroo.com/production-grade-projects)\n\n### References:\n\n1. [https://github.com/facebook/react/blob/main/.git-blame-ignore-revs](https://github.com/facebook/react/blob/main/.git-blame-ignore-revs)\n    \n2. [https://github.com/refinedev/refine/blob/main/.git-blame-ignore-revs](https://github.com/refinedev/refine/blob/main/.git-blame-ignore-revs)\n    \n3. [https://medium.com/@ramunarasinga/git-blame-ignore-revs-to-ignore-bulk-formatting-changes-f20ac23e6155](https://medium.com/@ramunarasinga/git-blame-ignore-revs-to-ignore-bulk-formatting-changes-f20ac23e6155)",
>>>>>>> 442b740f3cf43317109944c6cf4b7ca543a8cddf
    "code": "var Component=(()=>{var m=Object.create;var r=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var b=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),v=(a,e)=>{for(var i in e)r(a,i,{get:e[i],enumerable:!0})},o=(a,e,i,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of g(e))!f.call(a,t)&&t!==i&&r(a,t,{get:()=>e[t],enumerable:!(c=p(e,t))||c.enumerable});return a};var y=(a,e,i)=>(i=a!=null?m(u(a)):{},o(e||!a||!a.__esModule?r(i,\"default\",{value:a,enumerable:!0}):i,a)),w=a=>o(r({},\"__esModule\",{value:!0}),a);var h=b((R,s)=>{s.exports=_jsx_runtime});var N={};v(N,{default:()=>d,frontmatter:()=>k});var n=y(h()),k={title:\"git-blame-ignore-revs file in React vs\\xA0Refine.\"};function l(a){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",div:\"div\",em:\"em\",h3:\"h3\",img:\"img\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",...a.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"I wrote an \",(0,n.jsx)(e.a,{href:\"https://medium.com/@ramunarasinga/git-blame-ignore-revs-to-ignore-bulk-formatting-changes-f20ac23e6155\",children:\"in-depth article\"}),\" about \",(0,n.jsx)(e.code,{children:\".git-blame-ignore-revs\"}),\" file found in \",(0,n.jsx)(e.a,{href:\"https://github.com/facebook/react/blob/main/.git-blame-ignore-revs\",children:\"React source code\"}),\", but in this article, let\\u2019s draw a comparison between React and Refine codebase\\u2019s\\xA0.git-blame-ignore-revs.\"]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Before you continue reading this article, I recommend you first read my article, \",(0,n.jsxs)(e.a,{href:\"https://medium.com/@ramunarasinga/git-blame-ignore-revs-to-ignore-bulk-formatting-changes-f20ac23e6155\",children:[(0,n.jsx)(e.code,{children:\".git-blame-ignore-revs\"}),\" to ignore bulk formatting changes\"]}),\", to understand what this file is about.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Let me first provide the code inside the files\\u200A\\u2014\\u200A.git-blame-ignore-revs\"}),`\n`,(0,n.jsx)(e.h3,{id:\"git-blame-ignore-revs-in-reactcodebase\",children:\".git-blame-ignore-revs in React\\xA0codebase\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"c998bb1ed4b3285398c9c7797135d3f060243c6a\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"fd2b3e13d330a4559f5aa21462e1cb2cbbcf144b\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"I copied this above code from the file shown in the below image.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://cdn-images-1.medium.com/max/1000/1*x_SSSQQBg1B7_n7h2JlGAg.png\",alt:\"\"})}),`\n`,(0,n.jsx)(e.h3,{id:\"git-blame-ignore-revs-in-refinecodebase\",children:\".git-blame-ignore-revs in Refine\\xA0codebase\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"# Since version 2.23 (released in August 2019), git-blame has a feature\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"# to ignore or bypass certain commits.\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"#\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"# This file contains a list of commits that are not likely what you\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"# are looking for in a blame, such as mass reformatting or renaming.\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"#\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"# Run the following command to apply this file as the default ignore file.\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"#\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"# git config blame.ignoreRevsFile .git-blame-ignore-revs\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"# chore: format all files (#5684)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"# https://github.com/refinedev/refine/pull/5684\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"# This commit updates the linter and formatter configuration and applies to all relevant files.\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"16eefc493da3e66a095a11d9dcbeff0ec64dca57\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"This above code is picked from the\\xA0.git-blame-ignore-revs file in Refine codebase as shown in the below image:\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://cdn-images-1.medium.com/max/1000/1*--T5hZsMDzV42_1vF7ZNAA.png\",alt:\"\"})}),`\n`,(0,n.jsx)(e.p,{children:\"So let\\u2019s talk about differences, before you read further, try to come up with your own differences that you have identified.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"the-comment\",children:\"The comment\"}),`\n`,(0,n.jsx)(e.p,{children:\"I like the fact that there is a comment in Refine\\u2019s\\xA0.git-blame-ignore-revs explaining what this file is about and also points to the PR that has all those formatting changes that can be safely ignored when looking to blame who wrote a line.\"}),`\n`,(0,n.jsx)(e.p,{children:\"The reason why you do this is, if you have changed formatting all across the codebase, the blame overrides the original author\\u2019s line with your formatting and there\\u2019s no way you could tell when you use \\u2018blame\\u2019 feature in Git.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"numbers-of-revsignored\",children:\"Numbers of revs\\xA0ignored\"}),`\n`,(0,n.jsx)(e.p,{children:\"There\\u2019s two commit hashes in React codebase and there is only 1 commit hash in Refine codebase.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"about-me\",children:\"About me:\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Hey, my name is \",(0,n.jsx)(e.a,{href:\"https://ramunarasinga.com\",children:\"Ramu Narasinga\"}),\". I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:(0,n.jsxs)(e.strong,{children:[\"I am open to work on interesting projects. Send me an email at \",(0,n.jsx)(e.a,{href:\"mailto:ramu.narasinga@gmail.com\",children:\"ramu.narasinga@gmail.com\"})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Github\\u200A\\u2014\\u200A\",(0,n.jsx)(e.a,{href:\"https://github.com/ramu-narasinga\",children:\"https://github.com/ramu-narasinga\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My website\\u200A\\u2014\\u200A\",(0,n.jsx)(e.a,{href:\"https://ramunarasinga.com/\",children:\"https://ramunarasinga.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Youtube channel\\u200A\\u2014\\u200A\",(0,n.jsx)(e.a,{href:\"https://www.youtube.com/@ramu-narasinga\",children:\"https://www.youtube.com/@thinkthroo\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Learning platform\\u200A\\u2014\\u200A\",(0,n.jsx)(e.a,{href:\"https://thinkthroo.com/\",children:\"https://thinkthroo.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Codebase Architecture\\u200A\\u2014\\u200A\",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/architecture\",children:\"https://app.thinkthroo.com/architecture\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Best practices\\u200A\\u2014\\u200A\",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/best-practices\",children:\"https://app.thinkthroo.com/best-practices\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Production-grade projects\\u200A\\u2014\\u200A\",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/production-grade-projects\",children:\"https://app.thinkthroo.com/production-grade-projects\"})]}),`\n`,(0,n.jsx)(e.h3,{id:\"references\",children:\"References:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/facebook/react/blob/main/.git-blame-ignore-revs\",children:\"https://github.com/facebook/react/blob/main/.git-blame-ignore-revs\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/refinedev/refine/blob/main/.git-blame-ignore-revs\",children:\"https://github.com/refinedev/refine/blob/main/.git-blame-ignore-revs\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://medium.com/@ramunarasinga/git-blame-ignore-revs-to-ignore-bulk-formatting-changes-f20ac23e6155\",children:\"https://medium.com/@ramunarasinga/git-blame-ignore-revs-to-ignore-bulk-formatting-changes-f20ac23e6155\"})}),`\n`]}),`\n`]})]})}function d(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,{...a,children:(0,n.jsx)(l,{...a})}):l(a)}return w(N);})();\n;return Component;"
  },
  "_id": "blog/git-blame-ignore.mdx",
  "_raw": {
    "sourceFilePath": "blog/git-blame-ignore.mdx",
    "sourceFileName": "git-blame-ignore.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/git-blame-ignore"
  },
  "type": "Doc",
  "slug": "/blog/git-blame-ignore",
  "slugAsParams": "git-blame-ignore"
}
{
  "title": "State management in Supabase\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\n[C: State management in /dashboard/projects]\r\n\r\nAt the time of writing this article, Supabase uses Pages router. We want to find out which page is responsible\r\nto load the /dashboard/projects page. Pages router uses file-based routing and the route in consideraion here\r\nends with /projects, so we want to find a file named projects.tsx in [Supabase studio](https://github.com/supabase/supabase/blob/master/apps/studio/pages/projects.tsx#L26) \r\n\r\nSupabase is open-source and uses a monorepo. [Studio](https://github.com/supabase/supabase/tree/master/apps/www) \r\nis the dashboard you would see when you visit https://supabase.com/dashboard/projects, but when you visit https://supabase.com/\r\n[www](https://github.com/supabase/supabase/tree/master/apps/www) is used. Here `studio`, `www` are workspaces.\r\n\r\n# projects.tsx\r\n\r\nYou will find that [projects.tsx](https://github.com/supabase/supabase/blob/master/apps/studio/pages/projects.tsx#L26)\r\nis in studio's [pages folder](https://github.com/supabase/supabase/tree/master/apps/studio/pages).\r\n\r\nYou have to ask the right questions here. What data do I see when I visit projects? There's projects and \r\norganizations data that are fetched via an API. \r\n\r\n[Insert a screenshot of /projects route]\r\n\r\nSo how's this fetched? At [line 23](https://github.com/supabase/supabase/blob/master/apps/studio/pages/projects.tsx#L23)\r\n, you will find this below code snippet:\r\n\r\n```\r\nconst { data: organizations, isError, isSuccess } = useOrganizationsQuery()\r\n```\r\n\r\nYou need to check out the Supabase's API layer to understand `useOrganizationQuery` shown above. In this guide, \r\nwe are intrested in state management. At this point, next question would be what sort of rendering mechanism is \r\napplied here? You want to read about [Rendering in Next.js Pages Router docs](https://nextjs.org/docs/pages/building-your-application/rendering)\r\n\r\nRendering strategy used in projects.tsx is client-side rendering because useOrganizationsQuery uses \r\n@tanstack/react-query found in [lib/fetch/organizations.ts](https://github.com/supabase/supabase/blob/master/apps/docs/lib/fetch/organizations.ts#L1)\r\nIt is mentioned in the [Client-side rendering documentation](https://nextjs.org/docs/pages/building-your-application/rendering/client-side-rendering)\r\nthat using a data fetching library like SWR or TanStack Query to fetch data on the client is recommended and this\r\nway you implement client side rendering.\r\n\r\n[Insert a screenshot of https://github.com/supabase/supabase/blob/master/apps/studio/pages/projects.tsx#L72-L77]\r\n\r\nThese organizations fetched are passed down as props to a component named `HomePageActions`. \r\n\r\n## HomePageActions\r\n\r\n[HomePageActions](https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/HomePageActions.tsx#L33) \r\nrenders `New Project` button, `New Organization` button, `Search` input and the `Filter` button.\r\n\r\nWhy would the organizations be passed down to these actions? clicking on a New Project shows you these list of\r\norganizations.\r\n\r\n[Insert screenshot of clicking new project to show list of organizations] \r\n\r\nOrganizations fetched are also used to show list of organizations in the Sidebar\r\n\r\n[Insert screenshot of supabase dashboard sidebar with list of organizations]\r\n\r\n## Organizations in Sidebar\r\n\r\nIt is a common standard to place the Sidebar in the Layout. [At Line 93](https://github.com/supabase/supabase/blob/master/apps/studio/pages/projects.tsx#L93)\r\nyou will find this below code snippet:\r\n\r\n```\r\nProjectsPage.getLayout = (page) => (\r\n  <AccountLayout\r\n    title=\"Dashboard\"\r\n    breadcrumbs={[\r\n      {\r\n        key: `supabase-projects`,\r\n        label: 'Projects',\r\n      },\r\n    ]}\r\n  >\r\n    {page}\r\n  </AccountLayout>\r\n)\r\n``` \r\n\r\nIn the AccountLayout, Organizations are fetched using the query, but this time the results are from the cache, \r\nthis is one of the advantages of using Tanstack query, you can also confirm this by inspecting the network call \r\nto fetch organizations, this gets called only once.\r\n\r\n[Insert screenshot of - https://github.com/supabase/supabase/blob/master/apps/studio/components/layouts/AccountLayout/AccountLayout.tsx#L27]\r\n\r\n[AccountLayout](https://github.com/supabase/supabase/blob/master/apps/studio/components/layouts/AccountLayout/AccountLayout.tsx#L25)\r\nrenders the sidebar and children as shown below:\r\n\r\n```\r\n<div className=\"h-screen min-h-[0px] basis-0 flex-1\">\r\n  <WithSidebar\r\n    hideSidebar={navLayoutV2}\r\n    title={title}\r\n    breadcrumbs={breadcrumbs}\r\n    sections={sectionsWithHeaders}\r\n  >\r\n    {children}\r\n  </WithSidebar>\r\n</div>\r\n```\r\n\r\n`sectionsWithHeaders` uses this organizations array to render list of organizations \r\n\r\n```\r\nconst organizationsLinks = (organizations ?? [])\r\n    .map((organization) => ({\r\n      isActive:\r\n        router.pathname.startsWith('/org/') && selectedOrganization?.slug === organization.slug,\r\n      label: organization.name,\r\n      href: `/org/${organization.slug}/general`,\r\n      key: organization.slug,\r\n      icon: <PartnerIcon organization={organization} />,\r\n    }))\r\n    .sort((a, b) => a.label.localeCompare(b.label))\r\n```",
    "code": "var Component=(()=>{var u=Object.create;var r=Object.defineProperty;var l=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var f=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),w=(n,e)=>{for(var s in e)r(n,s,{get:e[s],enumerable:!0})},i=(n,e,s,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of b(e))!m.call(n,a)&&a!==s&&r(n,a,{get:()=>e[a],enumerable:!(o=l(e,a))||o.enumerable});return n};var y=(n,e,s)=>(s=n!=null?u(g(n)):{},i(e||!n||!n.__esModule?r(s,\"default\",{value:n,enumerable:!0}):s,n)),j=n=>i(r({},\"__esModule\",{value:!0}),n);var h=f((A,c)=>{c.exports=_jsx_runtime});var x={};w(x,{default:()=>p,frontmatter:()=>z});var t=y(h()),z={title:\"State management in Supabase\"};function d(n){let e={a:\"a\",code:\"code\",h1:\"h1\",h2:\"h2\",p:\"p\",pre:\"pre\",...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:\"[C: State management in /dashboard/projects]\"}),`\n`,(0,t.jsxs)(e.p,{children:[`At the time of writing this article, Supabase uses Pages router. We want to find out which page is responsible\\r\nto load the /dashboard/projects page. Pages router uses file-based routing and the route in consideraion here\\r\nends with /projects, so we want to find a file named projects.tsx in `,(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/projects.tsx#L26\",children:\"Supabase studio\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Supabase is open-source and uses a monorepo. \",(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/master/apps/www\",children:\"Studio\"}),`\\r\nis the dashboard you would see when you visit `,(0,t.jsx)(e.a,{href:\"https://supabase.com/dashboard/projects\",children:\"https://supabase.com/dashboard/projects\"}),\", but when you visit \",(0,t.jsx)(e.a,{href:\"https://supabase.com/\",children:\"https://supabase.com/\"}),`\\r\n`,(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/master/apps/www\",children:\"www\"}),\" is used. Here \",(0,t.jsx)(e.code,{children:\"studio\"}),\", \",(0,t.jsx)(e.code,{children:\"www\"}),\" are workspaces.\"]}),`\n`,(0,t.jsx)(e.h1,{id:\"projectstsx\",children:\"projects.tsx\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"You will find that \",(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/projects.tsx#L26\",children:\"projects.tsx\"}),`\\r\nis in studio's `,(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/master/apps/studio/pages\",children:\"pages folder\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:`You have to ask the right questions here. What data do I see when I visit projects? There's projects and\\r\norganizations data that are fetched via an API.`}),`\n`,(0,t.jsx)(e.p,{children:\"[Insert a screenshot of /projects route]\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"So how's this fetched? At \",(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/projects.tsx#L23\",children:\"line 23\"}),`\\r\n, you will find this below code snippet:`]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`const { data: organizations, isError, isSuccess } = useOrganizationsQuery()\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"You need to check out the Supabase's API layer to understand \",(0,t.jsx)(e.code,{children:\"useOrganizationQuery\"}),` shown above. In this guide,\\r\nwe are intrested in state management. At this point, next question would be what sort of rendering mechanism is\\r\napplied here? You want to read about `,(0,t.jsx)(e.a,{href:\"https://nextjs.org/docs/pages/building-your-application/rendering\",children:\"Rendering in Next.js Pages Router docs\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[`Rendering strategy used in projects.tsx is client-side rendering because useOrganizationsQuery uses\\r\n@tanstack/react-query found in `,(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/docs/lib/fetch/organizations.ts#L1\",children:\"lib/fetch/organizations.ts\"}),`\\r\nIt is mentioned in the `,(0,t.jsx)(e.a,{href:\"https://nextjs.org/docs/pages/building-your-application/rendering/client-side-rendering\",children:\"Client-side rendering documentation\"}),`\\r\nthat using a data fetching library like SWR or TanStack Query to fetch data on the client is recommended and this\\r\nway you implement client side rendering.`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"[Insert a screenshot of \",(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/projects.tsx#L72-L77\",children:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/projects.tsx#L72-L77\"}),\"]\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"These organizations fetched are passed down as props to a component named \",(0,t.jsx)(e.code,{children:\"HomePageActions\"}),\".\"]}),`\n`,(0,t.jsx)(e.h2,{id:\"homepageactions\",children:\"HomePageActions\"}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/HomePageActions.tsx#L33\",children:\"HomePageActions\"}),`\\r\nrenders `,(0,t.jsx)(e.code,{children:\"New Project\"}),\" button, \",(0,t.jsx)(e.code,{children:\"New Organization\"}),\" button, \",(0,t.jsx)(e.code,{children:\"Search\"}),\" input and the \",(0,t.jsx)(e.code,{children:\"Filter\"}),\" button.\"]}),`\n`,(0,t.jsx)(e.p,{children:`Why would the organizations be passed down to these actions? clicking on a New Project shows you these list of\\r\norganizations.`}),`\n`,(0,t.jsx)(e.p,{children:\"[Insert screenshot of clicking new project to show list of organizations]\"}),`\n`,(0,t.jsx)(e.p,{children:\"Organizations fetched are also used to show list of organizations in the Sidebar\"}),`\n`,(0,t.jsx)(e.p,{children:\"[Insert screenshot of supabase dashboard sidebar with list of organizations]\"}),`\n`,(0,t.jsx)(e.h2,{id:\"organizations-in-sidebar\",children:\"Organizations in Sidebar\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"It is a common standard to place the Sidebar in the Layout. \",(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/projects.tsx#L93\",children:\"At Line 93\"}),`\\r\nyou will find this below code snippet:`]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`ProjectsPage.getLayout = (page) => (\\r\n  <AccountLayout\\r\n    title=\"Dashboard\"\\r\n    breadcrumbs={[\\r\n      {\\r\n        key: \\`supabase-projects\\`,\\r\n        label: 'Projects',\\r\n      },\\r\n    ]}\\r\n  >\\r\n    {page}\\r\n  </AccountLayout>\\r\n)\n`})}),`\n`,(0,t.jsx)(e.p,{children:`In the AccountLayout, Organizations are fetched using the query, but this time the results are from the cache,\\r\nthis is one of the advantages of using Tanstack query, you can also confirm this by inspecting the network call\\r\nto fetch organizations, this gets called only once.`}),`\n`,(0,t.jsxs)(e.p,{children:[\"[Insert screenshot of - \",(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/layouts/AccountLayout/AccountLayout.tsx#L27\",children:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/layouts/AccountLayout/AccountLayout.tsx#L27\"}),\"]\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/layouts/AccountLayout/AccountLayout.tsx#L25\",children:\"AccountLayout\"}),`\\r\nrenders the sidebar and children as shown below:`]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`<div className=\"h-screen min-h-[0px] basis-0 flex-1\">\\r\n  <WithSidebar\\r\n    hideSidebar={navLayoutV2}\\r\n    title={title}\\r\n    breadcrumbs={breadcrumbs}\\r\n    sections={sectionsWithHeaders}\\r\n  >\\r\n    {children}\\r\n  </WithSidebar>\\r\n</div>\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"sectionsWithHeaders\"}),\" uses this organizations array to render list of organizations\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`const organizationsLinks = (organizations ?? [])\\r\n    .map((organization) => ({\\r\n      isActive:\\r\n        router.pathname.startsWith('/org/') && selectedOrganization?.slug === organization.slug,\\r\n      label: organization.name,\\r\n      href: \\`/org/\\${organization.slug}/general\\`,\\r\n      key: organization.slug,\\r\n      icon: <PartnerIcon organization={organization} />,\\r\n    }))\\r\n    .sort((a, b) => a.label.localeCompare(b.label))\n`})})]})}function p(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}return j(x);})();\n;return Component;"
  },
  "_id": "guide/codebase-architecture/supabase/state-management/dashboard-projects.mdx",
  "_raw": {
    "sourceFilePath": "guide/codebase-architecture/supabase/state-management/dashboard-projects.mdx",
    "sourceFileName": "dashboard-projects.mdx",
    "sourceFileDir": "guide/codebase-architecture/supabase/state-management",
    "contentType": "mdx",
    "flattenedPath": "guide/codebase-architecture/supabase/state-management/dashboard-projects"
  },
  "type": "Doc",
  "slug": "/guide/codebase-architecture/supabase/state-management/dashboard-projects",
  "slugAsParams": "codebase-architecture/supabase/state-management/dashboard-projects"
}
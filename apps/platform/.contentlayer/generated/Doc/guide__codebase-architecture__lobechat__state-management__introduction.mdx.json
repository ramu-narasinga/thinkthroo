{
  "title": "State management in Lobechat\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\n# State management in Lobechat\r\n\r\nState management is intertwined with the way you manage API layer. \r\nIn this guide, we will analyze how the state is managed in Lobechat.\r\n\r\nWe have to take a closer look at operations such as:\r\n1. Add a new assistant\r\n2. Fetching the list of assistant\r\n3. Adding a message to a chat\r\n4. Loading a chat\r\n\r\nThese operations are specific to Lobechat, these operations vary based on an application. \r\nIn cal.com, to understand how how state is managed, you would look at operations such as bookings list, \r\nevent-types etc., \r\n\r\n## Adding a new assistant:\r\n\r\nSearch for \"New Assistant\" button in the source code, catch here is that Lobechat \r\nhas internationalization  which means we need to find the key for \"New Assistant\", it is \"newAgent\". \r\n\r\nSearch again across the codebase for \"newAgent\" and you will find it in this\r\n[file](https://github.com/lobehub/lobe-chat/blob/7d1e5c46aecc582308483d329b6007a8f8c76b70/src/app/(main)/chat/%40session/_layout/Desktop/SessionHeader.tsx#L36)\r\n\r\nHow is newAgent variable used?\r\n```\r\n<ActionIcon\r\n  icon={MessageSquarePlus}\r\n  loading={isValidating}\r\n  onClick={() => mutate()}\r\n  size={DESKTOP_HEADER_ICON_SIZE}\r\n  style={{ flex: 'none' }}\r\n  title={t('newAgent')}\r\n/>\r\n```\r\nIn the above code, newAgent is used as title which is a prop in ActionIcon. This is it, this is our \r\nentry point that leads us to the state management. onClick calls a function named `mutate`.\r\n\r\n```\r\nconst { mutate, isValidating } = useActionSWR('session.createSession', () => createSession());\r\n```\r\nOur focus is only on state management, checkout API Layer in LobeChat to learn more about useActionSWR,\r\nmutate.\r\n\r\nWhere is `createSession` coming from?\r\n\r\n```\r\nconst [createSession] = useSessionStore((s) => [s.createSession]);\r\n```\r\n\r\nThis path is now leading us to discover where `useSessionStore` is imported from.\r\n\r\n```\r\nimport { useSessionStore } from '@/store/session';\r\n```\r\nuseSessionStore is imported from [store/session.ts](https://github.com/lobehub/lobe-chat/tree/7d1e5c46aecc582308483d329b6007a8f8c76b70/src/store/session)\r\n\r\n[C:Session store]\r\n[L: file structure]\r\nFor us to understand the Session store in its entirety, let's start with the file structure. \r\n\r\nYou will find what each file is used for.\r\n\r\nThe following file structure is from Lobechat's [store/session](https://github.com/lobehub/lobe-chat/tree/main/src/store/session) \r\n\r\n```sh\r\n+-- store/session                    # Main session store\r\n|   +-- slices                       # Contains slices for session management\r\n|   |   +-- session                  # Handles individual session logic\r\n|   |   |   +-- selectors            # Selectors for session data\r\n|   |   |   |   +-- index.ts         # Exports session selectors\r\n|   |   |   |   +-- list.test.ts     # Tests for session list selector\r\n|   |   |   |   +-- list.ts          # Session list selector\r\n|   |   |   |   +-- meta.test.ts     # Tests for session meta selector\r\n|   |   |   |   +-- meta.ts          # Session meta selector\r\n|   |   |   +-- action.test.ts       # Tests for session actions\r\n|   |   |   +-- action.ts            # Session actions\r\n|   |   |   +-- helpers.ts           # Helper functions for session\r\n|   |   |   +-- initialState.ts      # Initial state for session\r\n|   |   |   +-- reducers.test.ts     # Tests for session reducers\r\n|   |   |   +-- reducers.ts          # Reducers for session\r\n|   +-- sessionGroup                 # Manages session groups\r\n|   |   +-- action.test.ts           # Tests for session group actions\r\n|   |   +-- action.ts                # Session group actions\r\n|   |   +-- initialState.ts          # Initial state for session group\r\n|   |   +-- reducer.test.ts          # Tests for session group reducer\r\n|   |   +-- reducer.ts               # Reducer for session group\r\n|   |   +-- selectors.ts             # Selectors for session group\r\n|   +-- store.ts                     # Main store configuration for sessions\r\n+-- helpers.ts                       # Helper functions for the session store\r\n+-- index.ts                         # Entry point for the session store\r\n+-- initialState.ts                  # Initial state for the session store\r\n+-- selectors.ts                     # Selectors for the session store\r\n\r\n``` \r\n\r\nThis is for session store, Lobechat has a lot of other folder inside store\r\n\r\n[insert screenshot of lobechat store folder].\r\n\r\n# Standard file structure\r\nIt looks it follows consistent file structure across these store folders. a store folder will have the \r\nbelow file structure:\r\n\r\n## Store folder - Root level \r\n+-- slices\r\n+-- helpers.ts\r\n+-- index.ts\r\n+-- initialState.ts\r\n+-- selectors.ts or selectors being a folder\r\n+-- reducers \r\n\r\n## slicers folder structure\r\n+-- {slice-name} folder             # Here slice-name can be a store slice, for example, user store has auth, settings etc., \r\n\r\nEach slice folder then follow the same file structure convention found at the root level, except there is one\r\nadditional files called reducers.ts and action.ts\r\n\r\n[L: store/session explained]\r\nIn this guide, we analyze the files in [store/session](https://github.com/lobehub/lobe-chat/tree/main/src/store/session)\r\nto understand how it all comes together and being used in a page/UI. Let's begin.\r\n\r\n## index.ts\r\n\r\n```\r\nexport type { SessionStore } from './store';\r\nexport { useSessionStore } from './store';\r\n```\r\n`index.ts` simply exports type and a hook named `useSessionStore`. This practice allows you to import \r\n`useSessionStore` by writing - `@/store/session` instead of `@/store/session/store` as `useSessionStore`\r\nis in `store` file.\r\n\r\n## store.ts\r\n\r\n[store.ts](https://github.com/lobehub/lobe-chat/blob/main/src/store/session/store.ts) has some advanced \r\nZustand API. This store.ts is a perfect demonstration of quality.\r\n\r\nLet's first analyze how the store is created.\r\n\r\n```\r\nconst createStore: StateCreator<SessionStore, [['zustand/devtools', never]]> = (...parameters) => ({\r\n  ...initialState,\r\n  ...createSessionSlice(...parameters),\r\n  ...createSessionGroupSlice(...parameters),\r\n});\r\n\r\n//  ===============  implement useStore ============ //\r\nconst devtools = createDevtools('session');\r\n\r\nexport const useSessionStore = createWithEqualityFn<SessionStore>()(\r\n  subscribeWithSelector(\r\n    devtools(createStore, {\r\n      name: 'LobeChat_Session' + (isDev ? '_DEV' : ''),\r\n    }),\r\n  ),\r\n  shallow,\r\n);\r\n```\r\nYou might be familiar with simple use case of Zustand but this example from Lobechat's session store shows\r\nyou how you can leverage advanced API such as devTools, createWithEqualityFn, subscribeWithSelector.\r\n\r\nWe start off with the below code snippet:\r\n\r\n```\r\nconst createStore: StateCreator<SessionStore, [['zustand/devtools', never]]> = (...parameters) => ({\r\n  ...initialState,\r\n  ...createSessionSlice(...parameters),\r\n  ...createSessionGroupSlice(...parameters),\r\n});\r\n```\r\n\r\nStateCreator is a type imported from `zustand/vanilla`. Lobechat uses slices pattern. In fact, what you see\r\nin the above code snippet - `StateCreator<SessionStore, [['zustand/devtools', never]]>` is mentioned in\r\n[Zustand documentation](https://zustand.docs.pmnd.rs/guides/typescript#slices-pattern). Check this [full list \r\nof Middlewares and their mutators reference](https://zustand.docs.pmnd.rs/guides/typescript#middlewares-and-their-mutators-reference).\r\nIt is also worth reading [Zustand's TypeScript guide](https://zustand.docs.pmnd.rs/guides/typescript).\r\n\r\nThis createStore has initialState, createSessionSlice and createSessionGroupSlice. initialState is imported from a \r\nfile named [initialState.ts](https://github.com/lobehub/lobe-chat/blob/main/src/store/session/initialState.ts). \r\ncreateSessionSlice is imported from [session/action.ts](https://github.com/lobehub/lobe-chat/blob/main/src/store/session/slices/session/action.ts).\r\ncreateSessionGroupSlice is imported from [sessionGroup/action.ts](https://github.com/lobehub/lobe-chat/blob/main/src/store/session/slices/sessionGroup/action.ts)\r\n\r\nLet's now examine the devtools middleware\r\n\r\n```\r\nconst devtools = createDevtools('session');\r\n```\r\n[devtools](https://zustand.docs.pmnd.rs/middlewares/devtools#devtools) middleware lets you use Redux DevTools Extension \r\nwithout Redux. Read more about the benefits of using [Redux DevTools for debugging](https://redux.js.org/style-guide/#use-the-redux-devtools-extension-for-debugging).\r\n\r\nIn the code snippet below, you will find how the devTools and createStore are used to create `useSessionStore`.\r\n\r\n```\r\nexport const useSessionStore = createWithEqualityFn<SessionStore>()(\r\n  subscribeWithSelector(\r\n    devtools(createStore, {\r\n      name: 'LobeChat_Session' + (isDev ? '_DEV' : ''),\r\n    }),\r\n  ),\r\n  shallow,\r\n);\r\n```\r\n\r\nYou will find that `createWithEqualityFn` is called with `subscribeWithSelector`. `subscribeWithSelector` has `devTools` as its\r\nonly param. devtools is a middleware with its first parameter being createStore function.\r\n\r\n[createWithEqualityFn](https://zustand.docs.pmnd.rs/apis/create-with-equality-fn) createWithEqualityFn lets you create a React \r\nHook with API utilities attached, just like create. However, it offers a way to define a custom equality check. \r\nThis allows for more granular control over when components re-render, improving performance and responsiveness.\r\n\r\n[subscribeWithSelector](https://zustand.docs.pmnd.rs/middlewares/subscribe-with-selector)\r\n\r\n[L: Sessions slice]\r\n\r\nIn this guide, we discuss Sessions slice in Zustand. You would need to understand slice in Zustand before \r\nwe study state management in Lobechat.\r\n\r\nLet's review a simple slice example from Zustand.\r\n\r\n```\r\n// In a file named store/fishSlice.ts\r\nexport const createFishSlice = (set) => ({\r\n  fishes: 0,\r\n  addFish: () => set((state) => ({ fishes: state.fishes + 1 })),\r\n})\r\n\r\n// In a file named store/bearSlice.ts\r\nexport const createBearSlice = (set) => ({\r\n  bears: 0,\r\n  addBear: () => set((state) => ({ bears: state.bears + 1 })),\r\n  eatFish: () => set((state) => ({ fishes: state.fishes - 1 })),\r\n})\r\n\r\n// In a file named store/index.ts\r\nimport { create } from 'zustand'\r\nimport { createBearSlice } from './bearSlice'\r\nimport { createFishSlice } from './fishSlice'\r\n\r\nexport const useBoundStore = create((...a) => ({\r\n  ...createBearSlice(...a),\r\n  ...createFishSlice(...a),\r\n}))\r\n\r\n```\r\n\r\nWith the above configuration, let's look at how to access the store in a React component.\r\n\r\n```\r\nimport { useBoundStore } from './stores/useBoundStore'\r\n\r\nfunction App() {\r\n  const bears = useBoundStore((state) => state.bears)\r\n  const fishes = useBoundStore((state) => state.fishes)\r\n  const addBear = useBoundStore((state) => state.addBear)\r\n  return (\r\n    <div>\r\n      <h2>Number of bears: {bears}</h2>\r\n      <h2>Number of fishes: {fishes}</h2>\r\n      <button onClick={() => addBear()}>Add a bear</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n```\r\n\r\nThere isn't much changed in the API, you would access the store as if it were without slices.\r\n\r\nRead more about [slices pattern in Zustand](https://zustand.docs.pmnd.rs/guides/slices-pattern).\r\n\r\nNow that we understand the basics of slices in Zustand, let's review the  Session Slice.\r\n\r\nSince in this chapter, we are focusing on the state management in \"Adding a new assistant\". As explained in \r\n[introduction](link to introduction), let's find out where createSession is defined in the session slice folder\r\n\r\n```\r\nconst [createSession] = useSessionStore((s) => [s.createSession]);\r\n```\r\n\r\ncreateSession is defined in [action.ts](https://github.com/lobehub/lobe-chat/blob/main/src/store/session/slices/session/action.ts#L103).\r\n\r\n```\r\ncreateSession: async (agent, isSwitchSession = true) => {\r\n  const { switchSession, refreshSessions } = get();\r\n\r\n  // merge the defaultAgent in settings\r\n  const defaultAgent = merge(\r\n    DEFAULT_AGENT_LOBE_SESSION,\r\n    settingsSelectors.defaultAgent(useUserStore.getState()),\r\n  );\r\n\r\n  const newSession: LobeAgentSession = merge(defaultAgent, agent);\r\n\r\n  const id = await sessionService.createSession(LobeSessionType.Agent, newSession);\r\n  await refreshSessions();\r\n\r\n  // Whether to goto  to the new session after creation, the default is to switch to\r\n  if (isSwitchSession) switchSession(id);\r\n\r\n  return id;\r\n},\r\n```\r\n\r\nNotice how there is a service function used to create session. So you fire state action and this action calls a service function.\r\n\r\nReferences:\r\n1. https://github.com/lobehub/lobe-chat/blob/7d1e5c46aecc582308483d329b6007a8f8c76b70/src/app/(main)/chat/%40session/_layout/Desktop/SessionHeader.tsx#L36\r\n2. https://chat-preview.lobehub.com/chat?session=inbox\r\n3. https://github.com/lobehub/lobe-chat/tree/7d1e5c46aecc582308483d329b6007a8f8c76b70/src/store/session",
    "code": "var Component=(()=>{var F=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var m=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),b=(n,e)=>{for(var t in e)o(n,t,{get:e[t],enumerable:!0})},i=(n,e,t,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of u(e))!f.call(n,r)&&r!==t&&o(n,r,{get:()=>e[r],enumerable:!(l=p(e,r))||l.enumerable});return n};var S=(n,e,t)=>(t=n!=null?F(y(n)):{},i(e||!n||!n.__esModule?o(t,\"default\",{value:n,enumerable:!0}):t,n)),g=n=>i(o({},\"__esModule\",{value:!0}),n);var a=m((W,c)=>{c.exports=_jsx_runtime});var v={};b(v,{default:()=>h,frontmatter:()=>w});var s=S(a()),w={title:\"State management in Lobechat\"};function d(n){let e={a:\"a\",code:\"code\",div:\"div\",h1:\"h1\",h2:\"h2\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:\"state-management-in-lobechat\",children:\"State management in Lobechat\"}),`\n`,(0,s.jsx)(e.p,{children:`State management is intertwined with the way you manage API layer.\\r\nIn this guide, we will analyze how the state is managed in Lobechat.`}),`\n`,(0,s.jsx)(e.p,{children:\"We have to take a closer look at operations such as:\"}),`\n`,(0,s.jsxs)(e.ol,{children:[`\n`,(0,s.jsx)(e.li,{children:\"Add a new assistant\"}),`\n`,(0,s.jsx)(e.li,{children:\"Fetching the list of assistant\"}),`\n`,(0,s.jsx)(e.li,{children:\"Adding a message to a chat\"}),`\n`,(0,s.jsx)(e.li,{children:\"Loading a chat\"}),`\n`]}),`\n`,(0,s.jsx)(e.p,{children:`These operations are specific to Lobechat, these operations vary based on an application.\\r\nIn cal.com, to understand how how state is managed, you would look at operations such as bookings list,\\r\nevent-types etc.,`}),`\n`,(0,s.jsx)(e.h2,{id:\"adding-a-new-assistant\",children:\"Adding a new assistant:\"}),`\n`,(0,s.jsx)(e.p,{children:`Search for \"New Assistant\" button in the source code, catch here is that Lobechat\\r\nhas internationalization  which means we need to find the key for \"New Assistant\", it is \"newAgent\".`}),`\n`,(0,s.jsxs)(e.p,{children:[`Search again across the codebase for \"newAgent\" and you will find it in this\\r\n`,(0,s.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/7d1e5c46aecc582308483d329b6007a8f8c76b70/src/app/(main)/chat/%40session/_layout/Desktop/SessionHeader.tsx#L36\",children:\"file\"})]}),`\n`,(0,s.jsx)(e.p,{children:\"How is newAgent variable used?\"}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:`<ActionIcon\\r\n  icon={MessageSquarePlus}\\r\n  loading={isValidating}\\r\n  onClick={() => mutate()}\\r\n  size={DESKTOP_HEADER_ICON_SIZE}\\r\n  style={{ flex: 'none' }}\\r\n  title={t('newAgent')}\\r\n/>\n`})}),`\n`,(0,s.jsxs)(e.p,{children:[`In the above code, newAgent is used as title which is a prop in ActionIcon. This is it, this is our\\r\nentry point that leads us to the state management. onClick calls a function named `,(0,s.jsx)(e.code,{children:\"mutate\"}),\".\"]}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:`const { mutate, isValidating } = useActionSWR('session.createSession', () => createSession());\n`})}),`\n`,(0,s.jsx)(e.p,{children:`Our focus is only on state management, checkout API Layer in LobeChat to learn more about useActionSWR,\\r\nmutate.`}),`\n`,(0,s.jsxs)(e.p,{children:[\"Where is \",(0,s.jsx)(e.code,{children:\"createSession\"}),\" coming from?\"]}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:`const [createSession] = useSessionStore((s) => [s.createSession]);\n`})}),`\n`,(0,s.jsxs)(e.p,{children:[\"This path is now leading us to discover where \",(0,s.jsx)(e.code,{children:\"useSessionStore\"}),\" is imported from.\"]}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:`import { useSessionStore } from '@/store/session';\n`})}),`\n`,(0,s.jsxs)(e.p,{children:[\"useSessionStore is imported from \",(0,s.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/tree/7d1e5c46aecc582308483d329b6007a8f8c76b70/src/store/session\",children:\"store/session.ts\"})]}),`\n`,(0,s.jsx)(e.p,{children:`[C:Session store]\\r\n[L: file structure]\\r\nFor us to understand the Session store in its entirety, let's start with the file structure.`}),`\n`,(0,s.jsx)(e.p,{children:\"You will find what each file is used for.\"}),`\n`,(0,s.jsxs)(e.p,{children:[\"The following file structure is from Lobechat's \",(0,s.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/tree/main/src/store/session\",children:\"store/session\"})]}),`\n`,(0,s.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,s.jsx)(e.pre,{\"data-language\":\"sh\",\"data-theme\":\"default\",children:(0,s.jsxs)(e.code,{\"data-language\":\"sh\",\"data-theme\":\"default\",children:[(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"+--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" store/session\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                    #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Main session store\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" slices\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                       #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Contains slices for session management\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" session\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                  #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Handles individual session logic\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" selectors\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"            #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Selectors for session data\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" index.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"         #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Exports session selectors\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" list.test.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"     #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Tests for session list selector\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" list.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"          #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Session list selector\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" meta.test.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"     #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Tests for session meta selector\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" meta.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"          #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Session meta selector\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" action.test.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"       #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Tests for session actions\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" action.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"            #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Session actions\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" helpers.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"           #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Helper functions for session\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" initialState.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"      #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Initial state for session\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" reducers.test.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"     #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Tests for session reducers\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" reducers.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"          #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Reducers for session\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" sessionGroup\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                 #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Manages session groups\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" action.test.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"           #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Tests for session group actions\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" action.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Session group actions\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" initialState.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"          #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Initial state for session group\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" reducer.test.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"          #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Tests for session group reducer\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" reducer.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"               #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Reducer for session group\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" selectors.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"             #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Selectors for session group\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" store.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                     #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Main store configuration for sessions\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"+--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" helpers.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                       #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Helper functions for the session store\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"+--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" index.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                         #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Entry point for the session store\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"+--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" initialState.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                  #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Initial state for the session store\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"+--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" selectors.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                     #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Selectors for the session store\"})]}),`\n`,(0,s.jsx)(e.span,{className:\"line\",children:\" \"})]})})}),`\n`,(0,s.jsx)(e.p,{children:\"This is for session store, Lobechat has a lot of other folder inside store\"}),`\n`,(0,s.jsx)(e.p,{children:\"[insert screenshot of lobechat store folder].\"}),`\n`,(0,s.jsx)(e.h1,{id:\"standard-file-structure\",children:\"Standard file structure\"}),`\n`,(0,s.jsx)(e.p,{children:`It looks it follows consistent file structure across these store folders. a store folder will have the\\r\nbelow file structure:`}),`\n`,(0,s.jsx)(e.h2,{id:\"store-folder---root-level\",children:\"Store folder - Root level\"}),`\n`,(0,s.jsx)(e.p,{children:`+-- slices\\r\n+-- helpers.ts\\r\n+-- index.ts\\r\n+-- initialState.ts\\r\n+-- selectors.ts or selectors being a folder\\r\n+-- reducers`}),`\n`,(0,s.jsx)(e.h2,{id:\"slicers-folder-structure\",children:\"slicers folder structure\"}),`\n`,(0,s.jsxs)(e.p,{children:[\"+-- \",slice-name,\" folder             # Here slice-name can be a store slice, for example, user store has auth, settings etc.,\"]}),`\n`,(0,s.jsx)(e.p,{children:`Each slice folder then follow the same file structure convention found at the root level, except there is one\\r\nadditional files called reducers.ts and action.ts`}),`\n`,(0,s.jsxs)(e.p,{children:[`[L: store/session explained]\\r\nIn this guide, we analyze the files in `,(0,s.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/tree/main/src/store/session\",children:\"store/session\"}),`\\r\nto understand how it all comes together and being used in a page/UI. Let's begin.`]}),`\n`,(0,s.jsx)(e.h2,{id:\"indexts\",children:\"index.ts\"}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:`export type { SessionStore } from './store';\\r\nexport { useSessionStore } from './store';\n`})}),`\n`,(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:\"index.ts\"}),\" simply exports type and a hook named \",(0,s.jsx)(e.code,{children:\"useSessionStore\"}),`. This practice allows you to import\\r\n`,(0,s.jsx)(e.code,{children:\"useSessionStore\"}),\" by writing - \",(0,s.jsx)(e.code,{children:\"@/store/session\"}),\" instead of \",(0,s.jsx)(e.code,{children:\"@/store/session/store\"}),\" as \",(0,s.jsx)(e.code,{children:\"useSessionStore\"}),`\\r\nis in `,(0,s.jsx)(e.code,{children:\"store\"}),\" file.\"]}),`\n`,(0,s.jsx)(e.h2,{id:\"storets\",children:\"store.ts\"}),`\n`,(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/store/session/store.ts\",children:\"store.ts\"}),` has some advanced\\r\nZustand API. This store.ts is a perfect demonstration of quality.`]}),`\n`,(0,s.jsx)(e.p,{children:\"Let's first analyze how the store is created.\"}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:`const createStore: StateCreator<SessionStore, [['zustand/devtools', never]]> = (...parameters) => ({\\r\n  ...initialState,\\r\n  ...createSessionSlice(...parameters),\\r\n  ...createSessionGroupSlice(...parameters),\\r\n});\\r\n\\r\n//  ===============  implement useStore ============ //\\r\nconst devtools = createDevtools('session');\\r\n\\r\nexport const useSessionStore = createWithEqualityFn<SessionStore>()(\\r\n  subscribeWithSelector(\\r\n    devtools(createStore, {\\r\n      name: 'LobeChat_Session' + (isDev ? '_DEV' : ''),\\r\n    }),\\r\n  ),\\r\n  shallow,\\r\n);\n`})}),`\n`,(0,s.jsx)(e.p,{children:`You might be familiar with simple use case of Zustand but this example from Lobechat's session store shows\\r\nyou how you can leverage advanced API such as devTools, createWithEqualityFn, subscribeWithSelector.`}),`\n`,(0,s.jsx)(e.p,{children:\"We start off with the below code snippet:\"}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:`const createStore: StateCreator<SessionStore, [['zustand/devtools', never]]> = (...parameters) => ({\\r\n  ...initialState,\\r\n  ...createSessionSlice(...parameters),\\r\n  ...createSessionGroupSlice(...parameters),\\r\n});\n`})}),`\n`,(0,s.jsxs)(e.p,{children:[\"StateCreator is a type imported from \",(0,s.jsx)(e.code,{children:\"zustand/vanilla\"}),`. Lobechat uses slices pattern. In fact, what you see\\r\nin the above code snippet - `,(0,s.jsx)(e.code,{children:\"StateCreator<SessionStore, [['zustand/devtools', never]]>\"}),` is mentioned in\\r\n`,(0,s.jsx)(e.a,{href:\"https://zustand.docs.pmnd.rs/guides/typescript#slices-pattern\",children:\"Zustand documentation\"}),\". Check this \",(0,s.jsx)(e.a,{href:\"https://zustand.docs.pmnd.rs/guides/typescript#middlewares-and-their-mutators-reference\",children:`full list\\r\nof Middlewares and their mutators reference`}),`.\\r\nIt is also worth reading `,(0,s.jsx)(e.a,{href:\"https://zustand.docs.pmnd.rs/guides/typescript\",children:\"Zustand's TypeScript guide\"}),\".\"]}),`\n`,(0,s.jsxs)(e.p,{children:[`This createStore has initialState, createSessionSlice and createSessionGroupSlice. initialState is imported from a\\r\nfile named `,(0,s.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/store/session/initialState.ts\",children:\"initialState.ts\"}),`.\\r\ncreateSessionSlice is imported from `,(0,s.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/store/session/slices/session/action.ts\",children:\"session/action.ts\"}),`.\\r\ncreateSessionGroupSlice is imported from `,(0,s.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/store/session/slices/sessionGroup/action.ts\",children:\"sessionGroup/action.ts\"})]}),`\n`,(0,s.jsx)(e.p,{children:\"Let's now examine the devtools middleware\"}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:`const devtools = createDevtools('session');\n`})}),`\n`,(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:\"https://zustand.docs.pmnd.rs/middlewares/devtools#devtools\",children:\"devtools\"}),` middleware lets you use Redux DevTools Extension\\r\nwithout Redux. Read more about the benefits of using `,(0,s.jsx)(e.a,{href:\"https://redux.js.org/style-guide/#use-the-redux-devtools-extension-for-debugging\",children:\"Redux DevTools for debugging\"}),\".\"]}),`\n`,(0,s.jsxs)(e.p,{children:[\"In the code snippet below, you will find how the devTools and createStore are used to create \",(0,s.jsx)(e.code,{children:\"useSessionStore\"}),\".\"]}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:`export const useSessionStore = createWithEqualityFn<SessionStore>()(\\r\n  subscribeWithSelector(\\r\n    devtools(createStore, {\\r\n      name: 'LobeChat_Session' + (isDev ? '_DEV' : ''),\\r\n    }),\\r\n  ),\\r\n  shallow,\\r\n);\n`})}),`\n`,(0,s.jsxs)(e.p,{children:[\"You will find that \",(0,s.jsx)(e.code,{children:\"createWithEqualityFn\"}),\" is called with \",(0,s.jsx)(e.code,{children:\"subscribeWithSelector\"}),\". \",(0,s.jsx)(e.code,{children:\"subscribeWithSelector\"}),\" has \",(0,s.jsx)(e.code,{children:\"devTools\"}),` as its\\r\nonly param. devtools is a middleware with its first parameter being createStore function.`]}),`\n`,(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:\"https://zustand.docs.pmnd.rs/apis/create-with-equality-fn\",children:\"createWithEqualityFn\"}),` createWithEqualityFn lets you create a React\\r\nHook with API utilities attached, just like create. However, it offers a way to define a custom equality check.\\r\nThis allows for more granular control over when components re-render, improving performance and responsiveness.`]}),`\n`,(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:\"https://zustand.docs.pmnd.rs/middlewares/subscribe-with-selector\",children:\"subscribeWithSelector\"})}),`\n`,(0,s.jsx)(e.p,{children:\"[L: Sessions slice]\"}),`\n`,(0,s.jsx)(e.p,{children:`In this guide, we discuss Sessions slice in Zustand. You would need to understand slice in Zustand before\\r\nwe study state management in Lobechat.`}),`\n`,(0,s.jsx)(e.p,{children:\"Let's review a simple slice example from Zustand.\"}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:`// In a file named store/fishSlice.ts\\r\nexport const createFishSlice = (set) => ({\\r\n  fishes: 0,\\r\n  addFish: () => set((state) => ({ fishes: state.fishes + 1 })),\\r\n})\\r\n\\r\n// In a file named store/bearSlice.ts\\r\nexport const createBearSlice = (set) => ({\\r\n  bears: 0,\\r\n  addBear: () => set((state) => ({ bears: state.bears + 1 })),\\r\n  eatFish: () => set((state) => ({ fishes: state.fishes - 1 })),\\r\n})\\r\n\\r\n// In a file named store/index.ts\\r\nimport { create } from 'zustand'\\r\nimport { createBearSlice } from './bearSlice'\\r\nimport { createFishSlice } from './fishSlice'\\r\n\\r\nexport const useBoundStore = create((...a) => ({\\r\n  ...createBearSlice(...a),\\r\n  ...createFishSlice(...a),\\r\n}))\\r\n\n`})}),`\n`,(0,s.jsx)(e.p,{children:\"With the above configuration, let's look at how to access the store in a React component.\"}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:`import { useBoundStore } from './stores/useBoundStore'\\r\n\\r\nfunction App() {\\r\n  const bears = useBoundStore((state) => state.bears)\\r\n  const fishes = useBoundStore((state) => state.fishes)\\r\n  const addBear = useBoundStore((state) => state.addBear)\\r\n  return (\\r\n    <div>\\r\n      <h2>Number of bears: {bears}</h2>\\r\n      <h2>Number of fishes: {fishes}</h2>\\r\n      <button onClick={() => addBear()}>Add a bear</button>\\r\n    </div>\\r\n  )\\r\n}\\r\n\\r\nexport default App\n`})}),`\n`,(0,s.jsx)(e.p,{children:\"There isn't much changed in the API, you would access the store as if it were without slices.\"}),`\n`,(0,s.jsxs)(e.p,{children:[\"Read more about \",(0,s.jsx)(e.a,{href:\"https://zustand.docs.pmnd.rs/guides/slices-pattern\",children:\"slices pattern in Zustand\"}),\".\"]}),`\n`,(0,s.jsx)(e.p,{children:\"Now that we understand the basics of slices in Zustand, let's review the  Session Slice.\"}),`\n`,(0,s.jsx)(e.p,{children:`Since in this chapter, we are focusing on the state management in \"Adding a new assistant\". As explained in\\r\n[introduction](link to introduction), let's find out where createSession is defined in the session slice folder`}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:`const [createSession] = useSessionStore((s) => [s.createSession]);\n`})}),`\n`,(0,s.jsxs)(e.p,{children:[\"createSession is defined in \",(0,s.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/store/session/slices/session/action.ts#L103\",children:\"action.ts\"}),\".\"]}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:`createSession: async (agent, isSwitchSession = true) => {\\r\n  const { switchSession, refreshSessions } = get();\\r\n\\r\n  // merge the defaultAgent in settings\\r\n  const defaultAgent = merge(\\r\n    DEFAULT_AGENT_LOBE_SESSION,\\r\n    settingsSelectors.defaultAgent(useUserStore.getState()),\\r\n  );\\r\n\\r\n  const newSession: LobeAgentSession = merge(defaultAgent, agent);\\r\n\\r\n  const id = await sessionService.createSession(LobeSessionType.Agent, newSession);\\r\n  await refreshSessions();\\r\n\\r\n  // Whether to goto  to the new session after creation, the default is to switch to\\r\n  if (isSwitchSession) switchSession(id);\\r\n\\r\n  return id;\\r\n},\n`})}),`\n`,(0,s.jsx)(e.p,{children:\"Notice how there is a service function used to create session. So you fire state action and this action calls a service function.\"}),`\n`,(0,s.jsx)(e.p,{children:\"References:\"}),`\n`,(0,s.jsxs)(e.ol,{children:[`\n`,(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/7d1e5c46aecc582308483d329b6007a8f8c76b70/src/app/(main)/chat/%40session/_layout/Desktop/SessionHeader.tsx#L36\",children:\"https://github.com/lobehub/lobe-chat/blob/7d1e5c46aecc582308483d329b6007a8f8c76b70/src/app/(main)/chat/%40session/_layout/Desktop/SessionHeader.tsx#L36\"})}),`\n`,(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:\"https://chat-preview.lobehub.com/chat?session=inbox\",children:\"https://chat-preview.lobehub.com/chat?session=inbox\"})}),`\n`,(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/tree/7d1e5c46aecc582308483d329b6007a8f8c76b70/src/store/session\",children:\"https://github.com/lobehub/lobe-chat/tree/7d1e5c46aecc582308483d329b6007a8f8c76b70/src/store/session\"})}),`\n`]})]})}function h(n={}){let{wrapper:e}=n.components||{};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}return g(v);})();\n;return Component;"
  },
  "_id": "guide/codebase-architecture/lobechat/state-management/introduction.mdx",
  "_raw": {
    "sourceFilePath": "guide/codebase-architecture/lobechat/state-management/introduction.mdx",
    "sourceFileName": "introduction.mdx",
    "sourceFileDir": "guide/codebase-architecture/lobechat/state-management",
    "contentType": "mdx",
    "flattenedPath": "guide/codebase-architecture/lobechat/state-management/introduction"
  },
  "type": "Doc",
  "slug": "/guide/codebase-architecture/lobechat/state-management/introduction",
  "slugAsParams": "codebase-architecture/lobechat/state-management/introduction"
}
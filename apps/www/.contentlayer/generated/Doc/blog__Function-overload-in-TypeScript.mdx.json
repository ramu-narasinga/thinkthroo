{
  "title": "Function overload in TypeScript\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\nWhen working with TypeScript, you may encounter situations where a function needs to handle different types of input while maintaining type safety. This is where function overloading comes into play. Let’s look at a practical example of function overloading, inspired by a code snippet from the [Supabase source code](https://github.com/supabase/supabase/blob/master/apps/studio/hooks/misc/useIsFeatureEnabled.ts#L24).\r\n\r\n![](https://miro.medium.com/v2/resize:fit:875/1*834BLGxRg7Gwwb4YYAiPrQ.png)\r\n\r\n# **Example: useIsFeatureEnabled**\r\n\r\nThe [`useIsFeatureEnabled`](https://github.com/supabase/supabase/blob/master/apps/studio/hooks/misc/useIsFeatureEnabled.ts#L24) function is a great example of function overloading. It can handle both an array of features and a single feature, returning appropriate results for each case.\r\n\r\nHere’s the overloaded function definition:\r\n\r\n```plaintext\r\nfunction useIsFeatureEnabled<T extends Feature[]>(\r\n  features: T\r\n): { [key in FeatureToCamelCase<T[number]>]: boolean }\r\nfunction useIsFeatureEnabled(features: Feature): boolean\r\nfunction useIsFeatureEnabled<T extends Feature | Feature[]>(features: T) {\r\n  const { profile } = useProfile()\r\n\r\n  if (Array.isArray(features)) {\r\n      return Object.fromEntries(\r\n        features.map((feature) => [\r\n          featureToCamelCase(feature),\r\n          checkFeature(feature, profile?.disabled_features),\r\n        ])\r\n      )\r\n  }\r\n  return checkFeature(features, profile?.disabled_features)\r\n}\r\nexport { useIsFeatureEnabled }\r\n```\r\n\r\n# **How It Works**\r\n\r\n1. **Function Overloads**: The first two declarations are overload signatures. They define the different ways the function can be called. The actual implementation comes last, handling both cases.\r\n    \r\n2. **Implementation**: The function implementation checks if the input `features` is an array. If it is, it processes each feature, converts it to camelCase, and checks if it's enabled. If `features` is a single feature, it directly checks its status.\r\n    \r\n\r\n# **Supporting Functions and Types**\r\n\r\nTo understand this better, let’s look at the supporting `checkFeature` function and the type utility `FeatureToCamelCase`.\r\n\r\n## **checkFeature Function**\r\n\r\nThe `checkFeature` function determines if a given feature is enabled or not:\r\n\r\n```plaintext\r\nfunction checkFeature(feature: Feature, features?: Feature[]) {\r\n  return !features?.includes(feature) ?? true\r\n}\r\n```\r\n\r\nThis function returns `true` if the feature is not in the disabled features list or if no disabled features are provided.\r\n\r\n> *Do watch the* [*Matt Pocock’s Youtube video explanation*](https://www.youtube.com/watch?v=Vr1BUFw6dJM) *about the function overloads in TypeScript.*\r\n\r\n# **Conclusion**\r\n\r\nFunction overloading in TypeScript allows you to define multiple ways to call a function with different types of input while ensuring type safety. The `useIsFeatureEnabled` function from Supabase is an excellent example of this concept in action. It demonstrates how to handle different input types seamlessly, providing both flexibility and strong typing.\r\n\r\n![](https://miro.medium.com/v2/resize:fit:875/1*47EKz3q3aUidRrzxVGAjLg.png)\r\n\r\n> [*Get free courses inspired by the best practices used in open source.*](https://app.thinkthroo.com/best-practices)\r\n\r\n# About me:\r\n\r\nHey, my name is [Ramu Narasinga](https://ramunarasinga.com). I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\r\n\r\n***I am open to work on interesting projects. Send me an email at ramu.narasinga@gmail.com***\r\n\r\nMy Github —  [https://github.com/ramu-narasinga](https://github.com/ramu-narasinga)\r\n\r\nMy website —  [https://ramunarasinga.com](https://ramunarasinga.com/)\r\n\r\nMy Youtube channel —  [https://www.youtube.com/@thinkthroo](https://www.youtube.com/@thinkthroo)\r\n\r\nLearning platform —  [https://thinkthroo.com](https://thinkthroo.com/)\r\n\r\nCodebase Architecture —  [https://app.thinkthroo.com/architecture](https://app.thinkthroo.com/architecture)\r\n\r\nBest practices —  [https://app.thinkthroo.com/best-practices](https://app.thinkthroo.com/best-practices)\r\n\r\nProduction-grade projects —  [https://app.thinkthroo.com/production-grade-projects](https://app.thinkthroo.com/production-grade-projects)\r\n\r\n# **References:**\r\n\r\n1. [https://github.com/supabase/supabase/blob/master/apps/studio/hooks/misc/useIsFeatureEnabled.ts#L24](https://github.com/supabase/supabase/blob/master/apps/studio/hooks/misc/useIsFeatureEnabled.ts#L24)\r\n    \r\n2. [Matt Pocock’s Youtube video explanation.](https://www.youtube.com/watch?v=Vr1BUFw6dJM)",
    "code": "var Component=(()=>{var p=Object.create;var i=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=>{for(var a in e)i(t,a,{get:e[a],enumerable:!0})},c=(t,e,a,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!b.call(t,r)&&r!==a&&i(t,r,{get:()=>e[r],enumerable:!(s=u(e,r))||s.enumerable});return t};var k=(t,e,a)=>(a=t!=null?p(f(t)):{},c(e||!t||!t.__esModule?i(a,\"default\",{value:t,enumerable:!0}):a,t)),w=t=>c(i({},\"__esModule\",{value:!0}),t);var o=g((T,l)=>{l.exports=_jsx_runtime});var x={};y(x,{default:()=>d,frontmatter:()=>F});var n=k(o()),F={title:\"Function overload in TypeScript\"};function h(t){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",div:\"div\",em:\"em\",h1:\"h1\",h2:\"h2\",img:\"img\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"When working with TypeScript, you may encounter situations where a function needs to handle different types of input while maintaining type safety. This is where function overloading comes into play. Let\\u2019s look at a practical example of function overloading, inspired by a code snippet from the \",(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/hooks/misc/useIsFeatureEnabled.ts#L24\",children:\"Supabase source code\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:875/1*834BLGxRg7Gwwb4YYAiPrQ.png\",alt:\"\"})}),`\n`,(0,n.jsx)(e.h1,{id:\"example-useisfeatureenabled\",children:(0,n.jsx)(e.strong,{children:\"Example: useIsFeatureEnabled\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/hooks/misc/useIsFeatureEnabled.ts#L24\",children:(0,n.jsx)(e.code,{children:\"useIsFeatureEnabled\"})}),\" function is a great example of function overloading. It can handle both an array of features and a single feature, returning appropriate results for each case.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Here\\u2019s the overloaded function definition:\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"function useIsFeatureEnabled<T extends Feature[]>(\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  features: T\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"): { [key in FeatureToCamelCase<T[number]>]: boolean }\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"function useIsFeatureEnabled(features: Feature): boolean\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"function useIsFeatureEnabled<T extends Feature | Feature[]>(features: T) {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const { profile } = useProfile()\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  if (Array.isArray(features)) {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      return Object.fromEntries(\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        features.map((feature) => [\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"          featureToCamelCase(feature),\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"          checkFeature(feature, profile?.disabled_features),\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        ])\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      )\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  }\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  return checkFeature(features, profile?.disabled_features)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"export { useIsFeatureEnabled }\"})})]})})}),`\n`,(0,n.jsx)(e.h1,{id:\"how-it-works\",children:(0,n.jsx)(e.strong,{children:\"How It Works\"})}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Function Overloads\"}),\": The first two declarations are overload signatures. They define the different ways the function can be called. The actual implementation comes last, handling both cases.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Implementation\"}),\": The function implementation checks if the input \",(0,n.jsx)(e.code,{children:\"features\"}),\" is an array. If it is, it processes each feature, converts it to camelCase, and checks if it's enabled. If \",(0,n.jsx)(e.code,{children:\"features\"}),\" is a single feature, it directly checks its status.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h1,{id:\"supporting-functions-and-types\",children:(0,n.jsx)(e.strong,{children:\"Supporting Functions and Types\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"To understand this better, let\\u2019s look at the supporting \",(0,n.jsx)(e.code,{children:\"checkFeature\"}),\" function and the type utility \",(0,n.jsx)(e.code,{children:\"FeatureToCamelCase\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"checkfeature-function\",children:(0,n.jsx)(e.strong,{children:\"checkFeature Function\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"checkFeature\"}),\" function determines if a given feature is enabled or not:\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"function checkFeature(feature: Feature, features?: Feature[]) {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  return !features?.includes(feature) ?? true\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This function returns \",(0,n.jsx)(e.code,{children:\"true\"}),\" if the feature is not in the disabled features list or if no disabled features are provided.\"]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:\"Do watch the\"}),\" \",(0,n.jsx)(e.a,{href:\"https://www.youtube.com/watch?v=Vr1BUFw6dJM\",children:(0,n.jsx)(e.em,{children:\"Matt Pocock\\u2019s Youtube video explanation\"})}),\" \",(0,n.jsx)(e.em,{children:\"about the function overloads in TypeScript.\"})]}),`\n`]}),`\n`,(0,n.jsx)(e.h1,{id:\"conclusion\",children:(0,n.jsx)(e.strong,{children:\"Conclusion\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Function overloading in TypeScript allows you to define multiple ways to call a function with different types of input while ensuring type safety. The \",(0,n.jsx)(e.code,{children:\"useIsFeatureEnabled\"}),\" function from Supabase is an excellent example of this concept in action. It demonstrates how to handle different input types seamlessly, providing both flexibility and strong typing.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:875/1*47EKz3q3aUidRrzxVGAjLg.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/best-practices\",children:(0,n.jsx)(e.em,{children:\"Get free courses inspired by the best practices used in open source.\"})})}),`\n`]}),`\n`,(0,n.jsx)(e.h1,{id:\"about-me\",children:\"About me:\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Hey, my name is \",(0,n.jsx)(e.a,{href:\"https://ramunarasinga.com\",children:\"Ramu Narasinga\"}),\". I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:(0,n.jsxs)(e.strong,{children:[\"I am open to work on interesting projects. Send me an email at \",(0,n.jsx)(e.a,{href:\"mailto:ramu.narasinga@gmail.com\",children:\"ramu.narasinga@gmail.com\"})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Github\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://github.com/ramu-narasinga\",children:\"https://github.com/ramu-narasinga\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My website\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://ramunarasinga.com/\",children:\"https://ramunarasinga.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Youtube channel\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://www.youtube.com/@thinkthroo\",children:\"https://www.youtube.com/@thinkthroo\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Learning platform\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://thinkthroo.com/\",children:\"https://thinkthroo.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Codebase Architecture\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/architecture\",children:\"https://app.thinkthroo.com/architecture\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Best practices\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/best-practices\",children:\"https://app.thinkthroo.com/best-practices\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Production-grade projects\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/production-grade-projects\",children:\"https://app.thinkthroo.com/production-grade-projects\"})]}),`\n`,(0,n.jsx)(e.h1,{id:\"references\",children:(0,n.jsx)(e.strong,{children:\"References:\"})}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/hooks/misc/useIsFeatureEnabled.ts#L24\",children:\"https://github.com/supabase/supabase/blob/master/apps/studio/hooks/misc/useIsFeatureEnabled.ts#L24\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://www.youtube.com/watch?v=Vr1BUFw6dJM\",children:\"Matt Pocock\\u2019s Youtube video explanation.\"})}),`\n`]}),`\n`]})]})}function d(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(h,{...t})}):h(t)}return w(x);})();\n;return Component;"
  },
  "_id": "blog/Function-overload-in-TypeScript.mdx",
  "_raw": {
    "sourceFilePath": "blog/Function-overload-in-TypeScript.mdx",
    "sourceFileName": "Function-overload-in-TypeScript.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/Function-overload-in-TypeScript"
  },
  "type": "Doc",
  "slug": "/blog/Function-overload-in-TypeScript",
  "slugAsParams": "Function-overload-in-TypeScript"
}
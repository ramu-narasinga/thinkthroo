{
  "title": "useLayoutEffect in Zustand test-case explained.\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\nReact’s `useLayoutEffect` is one of the lesser-used but crucial hooks that offers precise control over side effects that need to be executed before the browser paints the UI. In this article, we'll break down how `useLayoutEffect` works and demonstrate its usage with a [test case from Zustand's source code](https://github.com/pmndrs/zustand/blob/v4.5.5/tests/basic.test.tsx#L598). The [test case](https://github.com/pmndrs/zustand/blob/v4.5.5/tests/basic.test.tsx#L598) provides a perfect example of how `useLayoutEffect` can help manage state and updates effectively when timing is critical.\r\n\r\nThis test case validates a bug fix related to an [issue reported](https://github.com/pmndrs/zustand/issues/84) where the subscribed listener gets overwritten. Please note this issue was reported on Zustand’s version — 2.2.1. Link to codesandbox: [https://codesandbox.io/s/quirky-taussig-ng90m](https://codesandbox.io/s/quirky-taussig-ng90m)\r\n\r\n![](https://miro.medium.com/v2/resize:fit:875/1*49_ts2DhjaXfW0wgY3UVwQ.png)\r\n\r\nThe latest stable Zustand’s version is 4.5.5 but it’s good to learn what this test case is about, especially when it uses `useLayoutEffect`\r\n\r\n# **What is** `useLayoutEffect`?\r\n\r\n[`useLayoutEffect`](https://react.dev/reference/react/useLayoutEffect) is similar to `useEffect`, but it fires synchronously **after** all DOM mutations and **before** the browser repaints the screen. It ensures that updates inside this hook are reflected on the page immediately, without the user experiencing any visual inconsistency.\r\n\r\nIn contrast, `useEffect` runs after the browser repaints the screen, meaning the user might see the DOM in an interim state before the effect takes place.\r\n\r\nYou can read more about [useLayoutEffect in React docs](https://react.dev/reference/react/useLayoutEffect).\r\n\r\n# **When Should You Use** `useLayoutEffect`?\r\n\r\nYou should use `useLayoutEffect` in situations where you need to ensure that the DOM has been updated before the browser paints the UI. Typical use cases include:\r\n\r\n* Measuring the DOM layout (e.g., for animations or measurements).\r\n    \r\n* Synchronizing state or making changes that must be reflected in the DOM immediately.\r\n    \r\n* Updating state that depends on DOM changes, such as adjusting styles or positions based on layout changes.\r\n    \r\n\r\nFor less critical side effects, such as data fetching or logging, `useEffect` is generally preferred because it's non-blocking and doesn’t delay browser painting.\r\n\r\n# **Zustand Test Case**\r\n\r\nHere’s a test case from Zustand’s source code that demonstrates `useLayoutEffect` in action:\r\n\r\n```plaintext\r\n// https://github.com/pmndrs/zustand/issues/84\r\nit('ensures the correct subscriber is removed on unmount', async () => {\r\n  const useBoundStore = create(() => ({ count: 0 }))\r\n  const api = useBoundStore\r\n\r\n  function increment() {\r\n    api.setState(({ count }) => ({ count: count + 1 }))\r\n  }\r\n\r\n  function Count() {\r\n    const c = useBoundStore((s) => s.count)\r\n    return <div>count: {c}</div>\r\n  }\r\n\r\n  function CountWithInitialIncrement() {\r\n    useLayoutEffect(increment, [])\r\n    return <Count />\r\n  }\r\n\r\n  function Component() {\r\n    const [Counter, setCounter] = useState(() => CountWithInitialIncrement)\r\n    useLayoutEffect(() => {\r\n      setCounter(() => Count)\r\n    }, [])\r\n    return (\r\n      <>\r\n        <Counter />\r\n        <Count />\r\n      </>\r\n    )\r\n  }\r\n\r\n  const { findAllByText } = render(\r\n    <>\r\n      <Component />\r\n    </>,\r\n  )\r\n\r\n  expect((await findAllByText('count: 1')).length).toBe(2)\r\n\r\n  act(increment)\r\n\r\n  expect((await findAllByText('count: 2')).length).toBe(2)\r\n})\r\n```\r\n\r\n# **Breaking Down the Code**\r\n\r\nThis test validates that Zustand correctly removes subscribers when components unmount and re-renders state changes appropriately. The core element we will focus on is how `useLayoutEffect` plays a critical role in controlling when state changes occur relative to the component lifecycle.\r\n\r\n![](https://miro.medium.com/v2/resize:fit:875/1*_gTq0wSQLjktw-hmi31LCg.png)\r\n\r\n## **1\\. Creating the Store and Increment Function**\r\n\r\nThe store is initialized with an object containing a single state property `count` set to `0`.\r\n\r\n```plaintext\r\nconst useBoundStore = create(() => ({ count: 0 }))\r\nconst api = useBoundStore\r\n```\r\n\r\nThe `increment` function updates the `count` in the store:\r\n\r\n```plaintext\r\nfunction increment() {\r\n    api.setState(({ count }) => ({ count: count + 1 }))\r\n}\r\n```\r\n\r\n## **2\\. The** `Count` Component\r\n\r\nThe `Count` component subscribes to the store and renders the current `count`:\r\n\r\n```plaintext\r\nfunction Count() {\r\n    const c = useBoundStore((s) => s.count)\r\n    return <div>count: {c}</div>\r\n}\r\n```\r\n\r\nThis component simply pulls the `count` from Zustand’s store and displays it in the DOM.\r\n\r\n## **3\\.** `CountWithInitialIncrement` and `useLayoutEffect`\r\n\r\nThis is where `useLayoutEffect` comes into play. In the `CountWithInitialIncrement` component, we use `useLayoutEffect` to trigger the `increment` function immediately after the component mounts but before the browser paints:\r\n\r\n```plaintext\r\nfunction CountWithInitialIncrement() {\r\n    useLayoutEffect(increment, [])\r\n    return <Count />\r\n}\r\n```\r\n\r\nThis ensures that the `count` is incremented before the component's UI is rendered. If we used `useEffect` here, the UI would first render `count: 0`, then update to `count: 1` after the effect runs. However, with `useLayoutEffect`, the UI skips the initial `count: 0` and directly renders `count: 1`.\r\n\r\n## **4\\. Switching Components Dynamically**\r\n\r\nThe `Component` component demonstrates a more advanced scenario where `useLayoutEffect` is used to switch between two different components on mount:\r\n\r\n```plaintext\r\nfunction Component() {\r\n    const [Counter, setCounter] = useState(() => CountWithInitialIncrement)\r\n    useLayoutEffect(() => {\r\n      setCounter(() => Count)\r\n    }, [])\r\n    return (\r\n      <>\r\n        <Counter />\r\n        <Count />\r\n      </>\r\n    )\r\n}\r\n```\r\n\r\n* Initially, `Counter` is set to `CountWithInitialIncrement`, which triggers the `increment` function when it mounts.\r\n    \r\n* Then, `useLayoutEffect` runs synchronously after the DOM is updated, changing `Counter` to the `Count` component. This switch ensures that after the layout is painted, the next time the component renders, it doesn’t include the initial increment logic.\r\n    \r\n\r\nBy the time `Counter` switches to `Count`, the `count` is already incremented, and the correct values are displayed.\r\n\r\n## **5\\. The Test Expectations**\r\n\r\nFinally, the test verifies the following:\r\n\r\n1. Initially, both the `Counter` and `Count` components display `count: 1`.\r\n    \r\n2. After triggering another `increment`, both components should update to `count: 2`.\r\n    \r\n\r\n```plaintext\r\nexpect((await findAllByText('count: 1')).length).toBe(2)\r\n\r\nact(increment)\r\n\r\nexpect((await findAllByText('count: 2')).length).toBe(2)\r\n```\r\n\r\nThe test passes because `useLayoutEffect` ensures the state update happens before the browser renders the UI, avoiding any intermediate render where `count` would still be `0`.\r\n\r\n# **Why Use** `useLayoutEffect` Here?\r\n\r\nthis test case closely resembles the issue repro provided in the [codesandbox](https://codesandbox.io/s/quirky-taussig-ng90m).\r\n\r\n![](https://miro.medium.com/v2/resize:fit:875/1*q0ujhhQN31RdQEm0x-G9Ng.png)\r\n\r\nThe aim of this test case is to validate that subscribers do not get overwritten when the components unmount. Since useLayoutEffect renders the state before the browser repaints the UI, this is to ensure the listeners all work as expected. The issue states that one of listeners simply does not get updated, which is weird.\r\n\r\n# **Conclusion**\r\n\r\nReact’s `useLayoutEffect` provides control over state updates and DOM changes that need to happen before the user sees the page. In the Zustand test case we reviewed, `useLayoutEffect` ensures that the `increment` function is executed synchronously after the DOM updates, making sure that state changes are reflected immediately.\r\n\r\n> `useLayoutEffect` can hurt performance. Prefer [`useEffect`](https://react.dev/reference/react/useEffect) when possible. — [React Docs](https://react.dev/reference/react/useLayoutEffect)\r\n\r\n# **About me:**\r\n\r\nHey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\r\n\r\nI am open to work on interesting projects. Send me an email at ramu.narasinga@gmail.com\r\n\r\nMy Github — [https://github.com/ramu-narasinga](https://github.com/ramu-narasinga)\r\n\r\nMy website — [https://ramunarasinga.com](https://ramunarasinga.com/)\r\n\r\nMy Youtube channel — [https://www.youtube.com/@thinkthroo](https://www.youtube.com/@thinkthroo)\r\n\r\nLearning platform — [https://thinkthroo.com](https://thinkthroo.com/)\r\n\r\nCodebase Architecture — [https://app.thinkthroo.com/architecture](https://app.thinkthroo.com/architecture)\r\n\r\nBest practices — [https://app.thinkthroo.com/best-practices](https://app.thinkthroo.com/best-practices)\r\n\r\nProduction-grade projects — [https://app.thinkthroo.com/production-grade-projects](https://app.thinkthroo.com/production-grade-projects)\r\n\r\n# **References:**\r\n\r\n1. [https://github.com/pmndrs/zustand/blob/v4.5.5/tests/basic.test.tsx#L598](https://github.com/pmndrs/zustand/blob/v4.5.5/tests/basic.test.tsx#L598)\r\n    \r\n2. [https://react.dev/reference/react/useLayoutEffect](https://react.dev/reference/react/useLayoutEffect)\r\n    \r\n3. [https://github.com/pmndrs/zustand/issues/84](https://github.com/pmndrs/zustand/issues/84)\r\n    \r\n4. [https://codesandbox.io/s/quirky-taussig-ng90m](https://codesandbox.io/s/quirky-taussig-ng90m)\r\n    \r\n\r\n[  \r\n](https://medium.com/tag/javascript?source=post_page-----548f1323f825--------------------------------)\r\n",
    "code": "var Component=(()=>{var p=Object.create;var c=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var s in e)c(t,s,{get:e[s],enumerable:!0})},r=(t,e,s,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of m(e))!g.call(t,a)&&a!==s&&c(t,a,{get:()=>e[a],enumerable:!(i=u(e,a))||i.enumerable});return t};var w=(t,e,s)=>(s=t!=null?p(f(t)):{},r(e||!t||!t.__esModule?c(s,\"default\",{value:t,enumerable:!0}):s,t)),N=t=>r(c({},\"__esModule\",{value:!0}),t);var d=y((L,l)=>{l.exports=_jsx_runtime});var v={};b(v,{default:()=>o,frontmatter:()=>x});var n=w(d()),x={title:\"useLayoutEffect in Zustand test-case explained.\"};function h(t){let e={a:\"a\",blockquote:\"blockquote\",br:\"br\",code:\"code\",div:\"div\",h1:\"h1\",h2:\"h2\",img:\"img\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"React\\u2019s \",(0,n.jsx)(e.code,{children:\"useLayoutEffect\"}),\" is one of the lesser-used but crucial hooks that offers precise control over side effects that need to be executed before the browser paints the UI. In this article, we'll break down how \",(0,n.jsx)(e.code,{children:\"useLayoutEffect\"}),\" works and demonstrate its usage with a \",(0,n.jsx)(e.a,{href:\"https://github.com/pmndrs/zustand/blob/v4.5.5/tests/basic.test.tsx#L598\",children:\"test case from Zustand's source code\"}),\". The \",(0,n.jsx)(e.a,{href:\"https://github.com/pmndrs/zustand/blob/v4.5.5/tests/basic.test.tsx#L598\",children:\"test case\"}),\" provides a perfect example of how \",(0,n.jsx)(e.code,{children:\"useLayoutEffect\"}),\" can help manage state and updates effectively when timing is critical.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"This test case validates a bug fix related to an \",(0,n.jsx)(e.a,{href:\"https://github.com/pmndrs/zustand/issues/84\",children:\"issue reported\"}),\" where the subscribed listener gets overwritten. Please note this issue was reported on Zustand\\u2019s version \\u2014 2.2.1. Link to codesandbox: \",(0,n.jsx)(e.a,{href:\"https://codesandbox.io/s/quirky-taussig-ng90m\",children:\"https://codesandbox.io/s/quirky-taussig-ng90m\"})]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:875/1*49_ts2DhjaXfW0wgY3UVwQ.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The latest stable Zustand\\u2019s version is 4.5.5 but it\\u2019s good to learn what this test case is about, especially when it uses \",(0,n.jsx)(e.code,{children:\"useLayoutEffect\"})]}),`\n`,(0,n.jsxs)(e.h1,{id:\"what-is-uselayouteffect\",children:[(0,n.jsx)(e.strong,{children:\"What is\"}),\" \",(0,n.jsx)(e.code,{children:\"useLayoutEffect\"}),\"?\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://react.dev/reference/react/useLayoutEffect\",children:(0,n.jsx)(e.code,{children:\"useLayoutEffect\"})}),\" is similar to \",(0,n.jsx)(e.code,{children:\"useEffect\"}),\", but it fires synchronously \",(0,n.jsx)(e.strong,{children:\"after\"}),\" all DOM mutations and \",(0,n.jsx)(e.strong,{children:\"before\"}),\" the browser repaints the screen. It ensures that updates inside this hook are reflected on the page immediately, without the user experiencing any visual inconsistency.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In contrast, \",(0,n.jsx)(e.code,{children:\"useEffect\"}),\" runs after the browser repaints the screen, meaning the user might see the DOM in an interim state before the effect takes place.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can read more about \",(0,n.jsx)(e.a,{href:\"https://react.dev/reference/react/useLayoutEffect\",children:\"useLayoutEffect in React docs\"}),\".\"]}),`\n`,(0,n.jsxs)(e.h1,{id:\"when-should-you-use-uselayouteffect\",children:[(0,n.jsx)(e.strong,{children:\"When Should You Use\"}),\" \",(0,n.jsx)(e.code,{children:\"useLayoutEffect\"}),\"?\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"You should use \",(0,n.jsx)(e.code,{children:\"useLayoutEffect\"}),\" in situations where you need to ensure that the DOM has been updated before the browser paints the UI. Typical use cases include:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Measuring the DOM layout (e.g., for animations or measurements).\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Synchronizing state or making changes that must be reflected in the DOM immediately.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Updating state that depends on DOM changes, such as adjusting styles or positions based on layout changes.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"For less critical side effects, such as data fetching or logging, \",(0,n.jsx)(e.code,{children:\"useEffect\"}),\" is generally preferred because it's non-blocking and doesn\\u2019t delay browser painting.\"]}),`\n`,(0,n.jsx)(e.h1,{id:\"zustand-test-case\",children:(0,n.jsx)(e.strong,{children:\"Zustand Test Case\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Here\\u2019s a test case from Zustand\\u2019s source code that demonstrates \",(0,n.jsx)(e.code,{children:\"useLayoutEffect\"}),\" in action:\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"// https://github.com/pmndrs/zustand/issues/84\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"it('ensures the correct subscriber is removed on unmount', async () => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const useBoundStore = create(() => ({ count: 0 }))\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const api = useBoundStore\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  function increment() {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    api.setState(({ count }) => ({ count: count + 1 }))\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  }\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  function Count() {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    const c = useBoundStore((s) => s.count)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    return <div>count: {c}</div>\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  }\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  function CountWithInitialIncrement() {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    useLayoutEffect(increment, [])\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    return <Count />\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  }\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  function Component() {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    const [Counter, setCounter] = useState(() => CountWithInitialIncrement)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    useLayoutEffect(() => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      setCounter(() => Count)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    }, [])\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    return (\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      <>\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        <Counter />\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        <Count />\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      </>\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    )\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  }\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const { findAllByText } = render(\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    <>\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      <Component />\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    </>,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  )\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  expect((await findAllByText('count: 1')).length).toBe(2)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  act(increment)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  expect((await findAllByText('count: 2')).length).toBe(2)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"})\"})})]})})}),`\n`,(0,n.jsx)(e.h1,{id:\"breaking-down-the-code\",children:(0,n.jsx)(e.strong,{children:\"Breaking Down the Code\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This test validates that Zustand correctly removes subscribers when components unmount and re-renders state changes appropriately. The core element we will focus on is how \",(0,n.jsx)(e.code,{children:\"useLayoutEffect\"}),\" plays a critical role in controlling when state changes occur relative to the component lifecycle.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:875/1*_gTq0wSQLjktw-hmi31LCg.png\",alt:\"\"})}),`\n`,(0,n.jsx)(e.h2,{id:\"1-creating-the-store-and-increment-function\",children:(0,n.jsx)(e.strong,{children:\"1. Creating the Store and Increment Function\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The store is initialized with an object containing a single state property \",(0,n.jsx)(e.code,{children:\"count\"}),\" set to \",(0,n.jsx)(e.code,{children:\"0\"}),\".\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const useBoundStore = create(() => ({ count: 0 }))\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const api = useBoundStore\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"increment\"}),\" function updates the \",(0,n.jsx)(e.code,{children:\"count\"}),\" in the store:\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"function increment() {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    api.setState(({ count }) => ({ count: count + 1 }))\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})})]})})}),`\n`,(0,n.jsxs)(e.h2,{id:\"2-the-count-component\",children:[(0,n.jsx)(e.strong,{children:\"2. The\"}),\" \",(0,n.jsx)(e.code,{children:\"Count\"}),\" Component\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"Count\"}),\" component subscribes to the store and renders the current \",(0,n.jsx)(e.code,{children:\"count\"}),\":\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"function Count() {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    const c = useBoundStore((s) => s.count)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    return <div>count: {c}</div>\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This component simply pulls the \",(0,n.jsx)(e.code,{children:\"count\"}),\" from Zustand\\u2019s store and displays it in the DOM.\"]}),`\n`,(0,n.jsxs)(e.h2,{id:\"3-countwithinitialincrement-and-uselayouteffect\",children:[(0,n.jsx)(e.strong,{children:\"3.\"}),\" \",(0,n.jsx)(e.code,{children:\"CountWithInitialIncrement\"}),\" and \",(0,n.jsx)(e.code,{children:\"useLayoutEffect\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"This is where \",(0,n.jsx)(e.code,{children:\"useLayoutEffect\"}),\" comes into play. In the \",(0,n.jsx)(e.code,{children:\"CountWithInitialIncrement\"}),\" component, we use \",(0,n.jsx)(e.code,{children:\"useLayoutEffect\"}),\" to trigger the \",(0,n.jsx)(e.code,{children:\"increment\"}),\" function immediately after the component mounts but before the browser paints:\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"function CountWithInitialIncrement() {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    useLayoutEffect(increment, [])\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    return <Count />\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This ensures that the \",(0,n.jsx)(e.code,{children:\"count\"}),\" is incremented before the component's UI is rendered. If we used \",(0,n.jsx)(e.code,{children:\"useEffect\"}),\" here, the UI would first render \",(0,n.jsx)(e.code,{children:\"count: 0\"}),\", then update to \",(0,n.jsx)(e.code,{children:\"count: 1\"}),\" after the effect runs. However, with \",(0,n.jsx)(e.code,{children:\"useLayoutEffect\"}),\", the UI skips the initial \",(0,n.jsx)(e.code,{children:\"count: 0\"}),\" and directly renders \",(0,n.jsx)(e.code,{children:\"count: 1\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"4-switching-components-dynamically\",children:(0,n.jsx)(e.strong,{children:\"4. Switching Components Dynamically\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"Component\"}),\" component demonstrates a more advanced scenario where \",(0,n.jsx)(e.code,{children:\"useLayoutEffect\"}),\" is used to switch between two different components on mount:\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"function Component() {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    const [Counter, setCounter] = useState(() => CountWithInitialIncrement)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    useLayoutEffect(() => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      setCounter(() => Count)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    }, [])\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    return (\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      <>\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        <Counter />\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        <Count />\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      </>\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    )\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})})]})})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Initially, \",(0,n.jsx)(e.code,{children:\"Counter\"}),\" is set to \",(0,n.jsx)(e.code,{children:\"CountWithInitialIncrement\"}),\", which triggers the \",(0,n.jsx)(e.code,{children:\"increment\"}),\" function when it mounts.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Then, \",(0,n.jsx)(e.code,{children:\"useLayoutEffect\"}),\" runs synchronously after the DOM is updated, changing \",(0,n.jsx)(e.code,{children:\"Counter\"}),\" to the \",(0,n.jsx)(e.code,{children:\"Count\"}),\" component. This switch ensures that after the layout is painted, the next time the component renders, it doesn\\u2019t include the initial increment logic.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"By the time \",(0,n.jsx)(e.code,{children:\"Counter\"}),\" switches to \",(0,n.jsx)(e.code,{children:\"Count\"}),\", the \",(0,n.jsx)(e.code,{children:\"count\"}),\" is already incremented, and the correct values are displayed.\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"5-the-test-expectations\",children:(0,n.jsx)(e.strong,{children:\"5. The Test Expectations\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Finally, the test verifies the following:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Initially, both the \",(0,n.jsx)(e.code,{children:\"Counter\"}),\" and \",(0,n.jsx)(e.code,{children:\"Count\"}),\" components display \",(0,n.jsx)(e.code,{children:\"count: 1\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"After triggering another \",(0,n.jsx)(e.code,{children:\"increment\"}),\", both components should update to \",(0,n.jsx)(e.code,{children:\"count: 2\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"expect((await findAllByText('count: 1')).length).toBe(2)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"act(increment)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"expect((await findAllByText('count: 2')).length).toBe(2)\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The test passes because \",(0,n.jsx)(e.code,{children:\"useLayoutEffect\"}),\" ensures the state update happens before the browser renders the UI, avoiding any intermediate render where \",(0,n.jsx)(e.code,{children:\"count\"}),\" would still be \",(0,n.jsx)(e.code,{children:\"0\"}),\".\"]}),`\n`,(0,n.jsxs)(e.h1,{id:\"why-use-uselayouteffect-here\",children:[(0,n.jsx)(e.strong,{children:\"Why Use\"}),\" \",(0,n.jsx)(e.code,{children:\"useLayoutEffect\"}),\" Here?\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"this test case closely resembles the issue repro provided in the \",(0,n.jsx)(e.a,{href:\"https://codesandbox.io/s/quirky-taussig-ng90m\",children:\"codesandbox\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:875/1*q0ujhhQN31RdQEm0x-G9Ng.png\",alt:\"\"})}),`\n`,(0,n.jsx)(e.p,{children:\"The aim of this test case is to validate that subscribers do not get overwritten when the components unmount. Since useLayoutEffect renders the state before the browser repaints the UI, this is to ensure the listeners all work as expected. The issue states that one of listeners simply does not get updated, which is weird.\"}),`\n`,(0,n.jsx)(e.h1,{id:\"conclusion\",children:(0,n.jsx)(e.strong,{children:\"Conclusion\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"React\\u2019s \",(0,n.jsx)(e.code,{children:\"useLayoutEffect\"}),\" provides control over state updates and DOM changes that need to happen before the user sees the page. In the Zustand test case we reviewed, \",(0,n.jsx)(e.code,{children:\"useLayoutEffect\"}),\" ensures that the \",(0,n.jsx)(e.code,{children:\"increment\"}),\" function is executed synchronously after the DOM updates, making sure that state changes are reflected immediately.\"]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"useLayoutEffect\"}),\" can hurt performance. Prefer \",(0,n.jsx)(e.a,{href:\"https://react.dev/reference/react/useEffect\",children:(0,n.jsx)(e.code,{children:\"useEffect\"})}),\" when possible. \\u2014 \",(0,n.jsx)(e.a,{href:\"https://react.dev/reference/react/useLayoutEffect\",children:\"React Docs\"})]}),`\n`]}),`\n`,(0,n.jsx)(e.h1,{id:\"about-me\",children:(0,n.jsx)(e.strong,{children:\"About me:\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Hey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"I am open to work on interesting projects. Send me an email at \",(0,n.jsx)(e.a,{href:\"mailto:ramu.narasinga@gmail.com\",children:\"ramu.narasinga@gmail.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Github \\u2014 \",(0,n.jsx)(e.a,{href:\"https://github.com/ramu-narasinga\",children:\"https://github.com/ramu-narasinga\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My website \\u2014 \",(0,n.jsx)(e.a,{href:\"https://ramunarasinga.com/\",children:\"https://ramunarasinga.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Youtube channel \\u2014 \",(0,n.jsx)(e.a,{href:\"https://www.youtube.com/@thinkthroo\",children:\"https://www.youtube.com/@thinkthroo\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Learning platform \\u2014 \",(0,n.jsx)(e.a,{href:\"https://thinkthroo.com/\",children:\"https://thinkthroo.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Codebase Architecture \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/architecture\",children:\"https://app.thinkthroo.com/architecture\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Best practices \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/best-practices\",children:\"https://app.thinkthroo.com/best-practices\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Production-grade projects \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/production-grade-projects\",children:\"https://app.thinkthroo.com/production-grade-projects\"})]}),`\n`,(0,n.jsx)(e.h1,{id:\"references\",children:(0,n.jsx)(e.strong,{children:\"References:\"})}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/pmndrs/zustand/blob/v4.5.5/tests/basic.test.tsx#L598\",children:\"https://github.com/pmndrs/zustand/blob/v4.5.5/tests/basic.test.tsx#L598\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://react.dev/reference/react/useLayoutEffect\",children:\"https://react.dev/reference/react/useLayoutEffect\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/pmndrs/zustand/issues/84\",children:\"https://github.com/pmndrs/zustand/issues/84\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://codesandbox.io/s/quirky-taussig-ng90m\",children:\"https://codesandbox.io/s/quirky-taussig-ng90m\"})}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsxs)(e.a,{href:\"https://medium.com/tag/javascript?source=post_page-----548f1323f825--------------------------------\",children:[(0,n.jsx)(e.br,{}),`\n`]})})]})}function o(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(h,{...t})}):h(t)}return N(v);})();\n;return Component;"
  },
  "_id": "blog/useLayoutEffect-in-zustand-test.mdx",
  "_raw": {
    "sourceFilePath": "blog/useLayoutEffect-in-zustand-test.mdx",
    "sourceFileName": "useLayoutEffect-in-zustand-test.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/useLayoutEffect-in-zustand-test"
  },
  "type": "Doc",
  "slug": "/blog/useLayoutEffect-in-zustand-test",
  "slugAsParams": "useLayoutEffect-in-zustand-test"
}
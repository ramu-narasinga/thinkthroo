{
  "title": "Component structure in Lobechat\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\nIn this guide, you will learn how components are organized in Lobechat.\r\n\r\nBy components, here we mean the building blocks of the user interface or more precisely, the building blocks used in a page.\r\n\r\nOur focus is primarily on the folder structure and file naming conventions used. \r\nIn order to establish a common pattern and to understand components structure better, \r\nwe will study few pages/routes in the Lobechat.\r\n\r\nOur approach is to pick a route, locate the route in the source code and from there on, we will look at \r\n1. Where the imported components are located in a project\r\n2. Folder structure and naming conventions used  \r\n3. How the \"page\" is built using these imported components\r\n\r\nThere will be screenshots and links pointing to folders and components that belong to this project. \r\n\r\nwe will select some routes as shown in the following and discuss the components structure used.\r\n\r\n1. Chat route\r\n2. discover/(list) route group\r\n  a. Home sub-route\r\n  b. Assistants sub-route\r\n  c. Models sub-route\r\n3. (auth) route group\r\n\r\nUse this free guide to learn how components are organized in Lobechat.\r\n\r\n[C: Lobechat]\r\n[Chat route]\r\n\r\nChat route in lobechat uses Next.js [parallel routes](https://nextjs.org/docs/app/building-your-application/routing/parallel-routes)\r\nwith named [slots](https://nextjs.org/docs/app/building-your-application/routing/parallel-routes#slots) \r\nand [default.js](https://nextjs.org/docs/app/building-your-application/routing/parallel-routes#defaultjs)\r\n\r\nSo how is the folder structure, below shown, is responsible to load the chat route?\r\n\r\n[Insert screenshot of https://github.com/lobehub/lobe-chat/tree/main/src/app/(main)/chat folder structure]\r\n\r\nhttps://lobechat.com/chat has parallel routes for:\r\n1. Sessions list\r\n2. Conversation\r\n\r\n# @sessions slot\r\n\r\n[@session](https://github.com/lobehub/lobe-chat/tree/main/src/app/(main)/chat/%40session) is responsible to show the list of \r\nsessions.\r\n\r\n[Insert screenshot of sessions - https://lobechat.com/chat?session=inbox]\r\n\r\nIs this slot using a page.tsx? Next.js documentation states that:\r\n\r\n\"\r\nSlots are not route segments and do not affect the URL structure. For example, for /@analytics/views, the URL will \r\nbe /views since @analytics is a slot.\r\n\"\r\n\r\nYou can create a route by creating a folder and adding a page.tsx, but does Lobechat do that? [@session](https://github.com/lobehub/lobe-chat/tree/main/src/app/(main)/chat/%40session) \r\nfolder does not have any page.tsx\r\n\r\n|-- _layout/\r\n|-- features/\r\n|-- default.ts\r\n\r\n## default.ts \r\n\r\nYou can define a default.js file to render as a fallback for unmatched slots during \r\nthe initial load or full-page reload. since there's no page.tsx or sub route defined inside Lobechat @session folder's [default.ts](https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/chat/%40session/default.tsx)\r\n\r\n### @session/default.tsx\r\n\r\n```\r\nimport { Suspense, lazy } from 'react';\r\n\r\nimport ServerLayout from '@/components/server/ServerLayout';\r\n\r\nimport Desktop from './_layout/Desktop';\r\nimport Mobile from './_layout/Mobile';\r\nimport SessionHydration from './features/SessionHydration';\r\nimport SkeletonList from './features/SkeletonList';\r\n\r\nconst SessionListContent = lazy(() => import('./features/SessionListContent'));\r\n\r\nconst Layout = ServerLayout({ Desktop, Mobile });\r\n\r\nconst Session = () => {\r\n  return (\r\n    <>\r\n      <Layout>\r\n        <Suspense fallback={<SkeletonList />}>\r\n          <SessionListContent />\r\n        </Suspense>\r\n      </Layout>\r\n      <SessionHydration />\r\n    </>\r\n  );\r\n};\r\n\r\nSession.displayName = 'Session';\r\n\r\nexport default Session;\r\n```\r\n\r\n## _layout folder\r\n\r\n_layout folder is common standard across the Lobechat routes and is used for responsiveness as it contains Desktop and Mobile\r\nfolders.\r\n\r\n```\r\nimport Desktop from './_layout/Desktop';\r\nimport Mobile from './_layout/Mobile';\r\n...\r\nconst Layout = ServerLayout({ Desktop, Mobile });\r\n...\r\n```\r\n\r\nWhy such a pattern? well, we have concluded that this is because Lobechat uses [antd-style, a css-in-js library](https://github.com/ant-design/antd-style). \r\n\r\n```\r\n// @session/features/SessionList.tsx\r\n...\r\nimport { createStyles } from 'antd-style';\r\n...\r\nconst useStyles = createStyles(({ css }) => ({\r\n  paragraph: css`\r\n    height: 12px !important;\r\n    margin-block-start: 12px !important;\r\n\r\n    > li {\r\n      height: 12px !important;\r\n    }\r\n  `,\r\n```",
    "code": "var Component=(()=>{var u=Object.create;var s=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=>{for(var o in e)s(t,o,{get:e[o],enumerable:!0})},a=(t,e,o,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!f.call(t,r)&&r!==o&&s(t,r,{get:()=>e[r],enumerable:!(i=p(e,r))||i.enumerable});return t};var x=(t,e,o)=>(o=t!=null?u(b(t)):{},a(e||!t||!t.__esModule?s(o,\"default\",{value:t,enumerable:!0}):o,t)),L=t=>a(s({},\"__esModule\",{value:!0}),t);var c=g((j,l)=>{l.exports=_jsx_runtime});var w={};y(w,{default:()=>d,frontmatter:()=>S});var n=x(c()),S={title:\"Component structure in Lobechat\"};function h(t){let e={a:\"a\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"In this guide, you will learn how components are organized in Lobechat.\"}),`\n`,(0,n.jsx)(e.p,{children:\"By components, here we mean the building blocks of the user interface or more precisely, the building blocks used in a page.\"}),`\n`,(0,n.jsx)(e.p,{children:`Our focus is primarily on the folder structure and file naming conventions used.\\r\nIn order to establish a common pattern and to understand components structure better,\\r\nwe will study few pages/routes in the Lobechat.`}),`\n`,(0,n.jsx)(e.p,{children:\"Our approach is to pick a route, locate the route in the source code and from there on, we will look at\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Where the imported components are located in a project\"}),`\n`,(0,n.jsx)(e.li,{children:\"Folder structure and naming conventions used\"}),`\n`,(0,n.jsx)(e.li,{children:'How the \"page\" is built using these imported components'}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"There will be screenshots and links pointing to folders and components that belong to this project.\"}),`\n`,(0,n.jsx)(e.p,{children:\"we will select some routes as shown in the following and discuss the components structure used.\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Chat route\"}),`\n`,(0,n.jsx)(e.li,{children:`discover/(list) route group\\r\na. Home sub-route\\r\nb. Assistants sub-route\\r\nc. Models sub-route`}),`\n`,(0,n.jsx)(e.li,{children:\"(auth) route group\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Use this free guide to learn how components are organized in Lobechat.\"}),`\n`,(0,n.jsx)(e.p,{children:`[C: Lobechat]\\r\n[Chat route]`}),`\n`,(0,n.jsxs)(e.p,{children:[\"Chat route in lobechat uses Next.js \",(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/app/building-your-application/routing/parallel-routes\",children:\"parallel routes\"}),`\\r\nwith named `,(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/app/building-your-application/routing/parallel-routes#slots\",children:\"slots\"}),`\\r\nand `,(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/app/building-your-application/routing/parallel-routes#defaultjs\",children:\"default.js\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"So how is the folder structure, below shown, is responsible to load the chat route?\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert screenshot of \",(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/tree/main/src/app/(main)/chat\",children:\"https://github.com/lobehub/lobe-chat/tree/main/src/app/(main)/chat\"}),\" folder structure]\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://lobechat.com/chat\",children:\"https://lobechat.com/chat\"}),\" has parallel routes for:\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Sessions list\"}),`\n`,(0,n.jsx)(e.li,{children:\"Conversation\"}),`\n`]}),`\n`,(0,n.jsx)(e.h1,{id:\"sessions-slot\",children:\"@sessions slot\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/tree/main/src/app/(main)/chat/%40session\",children:\"@session\"}),` is responsible to show the list of\\r\nsessions.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert screenshot of sessions - \",(0,n.jsx)(e.a,{href:\"https://lobechat.com/chat?session=inbox\",children:\"https://lobechat.com/chat?session=inbox\"}),\"]\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Is this slot using a page.tsx? Next.js documentation states that:\"}),`\n`,(0,n.jsx)(e.p,{children:`\"\\r\nSlots are not route segments and do not affect the URL structure. For example, for /@analytics/views, the URL will\\r\nbe /views since @analytics is a slot.\\r\n\"`}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can create a route by creating a folder and adding a page.tsx, but does Lobechat do that? \",(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/tree/main/src/app/(main)/chat/%40session\",children:\"@session\"}),`\\r\nfolder does not have any page.tsx`]}),`\n`,(0,n.jsx)(e.p,{children:`|-- _layout/\\r\n|-- features/\\r\n|-- default.ts`}),`\n`,(0,n.jsx)(e.h2,{id:\"defaultts\",children:\"default.ts\"}),`\n`,(0,n.jsxs)(e.p,{children:[`You can define a default.js file to render as a fallback for unmatched slots during\\r\nthe initial load or full-page reload. since there's no page.tsx or sub route defined inside Lobechat @session folder's `,(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/chat/%40session/default.tsx\",children:\"default.ts\"})]}),`\n`,(0,n.jsx)(e.h3,{id:\"sessiondefaulttsx\",children:\"@session/default.tsx\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import { Suspense, lazy } from 'react';\\r\n\\r\nimport ServerLayout from '@/components/server/ServerLayout';\\r\n\\r\nimport Desktop from './_layout/Desktop';\\r\nimport Mobile from './_layout/Mobile';\\r\nimport SessionHydration from './features/SessionHydration';\\r\nimport SkeletonList from './features/SkeletonList';\\r\n\\r\nconst SessionListContent = lazy(() => import('./features/SessionListContent'));\\r\n\\r\nconst Layout = ServerLayout({ Desktop, Mobile });\\r\n\\r\nconst Session = () => {\\r\n  return (\\r\n    <>\\r\n      <Layout>\\r\n        <Suspense fallback={<SkeletonList />}>\\r\n          <SessionListContent />\\r\n        </Suspense>\\r\n      </Layout>\\r\n      <SessionHydration />\\r\n    </>\\r\n  );\\r\n};\\r\n\\r\nSession.displayName = 'Session';\\r\n\\r\nexport default Session;\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"_layout-folder\",children:\"_layout folder\"}),`\n`,(0,n.jsx)(e.p,{children:`_layout folder is common standard across the Lobechat routes and is used for responsiveness as it contains Desktop and Mobile\\r\nfolders.`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import Desktop from './_layout/Desktop';\\r\nimport Mobile from './_layout/Mobile';\\r\n...\\r\nconst Layout = ServerLayout({ Desktop, Mobile });\\r\n...\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Why such a pattern? well, we have concluded that this is because Lobechat uses \",(0,n.jsx)(e.a,{href:\"https://github.com/ant-design/antd-style\",children:\"antd-style, a css-in-js library\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`// @session/features/SessionList.tsx\\r\n...\\r\nimport { createStyles } from 'antd-style';\\r\n...\\r\nconst useStyles = createStyles(({ css }) => ({\\r\n  paragraph: css\\`\\r\n    height: 12px !important;\\r\n    margin-block-start: 12px !important;\\r\n\\r\n    > li {\\r\n      height: 12px !important;\\r\n    }\\r\n  \\`,\n`})})]})}function d(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(h,{...t})}):h(t)}return L(w);})();\n;return Component;"
  },
  "_id": "guide/codebase-architecture/lobechat/component-structure/introduction.mdx",
  "_raw": {
    "sourceFilePath": "guide/codebase-architecture/lobechat/component-structure/introduction.mdx",
    "sourceFileName": "introduction.mdx",
    "sourceFileDir": "guide/codebase-architecture/lobechat/component-structure",
    "contentType": "mdx",
    "flattenedPath": "guide/codebase-architecture/lobechat/component-structure/introduction"
  },
  "type": "Doc",
  "slug": "/guide/codebase-architecture/lobechat/component-structure/introduction",
  "slugAsParams": "codebase-architecture/lobechat/component-structure/introduction"
}
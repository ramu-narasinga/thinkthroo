{
  "title": "Logger package in changesets monorepo\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\n[Changesets CLI package](https://github.com/changesets/changesets/blob/main/packages/cli/src/index.ts#L3) has an import as shown below at line 3 in [packages/cli/src/index.ts#L3](https://github.com/changesets/changesets/blob/main/packages/cli/src/index.ts#L3)\r\n\r\n```plaintext\r\nimport { error } from \"@changesets/logger\";\r\n```\r\n\r\nI have seen this before, a dedicated package just for logger, [in docusaurus-logger](https://github.com/facebook/docusaurus/blob/2b8ddb9260c54b7fdba4398bfdce64553a1356b0/packages/docusaurus-logger/src/index.ts). At this point, I believe it is a common standard/best practice across the OSS to have a dedicated package to have a consistent logger to be used across the codebase.\r\n\r\n### Why a dedicated package for logger?\r\n\r\nSince changesets is a monorepo (so is Docusaurus), you will find yourself reusing packages across the codebase but imagine a scenario where you logged an error on to the CLI using a color. Why is this color in picture now? you might be wondering. When you use a CLI package of any Open Source project such as Next.js or Docusaurus or Changesets, the feedback you get from interacting with CLI often times is colored, for example, to show an error or warning or info.\r\n\r\n![](https://cdn-images-1.medium.com/max/1600/1*EiOWVzae6Qoc_uBe74v3fw.png)\r\n\r\nI picked few functions from [Changesets packages/cli/src/index.ts](https://github.com/changesets/changesets/blob/main/packages/cli/src/index.ts#L3)\r\n\r\n```plaintext\r\nexport function error(…args: Array<any>) {\r\n console.error(format(args, pc.red(\"error\")));\r\n}\r\nexport function info(…args: Array<any>) {\r\n console.info(format(args, pc.cyan(\"info\")));\r\n}\r\nexport function success(…args: Array<any>) {\r\n console.log(format(args, pc.green(\"success\")));\r\n}\r\n```\r\n\r\nSo what’s pc? It is picocolors package imported at the top of the file.\r\n\r\n```plaintext\r\nimport pc from \"picocolors\";\r\n```\r\n\r\n### Benefits of using a logger package \r\n\r\nYou will greatly benefit from consistent logging capabilities across your codebase since you will define the common logs with color encoding if required.\r\n\r\nBelow is a code snippet picked from Docusuarus.\r\n\r\n```plaintext\r\nfunction warn(msg: unknown, …values: InterpolatableValue[]): void {\r\n console.warn(\r\n chalk.yellow(\r\n `${chalk.bold('[WARNING]')} ${\r\n values.length === 0\r\n ? stringify(msg)\r\n : interpolate(msg as TemplateStringsArray, …values)\r\n }`,\r\n ),\r\n );\r\n}\r\n```\r\n\r\nDocusaurus uses chalk to color the CLI output strings. I mentioned Docusaurus and shown the example to demonstrate how a package is used purely for logging purposes.\r\n\r\n# **About me:**\r\n\r\nHey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\r\n\r\nI am open to work on interesting projects. Send me an email at ramu.narasinga@gmail.com\r\n\r\nMy Github — [https://github.com/ramu-narasinga](https://github.com/ramu-narasinga)\r\n\r\nMy website — [https://ramunarasinga.com](https://ramunarasinga.com/)\r\n\r\nMy Youtube channel — [https://www.youtube.com/@thinkthroo](https://www.youtube.com/@thinkthroo)\r\n\r\nLearning platform — [https://thinkthroo.com](https://thinkthroo.com/)\r\n\r\nCodebase Architecture — [https://app.thinkthroo.com/architecture](https://app.thinkthroo.com/architecture)\r\n\r\nBest practices — [https://app.thinkthroo.com/best-practices](https://app.thinkthroo.com/best-practices)\r\n\r\nProduction-grade projects — [https://app.thinkthroo.com/production-grade-projects](https://app.thinkthroo.com/production-grade-projects)\r\n\r\n### References:\r\n\r\n1. [https://github.com/changesets/changesets/blob/main/packages/logger/src/index.ts#L18](https://github.com/changesets/changesets/blob/main/packages/logger/src/index.ts#L18)\r\n    \r\n2. [https://github.com/changesets/changesets/blob/main/packages/cli/src/index.ts#L3](https://github.com/changesets/changesets/blob/main/packages/cli/src/index.ts#L3)\r\n    \r\n3. [https://github.com/changesets/changesets/tree/main/packages/logger](https://github.com/changesets/changesets/tree/main/packages/logger)\r\n    \r\n4. [https://github.com/facebook/docusaurus/blob/2b8ddb9260c54b7fdba4398bfdce64553a1356b0/packages/docusaurus-logger/src/index.ts](https://github.com/facebook/docusaurus/blob/2b8ddb9260c54b7fdba4398bfdce64553a1356b0/packages/docusaurus-logger/src/index.ts)\r\n    \r\n5. [https://www.npmjs.com/package/picocolors](https://www.npmjs.com/package/picocolors)\r\n    \r\n6. [https://www.npmjs.com/package/chalk](https://www.npmjs.com/package/chalk)",
    "code": "var Component=(()=>{var p=Object.create;var r=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var b=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),k=(a,e)=>{for(var c in e)r(a,c,{get:e[c],enumerable:!0})},i=(a,e,c,t)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of m(e))!f.call(a,s)&&s!==c&&r(a,s,{get:()=>e[s],enumerable:!(t=g(e,s))||t.enumerable});return a};var w=(a,e,c)=>(c=a!=null?p(u(a)):{},i(e||!a||!a.__esModule?r(c,\"default\",{value:a,enumerable:!0}):c,a)),y=a=>i(r({},\"__esModule\",{value:!0}),a);var h=b((v,o)=>{o.exports=_jsx_runtime});var N={};k(N,{default:()=>d,frontmatter:()=>x});var n=w(h()),x={title:\"Logger package in changesets monorepo\"};function l(a){let e={a:\"a\",code:\"code\",div:\"div\",h1:\"h1\",h3:\"h3\",img:\"img\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",...a.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/changesets/changesets/blob/main/packages/cli/src/index.ts#L3\",children:\"Changesets CLI package\"}),\" has an import as shown below at line 3 in \",(0,n.jsx)(e.a,{href:\"https://github.com/changesets/changesets/blob/main/packages/cli/src/index.ts#L3\",children:\"packages/cli/src/index.ts#L3\"})]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsx)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:'import { error } from \"@changesets/logger\";'})})})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"I have seen this before, a dedicated package just for logger, \",(0,n.jsx)(e.a,{href:\"https://github.com/facebook/docusaurus/blob/2b8ddb9260c54b7fdba4398bfdce64553a1356b0/packages/docusaurus-logger/src/index.ts\",children:\"in docusaurus-logger\"}),\". At this point, I believe it is a common standard/best practice across the OSS to have a dedicated package to have a consistent logger to be used across the codebase.\"]}),`\n`,(0,n.jsx)(e.h3,{id:\"why-a-dedicated-package-forlogger\",children:\"Why a dedicated package for\\xA0logger?\"}),`\n`,(0,n.jsx)(e.p,{children:\"Since changesets is a monorepo (so is Docusaurus), you will find yourself reusing packages across the codebase but imagine a scenario where you logged an error on to the CLI using a color. Why is this color in picture now? you might be wondering. When you use a CLI package of any Open Source project such as Next.js or Docusaurus or Changesets, the feedback you get from interacting with CLI often times is colored, for example, to show an error or warning or info.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://cdn-images-1.medium.com/max/1600/1*EiOWVzae6Qoc_uBe74v3fw.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"I picked few functions from \",(0,n.jsx)(e.a,{href:\"https://github.com/changesets/changesets/blob/main/packages/cli/src/index.ts#L3\",children:\"Changesets packages/cli/src/index.ts\"})]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"export function error(\\u2026args: Array<any>) {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' console.error(format(args, pc.red(\"error\")));'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"export function info(\\u2026args: Array<any>) {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' console.info(format(args, pc.cyan(\"info\")));'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"export function success(\\u2026args: Array<any>) {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:' console.log(format(args, pc.green(\"success\")));'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"So what\\u2019s pc? It is picocolors package imported at the top of the file.\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsx)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:'import pc from \"picocolors\";'})})})})}),`\n`,(0,n.jsx)(e.h3,{id:\"benefits-of-using-a-loggerpackage\",children:\"Benefits of using a logger\\xA0package\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:\"You will greatly benefit from consistent logging capabilities across your codebase since you will define the common logs with color encoding if required.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Below is a code snippet picked from Docusuarus.\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"function warn(msg: unknown, \\u2026values: InterpolatableValue[]): void {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" console.warn(\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" chalk.yellow(\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" `${chalk.bold('[WARNING]')} ${\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" values.length === 0\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" ? stringify(msg)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" : interpolate(msg as TemplateStringsArray, \\u2026values)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" }`,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" ),\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" );\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"Docusaurus uses chalk to color the CLI output strings. I mentioned Docusaurus and shown the example to demonstrate how a package is used purely for logging purposes.\"}),`\n`,(0,n.jsx)(e.h1,{id:\"about-me\",children:(0,n.jsx)(e.strong,{children:\"About me:\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Hey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"I am open to work on interesting projects. Send me an email at \",(0,n.jsx)(e.a,{href:\"mailto:ramu.narasinga@gmail.com\",children:\"ramu.narasinga@gmail.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Github \\u2014 \",(0,n.jsx)(e.a,{href:\"https://github.com/ramu-narasinga\",children:\"https://github.com/ramu-narasinga\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My website \\u2014 \",(0,n.jsx)(e.a,{href:\"https://ramunarasinga.com/\",children:\"https://ramunarasinga.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Youtube channel \\u2014 \",(0,n.jsx)(e.a,{href:\"https://www.youtube.com/@thinkthroo\",children:\"https://www.youtube.com/@thinkthroo\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Learning platform \\u2014 \",(0,n.jsx)(e.a,{href:\"https://thinkthroo.com/\",children:\"https://thinkthroo.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Codebase Architecture \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/architecture\",children:\"https://app.thinkthroo.com/architecture\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Best practices \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/best-practices\",children:\"https://app.thinkthroo.com/best-practices\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Production-grade projects \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/production-grade-projects\",children:\"https://app.thinkthroo.com/production-grade-projects\"})]}),`\n`,(0,n.jsx)(e.h3,{id:\"references\",children:\"References:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/changesets/changesets/blob/main/packages/logger/src/index.ts#L18\",children:\"https://github.com/changesets/changesets/blob/main/packages/logger/src/index.ts#L18\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/changesets/changesets/blob/main/packages/cli/src/index.ts#L3\",children:\"https://github.com/changesets/changesets/blob/main/packages/cli/src/index.ts#L3\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/changesets/changesets/tree/main/packages/logger\",children:\"https://github.com/changesets/changesets/tree/main/packages/logger\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/facebook/docusaurus/blob/2b8ddb9260c54b7fdba4398bfdce64553a1356b0/packages/docusaurus-logger/src/index.ts\",children:\"https://github.com/facebook/docusaurus/blob/2b8ddb9260c54b7fdba4398bfdce64553a1356b0/packages/docusaurus-logger/src/index.ts\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://www.npmjs.com/package/picocolors\",children:\"https://www.npmjs.com/package/picocolors\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://www.npmjs.com/package/chalk\",children:\"https://www.npmjs.com/package/chalk\"})}),`\n`]}),`\n`]})]})}function d(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,{...a,children:(0,n.jsx)(l,{...a})}):l(a)}return y(N);})();\n;return Component;"
  },
  "_id": "blog/logger-package-in-changesets.mdx",
  "_raw": {
    "sourceFilePath": "blog/logger-package-in-changesets.mdx",
    "sourceFileName": "logger-package-in-changesets.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/logger-package-in-changesets"
  },
  "type": "Doc",
  "slug": "/blog/logger-package-in-changesets",
  "slugAsParams": "logger-package-in-changesets"
}
{
  "title": "Cache your fetcher in useSWR with useCallback.\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\nI found a way that caches the fetcher in useSWR using useCallback in the [Gitroom source code](https://github.com/search?q=repo%3Agitroomhq%2Fgitroom+useSWR&type=code).\r\n\r\n![](https://miro.medium.com/v2/resize:fit:875/1*1dCWMweVkRrqIuMzopjS7g.png)\r\n\r\nThe above image is from [platform-analytics/render.analytics.tsx](https://github.com/gitroomhq/gitroom/blob/c03b96215fa30b267a97d7eafc2281f482a3192f/apps/frontend/src/components/platform-analytics/render.analytics.tsx#L25). Let’s try to understand this code snippet.\r\n\r\nwe’ll explore how to optimize data fetching in your React applications using the `useCallback` hook in combination with `useSWR`. We'll break down the provided code snippet, explain why caching your fetcher function is important.\r\n\r\n## **Understanding the Code**\r\n\r\nLet’s dive into the code step by step:\r\n\r\n```plaintext\r\nconst load = useCallback(async () => {\r\n  setLoading(true);\r\n  const load = (\r\n    await fetch(`/analytics/${integration.id}?date=${date}`)\r\n  ).json();\r\n  setLoading(false);\r\n  return load;\r\n}, [integration, date]);\r\n```\r\n\r\nHere, we’re defining an asynchronous function `load` inside a `useCallback` hook. This function fetches data from a specified endpoint and handles the loading state. The `useCallback` hook ensures that this function is memoized and only recreated when the dependencies (`integration` and `date`) change.\r\n\r\nNext, we use `useSWR` to manage the data fetching:\r\n\r\n```plaintext\r\nconst { data } = useSWR(`/analytics-${integration?.id}-${date}`, load, {\r\n  refreshInterval: 0,\r\n  refreshWhenHidden: false,\r\n  revalidateOnFocus: false,\r\n  revalidateOnReconnect: false,\r\n  revalidateIfStale: false,\r\n  refreshWhenOffline: false,\r\n  revalidateOnMount: true,\r\n});\r\n```\r\n\r\nHere, `useSWR` is configured with a key (`/analytics-${integration?.id}-${date}`) and our memoized `load` function. The configuration options control the revalidation behavior of the data.\r\n\r\n# **How** `useCallback` Prevents Unnecessary Re-fetches\r\n\r\nTo understand how `useCallback` prevents unnecessary re-fetches, we need to delve into how React handles function references and how `useSWR` works.\r\n\r\n## **Function References in React**\r\n\r\nIn React, every time a component re-renders, all functions defined within it are recreated. This means that without `useCallback`, a new instance of your `load` function would be created on every render.\r\n\r\n![](https://miro.medium.com/v2/resize:fit:875/1*j6evtFxMNVvHjLsFXKVySQ.png align=\"left\")\r\n\r\n## **Impact on** `useSWR`\r\n\r\n`useSWR` is a data fetching library for React. It uses a key to identify the data and a fetcher function to fetch it. `useSWR` relies on the stability of the fetcher function reference. If the reference changes, `useSWR` might interpret this as a signal that the data needs to be refetched, even if the actual logic of the fetcher hasn't changed.\r\n\r\nHere’s a detailed explanation:\r\n\r\n1. **Without** `useCallback`:\r\n    \r\n\r\n```plaintext\r\nconst load = async () => {\r\n  setLoading(true);\r\n  const load = (\r\n    await fetch(`/analytics/${integration.id}?date=${date}`)\r\n  ).json();\r\n  setLoading(false);\r\n  return load;\r\n};\r\n\r\nconst { data } = useSWR(`/analytics-${integration?.id}-${date}`, load, {\r\n  refreshInterval: 0,\r\n  refreshWhenHidden: false,\r\n  revalidateOnFocus: false,\r\n  revalidateOnReconnect: false,\r\n  revalidateIfStale: false,\r\n  refreshWhenOffline: false,\r\n  revalidateOnMount: true,\r\n});\r\n```\r\n\r\nIn this case, every render creates a new `load` function. `useSWR` sees a different function reference each time, which can lead to unnecessary re-fetches even when `integration` and `date` haven't changed.\r\n\r\n**With** `useCallback`:\r\n\r\n```plaintext\r\nconst load = useCallback(async () => {\r\n  setLoading(true);\r\n  const load = (\r\n    await fetch(`/analytics/${integration.id}?date=${date}`)\r\n  ).json();\r\n  setLoading(false);\r\n  return load;\r\n}, [integration, date]);\r\n\r\nconst { data } = useSWR(`/analytics-${integration?.id}-${date}`, load, {\r\n  refreshInterval: 0,\r\n  refreshWhenHidden: false,\r\n  revalidateOnFocus: false,\r\n  revalidateOnReconnect: false,\r\n  revalidateIfStale: false,\r\n  refreshWhenOffline: false,\r\n  revalidateOnMount: true,\r\n});\r\n```\r\n\r\nBy wrapping the `load` function in `useCallback`, we ensure that it is only recreated when its dependencies (`integration` and `date`) change. This stability in the function reference tells `useSWR` that the fetcher function hasn't changed unless `integration` or `date` changes, thus preventing unnecessary re-fetches.\r\n\r\n![](https://miro.medium.com/v2/resize:fit:875/1*47EKz3q3aUidRrzxVGAjLg.png)\r\n\r\n> [*Get free courses inspired by the best practices used in open source.*](https://app.thinkthroo.com/best-practices)\r\n\r\n# **About me:**\r\n\r\nWebsite: [https://ramunarasinga.com/](https://ramunarasinga.com/)\r\n\r\nLinkedin: [https://www.linkedin.com/in/ramu-narasinga-189361128/](https://www.linkedin.com/in/ramu-narasinga-189361128/)\r\n\r\nGithub: [https://github.com/Ramu-Narasinga](https://github.com/Ramu-Narasinga)\r\n\r\nEmail: ramu.narasinga@gmail.com\r\n\r\n[Learn the best practices used in open source.](https://thinkthroo.com/)\r\n\r\n# **References:**\r\n\r\n1. [https://github.com/gitroomhq/gitroom/blob/c03b96215fa30b267a97d7eafc2281f482a3192f/apps/frontend/src/components/platform-analytics/render.analytics.tsx#L25](https://github.com/gitroomhq/gitroom/blob/c03b96215fa30b267a97d7eafc2281f482a3192f/apps/frontend/src/components/platform-analytics/render.analytics.tsx#L25)\r\n    \r\n2. [https://github.com/search?q=repo%3Agitroomhq%2Fgitroom%20useSWR&type=code](https://github.com/search?q=repo%3Agitroomhq%2Fgitroom+useSWR&type=code)\r\n    \r\n3. [https://swr.vercel.app/docs/getting-started](https://swr.vercel.app/docs/getting-started)\r\n    \r\n4. [https://react.dev/reference/react/useCallback](https://react.dev/reference/react/useCallback)",
    "code": "var Component=(()=>{var p=Object.create;var l=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var y=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),N=(a,e)=>{for(var i in e)l(a,i,{get:e[i],enumerable:!0})},s=(a,e,i,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of f(e))!g.call(a,c)&&c!==i&&l(a,c,{get:()=>e[c],enumerable:!(r=m(e,c))||r.enumerable});return a};var b=(a,e,i)=>(i=a!=null?p(u(a)):{},s(e||!a||!a.__esModule?l(i,\"default\",{value:a,enumerable:!0}):i,a)),v=a=>s(l({},\"__esModule\",{value:!0}),a);var d=y((W,t)=>{t.exports=_jsx_runtime});var R={};N(R,{default:()=>o,frontmatter:()=>w});var n=b(d()),w={title:\"Cache your fetcher in useSWR with useCallback.\"};function h(a){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",div:\"div\",em:\"em\",h1:\"h1\",h2:\"h2\",img:\"img\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",...a.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"I found a way that caches the fetcher in useSWR using useCallback in the \",(0,n.jsx)(e.a,{href:\"https://github.com/search?q=repo%3Agitroomhq%2Fgitroom+useSWR&type=code\",children:\"Gitroom source code\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:875/1*1dCWMweVkRrqIuMzopjS7g.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The above image is from \",(0,n.jsx)(e.a,{href:\"https://github.com/gitroomhq/gitroom/blob/c03b96215fa30b267a97d7eafc2281f482a3192f/apps/frontend/src/components/platform-analytics/render.analytics.tsx#L25\",children:\"platform-analytics/render.analytics.tsx\"}),\". Let\\u2019s try to understand this code snippet.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"we\\u2019ll explore how to optimize data fetching in your React applications using the \",(0,n.jsx)(e.code,{children:\"useCallback\"}),\" hook in combination with \",(0,n.jsx)(e.code,{children:\"useSWR\"}),\". We'll break down the provided code snippet, explain why caching your fetcher function is important.\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"understanding-the-code\",children:(0,n.jsx)(e.strong,{children:\"Understanding the Code\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Let\\u2019s dive into the code step by step:\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const load = useCallback(async () => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  setLoading(true);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const load = (\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    await fetch(`/analytics/${integration.id}?date=${date}`)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  ).json();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  setLoading(false);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  return load;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}, [integration, date]);\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Here, we\\u2019re defining an asynchronous function \",(0,n.jsx)(e.code,{children:\"load\"}),\" inside a \",(0,n.jsx)(e.code,{children:\"useCallback\"}),\" hook. This function fetches data from a specified endpoint and handles the loading state. The \",(0,n.jsx)(e.code,{children:\"useCallback\"}),\" hook ensures that this function is memoized and only recreated when the dependencies (\",(0,n.jsx)(e.code,{children:\"integration\"}),\" and \",(0,n.jsx)(e.code,{children:\"date\"}),\") change.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Next, we use \",(0,n.jsx)(e.code,{children:\"useSWR\"}),\" to manage the data fetching:\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const { data } = useSWR(`/analytics-${integration?.id}-${date}`, load, {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  refreshInterval: 0,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  refreshWhenHidden: false,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  revalidateOnFocus: false,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  revalidateOnReconnect: false,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  revalidateIfStale: false,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  refreshWhenOffline: false,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  revalidateOnMount: true,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"});\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Here, \",(0,n.jsx)(e.code,{children:\"useSWR\"}),\" is configured with a key (\",(0,n.jsx)(e.code,{children:\"/analytics-${integration?.id}-${date}\"}),\") and our memoized \",(0,n.jsx)(e.code,{children:\"load\"}),\" function. The configuration options control the revalidation behavior of the data.\"]}),`\n`,(0,n.jsxs)(e.h1,{id:\"how-usecallback-prevents-unnecessary-re-fetches\",children:[(0,n.jsx)(e.strong,{children:\"How\"}),\" \",(0,n.jsx)(e.code,{children:\"useCallback\"}),\" Prevents Unnecessary Re-fetches\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"To understand how \",(0,n.jsx)(e.code,{children:\"useCallback\"}),\" prevents unnecessary re-fetches, we need to delve into how React handles function references and how \",(0,n.jsx)(e.code,{children:\"useSWR\"}),\" works.\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"function-references-in-react\",children:(0,n.jsx)(e.strong,{children:\"Function References in React\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In React, every time a component re-renders, all functions defined within it are recreated. This means that without \",(0,n.jsx)(e.code,{children:\"useCallback\"}),\", a new instance of your \",(0,n.jsx)(e.code,{children:\"load\"}),\" function would be created on every render.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"![](\",(0,n.jsx)(e.a,{href:\"https://miro.medium.com/v2/resize:fit:875/1*j6evtFxMNVvHjLsFXKVySQ.png\",children:\"https://miro.medium.com/v2/resize:fit:875/1*j6evtFxMNVvHjLsFXKVySQ.png\"}),' align=\"left\")']}),`\n`,(0,n.jsxs)(e.h2,{id:\"impact-on-useswr\",children:[(0,n.jsx)(e.strong,{children:\"Impact on\"}),\" \",(0,n.jsx)(e.code,{children:\"useSWR\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"useSWR\"}),\" is a data fetching library for React. It uses a key to identify the data and a fetcher function to fetch it. \",(0,n.jsx)(e.code,{children:\"useSWR\"}),\" relies on the stability of the fetcher function reference. If the reference changes, \",(0,n.jsx)(e.code,{children:\"useSWR\"}),\" might interpret this as a signal that the data needs to be refetched, even if the actual logic of the fetcher hasn't changed.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Here\\u2019s a detailed explanation:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Without\"}),\" \",(0,n.jsx)(e.code,{children:\"useCallback\"}),\":\"]}),`\n`]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const load = async () => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  setLoading(true);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const load = (\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    await fetch(`/analytics/${integration.id}?date=${date}`)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  ).json();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  setLoading(false);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  return load;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"};\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const { data } = useSWR(`/analytics-${integration?.id}-${date}`, load, {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  refreshInterval: 0,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  refreshWhenHidden: false,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  revalidateOnFocus: false,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  revalidateOnReconnect: false,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  revalidateIfStale: false,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  refreshWhenOffline: false,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  revalidateOnMount: true,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"});\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this case, every render creates a new \",(0,n.jsx)(e.code,{children:\"load\"}),\" function. \",(0,n.jsx)(e.code,{children:\"useSWR\"}),\" sees a different function reference each time, which can lead to unnecessary re-fetches even when \",(0,n.jsx)(e.code,{children:\"integration\"}),\" and \",(0,n.jsx)(e.code,{children:\"date\"}),\" haven't changed.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"With\"}),\" \",(0,n.jsx)(e.code,{children:\"useCallback\"}),\":\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const load = useCallback(async () => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  setLoading(true);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const load = (\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    await fetch(`/analytics/${integration.id}?date=${date}`)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  ).json();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  setLoading(false);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  return load;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}, [integration, date]);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const { data } = useSWR(`/analytics-${integration?.id}-${date}`, load, {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  refreshInterval: 0,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  refreshWhenHidden: false,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  revalidateOnFocus: false,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  revalidateOnReconnect: false,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  revalidateIfStale: false,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  refreshWhenOffline: false,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  revalidateOnMount: true,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"});\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"By wrapping the \",(0,n.jsx)(e.code,{children:\"load\"}),\" function in \",(0,n.jsx)(e.code,{children:\"useCallback\"}),\", we ensure that it is only recreated when its dependencies (\",(0,n.jsx)(e.code,{children:\"integration\"}),\" and \",(0,n.jsx)(e.code,{children:\"date\"}),\") change. This stability in the function reference tells \",(0,n.jsx)(e.code,{children:\"useSWR\"}),\" that the fetcher function hasn't changed unless \",(0,n.jsx)(e.code,{children:\"integration\"}),\" or \",(0,n.jsx)(e.code,{children:\"date\"}),\" changes, thus preventing unnecessary re-fetches.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:875/1*47EKz3q3aUidRrzxVGAjLg.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/best-practices\",children:(0,n.jsx)(e.em,{children:\"Get free courses inspired by the best practices used in open source.\"})})}),`\n`]}),`\n`,(0,n.jsx)(e.h1,{id:\"about-me\",children:(0,n.jsx)(e.strong,{children:\"About me:\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Website: \",(0,n.jsx)(e.a,{href:\"https://ramunarasinga.com/\",children:\"https://ramunarasinga.com/\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Linkedin: \",(0,n.jsx)(e.a,{href:\"https://www.linkedin.com/in/ramu-narasinga-189361128/\",children:\"https://www.linkedin.com/in/ramu-narasinga-189361128/\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Github: \",(0,n.jsx)(e.a,{href:\"https://github.com/Ramu-Narasinga\",children:\"https://github.com/Ramu-Narasinga\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Email: \",(0,n.jsx)(e.a,{href:\"mailto:ramu.narasinga@gmail.com\",children:\"ramu.narasinga@gmail.com\"})]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://thinkthroo.com/\",children:\"Learn the best practices used in open source.\"})}),`\n`,(0,n.jsx)(e.h1,{id:\"references\",children:(0,n.jsx)(e.strong,{children:\"References:\"})}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/gitroomhq/gitroom/blob/c03b96215fa30b267a97d7eafc2281f482a3192f/apps/frontend/src/components/platform-analytics/render.analytics.tsx#L25\",children:\"https://github.com/gitroomhq/gitroom/blob/c03b96215fa30b267a97d7eafc2281f482a3192f/apps/frontend/src/components/platform-analytics/render.analytics.tsx#L25\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/search?q=repo%3Agitroomhq%2Fgitroom+useSWR&type=code\",children:\"https://github.com/search?q=repo%3Agitroomhq%2Fgitroom%20useSWR&type=code\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://swr.vercel.app/docs/getting-started\",children:\"https://swr.vercel.app/docs/getting-started\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://react.dev/reference/react/useCallback\",children:\"https://react.dev/reference/react/useCallback\"})}),`\n`]}),`\n`]})]})}function o(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,{...a,children:(0,n.jsx)(h,{...a})}):h(a)}return v(R);})();\n;return Component;"
  },
  "_id": "blog/Cache-your-fetche.mdx",
  "_raw": {
    "sourceFilePath": "blog/Cache-your-fetche.mdx",
    "sourceFileName": "Cache-your-fetche.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/Cache-your-fetche"
  },
  "type": "Doc",
  "slug": "/blog/Cache-your-fetche",
  "slugAsParams": "Cache-your-fetche"
}
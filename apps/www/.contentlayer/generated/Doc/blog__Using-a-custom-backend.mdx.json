{
  "title": "Using a custom backend server with Next.js in a monorepo.",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\nI was searching for an open source repository that schedules and posts on social media. I found [Gitroom](https://github.com/gitroomhq/gitroom/tree/main).\n\nGitroom is a awesome, built by [Nevo David](https://github.com/nevo-david). You can 📨 schedule social media and articles. Exchange or buy posts from other members 👨🏻‍💻. Monitor your GitHub trending, and so much more 📈.\n\nThe following are some interesting things I learnt from this [repository](https://github.com/gitroomhq/gitroom/tree/main)\n\n1\\. You can use your own backend with Next.js  \n2\\. A note about customFetch  \n3\\. The way the files are named.\n\n# **1\\. You can use your own backend with Next.js**\n\n![](https://miro.medium.com/v2/resize:fit:825/1*8TB1LUyhDqT-usAkFmwAzQ.png)\n\nGitroom uses the following tech stack:\n\n* NX (Monorepo)\n    \n* NextJS (React)\n    \n* NestJS\n    \n* Prisma (Default to PostgreSQL)\n    \n* Redis\n    \n* Resend (emails notifications)\n    \n\nIt has folders named as frontend, backend, cron etc.,\n\nI wondered for quite some time now, if we could use our own backend when you are already using the Next.js, a “full stack” react framework but, I kept seeing people advising to use your custom backend when you need advanced features like cron, web sockets etc., on Reddit.\n\nNow that I found Gitroom that demonstrates the custom backend usage along with Next.js and cron, I have a good feeling that you could learn some advanced patterns studying this repository.\n\n# **2\\. A note about customFetch**\n\nThe following code snippet is picked from [apps/frontend/src/app/(site)/settings/page.tsx#L21](https://github.com/gitroomhq/gitroom/blob/e7b669f1253e3ef7ae6b9cc9d2f1d529ea86b288/apps/frontend/src/app/\\(site\\)/settings/page.tsx#L21)\n\n```plaintext\nif (searchParams.code) {\n  await internalFetch('/settings/github', {\n  method: 'POST',\n  body: JSON.stringify({ code: searchParams.code }),\n  });\n  \n  return redirect('/settings', RedirectType.replace);\n}\n```\n\n‘internalFetch’ uses customFetch.\n\nThe below code snippet is picked from [libraries/helpers/src/utils/custom.fetch.func.ts](https://github.com/gitroomhq/gitroom/blob/e7b669f1253e3ef7ae6b9cc9d2f1d529ea86b288/libraries/helpers/src/utils/custom.fetch.func.ts#L10)\n\n```plaintext\nexport const customFetch = (\n params: Params,\n auth?: string,\n showorg?: string\n ) => {\n return async function newFetch(url: string, options: RequestInit = {}) {\n   const newRequestObject = await params?.beforeRequest?.(url, options);\n   const fetchRequest = await fetch(params.baseUrl + url, {\n   credentials: 'include',\n   …(newRequestObject || options),\n   headers: {\n   …(auth ? { auth } : {}),\n   …(showorg ? { showorg } : {}),\n   …(options.body instanceof FormData\n   ? {}\n   : { 'Content-Type': 'application/json' }),\n   Accept: 'application/json',\n   …options?.headers,\n   },\n   // @ts-ignore\n   …(!options.next && options.cache !== 'force-cache'\n   ? { cache: options.cache || 'no-store' }\n   : {}),\n });\n\nif (\n !params?.afterRequest ||\n (await params?.afterRequest?.(url, options, fetchRequest))\n ) {\n   return fetchRequest;\n }\n// @ts-ignore\n   return new Promise((res) => {}) as Response;\n   };\n};\n```\n\nWhy???, I don’t know the answer yet but, I can tell there is “beforeRequest” and “afterRequest” processing happening based on the above code snippet\n\n# **3\\. The way the files are named.**\n\n![](https://miro.medium.com/v2/resize:fit:825/1*ienhHi1o5R89ivR7Xgtf6A.png)\n\nI have never seen a service file named using dots like “custom.fetch.func.ts”. Sure, there’s config files named as tailwind.config.ts etc.,\n\nHere’s what chatGPT has to say about this:  \n“  \nThis kind of naming does not fit into a traditional case style like snake\\_case, kebab-case, or camelCase.\n\nHowever, if we ignore the file extension (“.ts”) and consider only “custom.fetch.func,” it can be seen as:\n\nDot notation: This isn’t a standard case style but is sometimes used in programming to represent a hierarchical relationship or to namespace parts of a name.  \n“\n\nTo be honest, choose w/e naming conventions work for you. I use lowercase words separated by dashes as a file name, like custom-fetch-func.ts\n\n![](https://miro.medium.com/v2/resize:fit:875/1*47EKz3q3aUidRrzxVGAjLg.png)\n\n> [*Get free courses inspired by the best practices used in open source.*](https://app.thinkthroo.com/best-practices)\n\n# **About me:**\n\nHey, my name is [**Ramu Narasinga**](https://ramunarasinga.com/). I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\n\n***I am open to work on interesting projects. Send me an email at*** [***ramu.narasinga@gmail.com***](mailto:ramu.narasinga@gmail.com)\n\nMy Github — [**https://github.com/ramu-narasinga**](https://github.com/ramu-narasinga)\n\nMy website — [**https://ramunarasinga.com**](https://ramunarasinga.com/)\n\nMy Youtube channel — [**https://www.youtube.com/@thinkthroo**](https://www.youtube.com/@thinkthroo)\n\nLearning platform — [**https://thinkthroo.com**](https://thinkthroo.com/)\n\nCodebase Architecture — [**https://app.thinkthroo.com/architecture**](https://app.thinkthroo.com/architecture)\n\nBest practices — [**https://app.thinkthroo.com/best-practices**](https://app.thinkthroo.com/best-practices)\n\nProduction-grade projects — [**https://app.thinkthroo.com/production-grade-projects**](https://app.thinkthroo.com/production-grade-projects)\n\n# **Resources:**\n\n1\\. https://github.com/gitroomhq/gitroom/blob/e7b669f1253e3ef7ae6b9cc9d2f1d529ea86b288/libraries/helpers/src/utils/internal.fetch.ts#L4",
    "code": "var Component=(()=>{var p=Object.create;var r=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var b=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),w=(a,e)=>{for(var s in e)r(a,s,{get:e[s],enumerable:!0})},c=(a,e,s,t)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of u(e))!f.call(a,i)&&i!==s&&r(a,i,{get:()=>e[i],enumerable:!(t=m(e,i))||t.enumerable});return a};var N=(a,e,s)=>(s=a!=null?p(g(a)):{},c(e||!a||!a.__esModule?r(s,\"default\",{value:a,enumerable:!0}):s,a)),y=a=>c(r({},\"__esModule\",{value:!0}),a);var h=b((q,l)=>{l.exports=_jsx_runtime});var x={};w(x,{default:()=>d,frontmatter:()=>k});var n=N(h()),k={title:\"Using a custom backend server with Next.js in a monorepo.\"};function o(a){let e={a:\"a\",blockquote:\"blockquote\",br:\"br\",code:\"code\",div:\"div\",em:\"em\",h1:\"h1\",img:\"img\",li:\"li\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",ul:\"ul\",...a.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"I was searching for an open source repository that schedules and posts on social media. I found \",(0,n.jsx)(e.a,{href:\"https://github.com/gitroomhq/gitroom/tree/main\",children:\"Gitroom\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Gitroom is a awesome, built by \",(0,n.jsx)(e.a,{href:\"https://github.com/nevo-david\",children:\"Nevo David\"}),\". You can \\u{1F4E8} schedule social media and articles. Exchange or buy posts from other members \\u{1F468}\\u{1F3FB}\\u200D\\u{1F4BB}. Monitor your GitHub trending, and so much more \\u{1F4C8}.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The following are some interesting things I learnt from this \",(0,n.jsx)(e.a,{href:\"https://github.com/gitroomhq/gitroom/tree/main\",children:\"repository\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"1. You can use your own backend with Next.js\",(0,n.jsx)(e.br,{}),`\n`,\"2. A note about customFetch\",(0,n.jsx)(e.br,{}),`\n`,\"3. The way the files are named.\"]}),`\n`,(0,n.jsx)(e.h1,{id:\"1-you-can-use-your-own-backend-with-nextjs\",children:(0,n.jsx)(e.strong,{children:\"1. You can use your own backend with Next.js\"})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:825/1*8TB1LUyhDqT-usAkFmwAzQ.png\",alt:\"\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Gitroom uses the following tech stack:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"NX (Monorepo)\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"NextJS (React)\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"NestJS\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Prisma (Default to PostgreSQL)\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Redis\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Resend (emails notifications)\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"It has folders named as frontend, backend, cron etc.,\"}),`\n`,(0,n.jsx)(e.p,{children:\"I wondered for quite some time now, if we could use our own backend when you are already using the Next.js, a \\u201Cfull stack\\u201D react framework but, I kept seeing people advising to use your custom backend when you need advanced features like cron, web sockets etc., on Reddit.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Now that I found Gitroom that demonstrates the custom backend usage along with Next.js and cron, I have a good feeling that you could learn some advanced patterns studying this repository.\"}),`\n`,(0,n.jsx)(e.h1,{id:\"2-a-note-about-customfetch\",children:(0,n.jsx)(e.strong,{children:\"2. A note about customFetch\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The following code snippet is picked from \",(0,n.jsx)(e.a,{href:\"https://github.com/gitroomhq/gitroom/blob/e7b669f1253e3ef7ae6b9cc9d2f1d529ea86b288/apps/frontend/src/app/(site)/settings/page.tsx#L21\",children:\"apps/frontend/src/app/(site)/settings/page.tsx#L21\"})]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"if (searchParams.code) {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  await internalFetch('/settings/github', {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  method: 'POST',\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  body: JSON.stringify({ code: searchParams.code }),\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  });\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  \"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  return redirect('/settings', RedirectType.replace);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"\\u2018internalFetch\\u2019 uses customFetch.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The below code snippet is picked from \",(0,n.jsx)(e.a,{href:\"https://github.com/gitroomhq/gitroom/blob/e7b669f1253e3ef7ae6b9cc9d2f1d529ea86b288/libraries/helpers/src/utils/custom.fetch.func.ts#L10\",children:\"libraries/helpers/src/utils/custom.fetch.func.ts\"})]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"export const customFetch = (\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" params: Params,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" auth?: string,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" showorg?: string\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" ) => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" return async function newFetch(url: string, options: RequestInit = {}) {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"   const newRequestObject = await params?.beforeRequest?.(url, options);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"   const fetchRequest = await fetch(params.baseUrl + url, {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"   credentials: 'include',\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"   \\u2026(newRequestObject || options),\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"   headers: {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"   \\u2026(auth ? { auth } : {}),\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"   \\u2026(showorg ? { showorg } : {}),\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"   \\u2026(options.body instanceof FormData\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"   ? {}\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"   : { 'Content-Type': 'application/json' }),\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"   Accept: 'application/json',\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"   \\u2026options?.headers,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"   },\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"   // @ts-ignore\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"   \\u2026(!options.next && options.cache !== 'force-cache'\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"   ? { cache: options.cache || 'no-store' }\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"   : {}),\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" });\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"if (\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" !params?.afterRequest ||\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" (await params?.afterRequest?.(url, options, fetchRequest))\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" ) {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"   return fetchRequest;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" }\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"// @ts-ignore\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"   return new Promise((res) => {}) as Response;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"   };\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"};\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"Why???, I don\\u2019t know the answer yet but, I can tell there is \\u201CbeforeRequest\\u201D and \\u201CafterRequest\\u201D processing happening based on the above code snippet\"}),`\n`,(0,n.jsx)(e.h1,{id:\"3-the-way-the-files-are-named\",children:(0,n.jsx)(e.strong,{children:\"3. The way the files are named.\"})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:825/1*ienhHi1o5R89ivR7Xgtf6A.png\",alt:\"\"})}),`\n`,(0,n.jsx)(e.p,{children:\"I have never seen a service file named using dots like \\u201Ccustom.fetch.func.ts\\u201D. Sure, there\\u2019s config files named as tailwind.config.ts etc.,\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Here\\u2019s what chatGPT has to say about this:\",(0,n.jsx)(e.br,{}),`\n`,\"\\u201C\",(0,n.jsx)(e.br,{}),`\n`,\"This kind of naming does not fit into a traditional case style like snake_case, kebab-case, or camelCase.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"However, if we ignore the file extension (\\u201C.ts\\u201D) and consider only \\u201Ccustom.fetch.func,\\u201D it can be seen as:\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Dot notation: This isn\\u2019t a standard case style but is sometimes used in programming to represent a hierarchical relationship or to namespace parts of a name.\",(0,n.jsx)(e.br,{}),`\n`,\"\\u201C\"]}),`\n`,(0,n.jsx)(e.p,{children:\"To be honest, choose w/e naming conventions work for you. I use lowercase words separated by dashes as a file name, like custom-fetch-func.ts\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:875/1*47EKz3q3aUidRrzxVGAjLg.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/best-practices\",children:(0,n.jsx)(e.em,{children:\"Get free courses inspired by the best practices used in open source.\"})})}),`\n`]}),`\n`,(0,n.jsx)(e.h1,{id:\"about-me\",children:(0,n.jsx)(e.strong,{children:\"About me:\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Hey, my name is \",(0,n.jsx)(e.a,{href:\"https://ramunarasinga.com/\",children:(0,n.jsx)(e.strong,{children:\"Ramu Narasinga\"})}),\". I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:(0,n.jsx)(e.strong,{children:\"I am open to work on interesting projects. Send me an email at\"})}),\" \",(0,n.jsx)(e.a,{href:\"mailto:ramu.narasinga@gmail.com\",children:(0,n.jsx)(e.em,{children:(0,n.jsx)(e.strong,{children:\"ramu.narasinga@gmail.com\"})})})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Github\\u200A\\u2014\\u200A\",(0,n.jsx)(e.a,{href:\"https://github.com/ramu-narasinga\",children:(0,n.jsx)(e.strong,{children:\"https://github.com/ramu-narasinga\"})})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My website\\u200A\\u2014\\u200A\",(0,n.jsx)(e.a,{href:\"https://ramunarasinga.com/\",children:(0,n.jsx)(e.strong,{children:\"https://ramunarasinga.com\"})})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Youtube channel\\u200A\\u2014\\u200A\",(0,n.jsx)(e.a,{href:\"https://www.youtube.com/@thinkthroo\",children:(0,n.jsx)(e.strong,{children:\"https://www.youtube.com/@thinkthroo\"})})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Learning platform\\u200A\\u2014\\u200A\",(0,n.jsx)(e.a,{href:\"https://thinkthroo.com/\",children:(0,n.jsx)(e.strong,{children:\"https://thinkthroo.com\"})})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Codebase Architecture\\u200A\\u2014\\u200A\",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/architecture\",children:(0,n.jsx)(e.strong,{children:\"https://app.thinkthroo.com/architecture\"})})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Best practices\\u200A\\u2014\\u200A\",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/best-practices\",children:(0,n.jsx)(e.strong,{children:\"https://app.thinkthroo.com/best-practices\"})})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Production-grade projects\\u200A\\u2014\\u200A\",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/production-grade-projects\",children:(0,n.jsx)(e.strong,{children:\"https://app.thinkthroo.com/production-grade-projects\"})})]}),`\n`,(0,n.jsx)(e.h1,{id:\"resources\",children:(0,n.jsx)(e.strong,{children:\"Resources:\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"1. \",(0,n.jsx)(e.a,{href:\"https://github.com/gitroomhq/gitroom/blob/e7b669f1253e3ef7ae6b9cc9d2f1d529ea86b288/libraries/helpers/src/utils/internal.fetch.ts#L4\",children:\"https://github.com/gitroomhq/gitroom/blob/e7b669f1253e3ef7ae6b9cc9d2f1d529ea86b288/libraries/helpers/src/utils/internal.fetch.ts#L4\"})]})]})}function d(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,{...a,children:(0,n.jsx)(o,{...a})}):o(a)}return y(x);})();\n;return Component;"
  },
  "_id": "blog/Using-a-custom-backend.mdx",
  "_raw": {
    "sourceFilePath": "blog/Using-a-custom-backend.mdx",
    "sourceFileName": "Using-a-custom-backend.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/Using-a-custom-backend"
  },
  "type": "Doc",
  "slug": "/blog/Using-a-custom-backend",
  "slugAsParams": "Using-a-custom-backend"
}
{
  "title": "useMemo usage in Documenso, an open-source Docusign alternative.\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\nIn this article, we analyse few arrow functions found in open source projects that are passed in as a parameter to useMemo or useCallback. I found these below list of functions in the wild, there could be more use cases but let’s control our sample size for this analysis.\r\n\r\n### useMemo and the arrow function\r\n\r\nLet’s first understand what a useMemo is. useMemo is a React Hook that lets you cache the result of a calculation between re-renders.\r\n\r\n```plaintext\r\nconst cachedValue = useMemo(calculateValue, dependencies)\r\n```\r\n\r\nRead more about [useMemo](https://react.dev/reference/react/useMemo). React docs provides some great examples such as\r\n\r\n* [Skipping expensive recalculations](https://react.dev/reference/react/useMemo#skipping-expensive-recalculations)\r\n    \r\n* [Skipping re-rendering of components](https://react.dev/reference/react/useMemo#skipping-re-rendering-of-components)\r\n    \r\n* [Preventing an Effect from firing too often](https://react.dev/reference/react/useMemo#preventing-an-effect-from-firing-too-often)\r\n    \r\n* [Memoizing a dependency of another Hook](https://react.dev/reference/react/useMemo#memoizing-a-dependency-of-another-hook)\r\n    \r\n* [Memoizing a function](https://react.dev/reference/react/useMemo#memoizing-a-function)\r\n    \r\n\r\n#### useMemo in Documenso\r\n\r\n[Documenso](https://github.com/documenso/documenso/blob/main/apps/web/src/app/%28dashboard%29/documents/upload-document.tsx#L48) is as an open-source Docusign alternative. I have to admit, Documenso is good!!! I like its user interface and the best part is this is open-source and built using Next.js. You can read their source code to learn best practices such as uploading files, rendering pdf with quality in Next.js and so much more. I have added this repository to my collection to study in depth and hopefully produce some articles like this one in the future.\r\n\r\nAt [line 48 in upload-document.tsx](https://github.com/documenso/documenso/blob/main/apps/web/src/app/%28dashboard%29/documents/upload-document.tsx#L48), you will find the below code snippet.\r\n\r\n```plaintext\r\nconst disabledMessage = useMemo(() => {\r\n    if (remaining.documents === 0) {\r\n      return team\r\n        ? msg`Document upload disabled due to unpaid invoices`\r\n        : msg`You have reached your document limit.`;\r\n    }\r\n\r\n    if (!session?.user.emailVerified) {\r\n      return msg`Verify your email to upload documents.`;\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n}, [remaining.documents, session?.user.emailVerified, team]);\r\n```\r\n\r\nIn this case, results are cached based on these below values between re-renders:\r\n\r\n* remaining.documents\r\n    \r\n* session?.user.emailVerified\r\n    \r\n* team\r\n    \r\n\r\n#### useMemo in Tisqleditor\r\n\r\n[tisqleditor](https://github.com/tidbcloud/tisqleditor/tree/main) is a codeMirror6 based SQL code editor which is used in TiDB Cloud Console. I am not sure what a TiDB cloud console is but we are interested in useMemo with arrow function as its parameter.\r\n\r\n```plaintext\r\nconst activeFile = useMemo(\r\n    () => openedFiles.find((f) => f.id === activeFileId),\r\n    [activeFileId, openedFiles]\r\n)\r\n```\r\n\r\nIn the above image, you will find that activeFile is assigned the value returned by useMemo call that has two dependencies. activeFileId, openedFiles. This means activeFile results are cached between re-renders.\r\n\r\n[React docs](https://react.dev/reference/react/useMemo#memoizing-a-function) says that —   \r\n“  \r\nJust as {} creates a different object, function declarations like function() {} and expressions like () =&gt; {} produce a different function on every re-render. By itself, creating a new function is not a problem. This is not something to avoid! However, if the Form component is memoized, presumably you want to skip re-rendering it when no props have changed. A prop that is always different would defeat the point of memoization.  \r\n“\r\n\r\nAt this point, it is also worth mentioning useCallback.\r\n\r\n### useCallback\r\n\r\nThis below explanation is picked from [React documentation](https://react.dev/reference/react/useMemo#memoizing-a-dependency-of-another-hook).\r\n\r\nTo memoize a function with useMemo, your calculation function would have to return another function:\r\n\r\n```plaintext\r\nexport default function Page({ productId, referrer }) {\r\n  \r\n  const handleSubmit = useMemo(() => {\r\n       return (orderDetails) => {\r\n         post('/product/' + productId + '/buy', {\r\n         referrer,\r\n         orderDetails\r\n       });\r\n      };\r\n     }, [productId, referrer]);\r\n   \r\n  return <Form onSubmit={handleSubmit} />;\r\n}\r\n```\r\n\r\nThis looks clunky! Memoizing functions is common enough that React has a built-in Hook specifically for that. Wrap your functions into useCallback instead of useMemo to avoid having to write an extra nested function:\r\n\r\n```plaintext\r\nexport default function Page({ productId, referrer }) {\r\n \r\n  const handleSubmit = useCallback((orderDetails) => {\r\n \r\n    post('/product/' + productId + '/buy', {\r\n       referrer,\r\n       orderDetails\r\n     });\r\n    }, [productId, referrer]);\r\n    \r\n    return <Form onSubmit={handleSubmit} />;\r\n}\r\n```\r\n\r\nThe two examples above are completely equivalent. The only benefit to useCallback is that it lets you avoid writing an extra nested function inside. It doesn’t do anything else. [Read more about useCallback](https://react.dev/reference/react/useCallback).\r\n\r\n#### useCallback usage in Postiz\r\n\r\n[Postiz](https://postiz.com/) is an open-source social media scheduling tool.\r\n\r\nAt [line 147 in messages.tsx](https://github.com/gitroomhq/postiz-app/blob/e3bd1df158d272190ae90aef48cea6ee17142da2/apps/frontend/src/components/messages/messages.tsx#L147), you will find the below code snippet.\r\n\r\n```plaintext\r\nconst Page: FC<{ page: number; group: string; refChange: any }> = (props) => {\r\n  const { page, group, refChange } = props;\r\n  const fetch = useFetch();\r\n  const { message } = useContext(MarketplaceProvider);\r\n  const visible = usePageVisibility(page);\r\n\r\n  const loadMessages = useCallback(async () => {\r\n    return await (await fetch(`/messages/${group}/${page}`)).json();\r\n  }, []);\r\n```\r\n\r\nloadMessages contains a cached result except it does not contain any dependencies. Interesting. The component in which this function is defined has the following signature:\r\n\r\n```plaintext\r\nconst Page: FC<{ page: number; group: string; refChange: any }> = (props) => {\r\n```\r\n\r\n# **About me:**\r\n\r\nHey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\r\n\r\nI am open to work on interesting projects. Send me an email at ramu.narasinga@gmail.com\r\n\r\nMy Github — [https://github.com/ramu-narasinga](https://github.com/ramu-narasinga)\r\n\r\nMy website — [https://ramunarasinga.com](https://ramunarasinga.com/)\r\n\r\nMy Youtube channel — [https://www.youtube.com/@thinkthroo](https://www.youtube.com/@thinkthroo)\r\n\r\nLearning platform — [https://thinkthroo.com](https://thinkthroo.com/)\r\n\r\nCodebase Architecture — [https://app.thinkthroo.com/architecture](https://app.thinkthroo.com/architecture)\r\n\r\nBest practices — [https://app.thinkthroo.com/best-practices](https://app.thinkthroo.com/best-practices)\r\n\r\nProduction-grade projects — [https://app.thinkthroo.com/production-grade-projects](https://app.thinkthroo.com/production-grade-projects)\r\n\r\n### References\r\n\r\n1. [https://github.com/tidbcloud/tisqleditor/blob/main/packages/playground-nextjs/app/playground/editor-panel/editor.tsx#L78](https://github.com/tidbcloud/tisqleditor/blob/main/packages/playground-nextjs/app/playground/editor-panel/editor.tsx#L78)\r\n    \r\n2. [https://github.com/documenso/documenso/blob/main/apps/web/src/app/(dashboard)/documents/upload-document.tsx#L48](https://github.com/documenso/documenso/blob/main/apps/web/src/app/%28dashboard%29/documents/upload-document.tsx#L48)\r\n    \r\n3. [https://github.com/gitroomhq/postiz-app/blob/e3bd1df158d272190ae90aef48cea6ee17142da2/apps/frontend/src/components/messages/layout.tsx#L19](https://github.com/gitroomhq/postiz-app/blob/e3bd1df158d272190ae90aef48cea6ee17142da2/apps/frontend/src/components/messages/layout.tsx#L19)\r\n    \r\n4. [https://github.com/search?q=repo%3Agitroomhq%2Fpostiz-app%20useCallback&type=code](https://github.com/search?q=repo%3Agitroomhq%2Fpostiz-app%20useCallback&type=code)\r\n    \r\n5. [https://github.com/gitroomhq/postiz-app/blob/e3bd1df158d272190ae90aef48cea6ee17142da2/apps/frontend/src/components/messages/messages.tsx#L147](https://github.com/gitroomhq/postiz-app/blob/e3bd1df158d272190ae90aef48cea6ee17142da2/apps/frontend/src/components/messages/messages.tsx#L147)\r\n    \r\n6. https://react.dev/reference/react/useMemo#memoizing-a-function",
    "code": "var Component=(()=>{var p=Object.create;var s=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var b=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),y=(a,e)=>{for(var i in e)s(a,i,{get:e[i],enumerable:!0})},c=(a,e,i,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of m(e))!g.call(a,t)&&t!==i&&s(a,t,{get:()=>e[t],enumerable:!(r=u(e,t))||r.enumerable});return a};var N=(a,e,i)=>(i=a!=null?p(f(a)):{},c(e||!a||!a.__esModule?s(i,\"default\",{value:a,enumerable:!0}):i,a)),v=a=>c(s({},\"__esModule\",{value:!0}),a);var d=b((M,l)=>{l.exports=_jsx_runtime});var x={};y(x,{default:()=>h,frontmatter:()=>w});var n=N(d()),w={title:\"useMemo usage in Documenso, an open-source Docusign alternative.\"};function o(a){let e={a:\"a\",br:\"br\",code:\"code\",div:\"div\",h1:\"h1\",h3:\"h3\",h4:\"h4\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",ul:\"ul\",...a.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"In this article, we analyse few arrow functions found in open source projects that are passed in as a parameter to useMemo or useCallback. I found these below list of functions in the wild, there could be more use cases but let\\u2019s control our sample size for this analysis.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"usememo-and-the-arrowfunction\",children:\"useMemo and the arrow\\xA0function\"}),`\n`,(0,n.jsx)(e.p,{children:\"Let\\u2019s first understand what a useMemo is. useMemo is a React Hook that lets you cache the result of a calculation between re-renders.\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsx)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const cachedValue = useMemo(calculateValue, dependencies)\"})})})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Read more about \",(0,n.jsx)(e.a,{href:\"https://react.dev/reference/react/useMemo\",children:\"useMemo\"}),\". React docs provides some great examples such as\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://react.dev/reference/react/useMemo#skipping-expensive-recalculations\",children:\"Skipping expensive recalculations\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://react.dev/reference/react/useMemo#skipping-re-rendering-of-components\",children:\"Skipping re-rendering of components\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://react.dev/reference/react/useMemo#preventing-an-effect-from-firing-too-often\",children:\"Preventing an Effect from firing too often\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://react.dev/reference/react/useMemo#memoizing-a-dependency-of-another-hook\",children:\"Memoizing a dependency of another Hook\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://react.dev/reference/react/useMemo#memoizing-a-function\",children:\"Memoizing a function\"})}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h4,{id:\"usememo-in-documenso\",children:\"useMemo in Documenso\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/documenso/documenso/blob/main/apps/web/src/app/%28dashboard%29/documents/upload-document.tsx#L48\",children:\"Documenso\"}),\" is as an open-source Docusign alternative. I have to admit, Documenso is good!!! I like its user interface and the best part is this is open-source and built using Next.js. You can read their source code to learn best practices such as uploading files, rendering pdf with quality in Next.js and so much more. I have added this repository to my collection to study in depth and hopefully produce some articles like this one in the future.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"At \",(0,n.jsx)(e.a,{href:\"https://github.com/documenso/documenso/blob/main/apps/web/src/app/%28dashboard%29/documents/upload-document.tsx#L48\",children:\"line 48 in upload-document.tsx\"}),\", you will find the below code snippet.\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const disabledMessage = useMemo(() => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    if (remaining.documents === 0) {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      return team\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        ? msg`Document upload disabled due to unpaid invoices`\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        : msg`You have reached your document limit.`;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    }\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    if (!session?.user.emailVerified) {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      return msg`Verify your email to upload documents.`;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    }\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    // eslint-disable-next-line react-hooks/exhaustive-deps\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}, [remaining.documents, session?.user.emailVerified, team]);\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"In this case, results are cached based on these below values between re-renders:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"remaining.documents\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"session?.user.emailVerified\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"team\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h4,{id:\"usememo-in-tisqleditor\",children:\"useMemo in Tisqleditor\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/tidbcloud/tisqleditor/tree/main\",children:\"tisqleditor\"}),\" is a codeMirror6 based SQL code editor which is used in TiDB Cloud Console. I am not sure what a TiDB cloud console is but we are interested in useMemo with arrow function as its parameter.\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const activeFile = useMemo(\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    () => openedFiles.find((f) => f.id === activeFileId),\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    [activeFileId, openedFiles]\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\")\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"In the above image, you will find that activeFile is assigned the value returned by useMemo call that has two dependencies. activeFileId, openedFiles. This means activeFile results are cached between re-renders.\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://react.dev/reference/react/useMemo#memoizing-a-function\",children:\"React docs\"}),\" says that\\u200A\\u2014\\u200A\",(0,n.jsx)(e.br,{}),`\n`,\"\\u201C\",(0,n.jsx)(e.br,{}),`\n`,\"Just as \",\" creates a different object, function declarations like function() \",\" and expressions like () => \",\" produce a different function on every re-render. By itself, creating a new function is not a problem. This is not something to avoid! However, if the Form component is memoized, presumably you want to skip re-rendering it when no props have changed. A prop that is always different would defeat the point of memoization.\",(0,n.jsx)(e.br,{}),`\n`,\"\\u201C\"]}),`\n`,(0,n.jsx)(e.p,{children:\"At this point, it is also worth mentioning useCallback.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"usecallback\",children:\"useCallback\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"This below explanation is picked from \",(0,n.jsx)(e.a,{href:\"https://react.dev/reference/react/useMemo#memoizing-a-dependency-of-another-hook\",children:\"React documentation\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"To memoize a function with useMemo, your calculation function would have to return another function:\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"export default function Page({ productId, referrer }) {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  \"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const handleSubmit = useMemo(() => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"       return (orderDetails) => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"         post('/product/' + productId + '/buy', {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"         referrer,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"         orderDetails\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"       });\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      };\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"     }, [productId, referrer]);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"   \"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  return <Form onSubmit={handleSubmit} />;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"This looks clunky! Memoizing functions is common enough that React has a built-in Hook specifically for that. Wrap your functions into useCallback instead of useMemo to avoid having to write an extra nested function:\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"export default function Page({ productId, referrer }) {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" \"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const handleSubmit = useCallback((orderDetails) => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" \"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    post('/product/' + productId + '/buy', {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"       referrer,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"       orderDetails\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"     });\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    }, [productId, referrer]);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    \"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    return <Form onSubmit={handleSubmit} />;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The two examples above are completely equivalent. The only benefit to useCallback is that it lets you avoid writing an extra nested function inside. It doesn\\u2019t do anything else. \",(0,n.jsx)(e.a,{href:\"https://react.dev/reference/react/useCallback\",children:\"Read more about useCallback\"}),\".\"]}),`\n`,(0,n.jsx)(e.h4,{id:\"usecallback-usage-inpostiz\",children:\"useCallback usage in\\xA0Postiz\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://postiz.com/\",children:\"Postiz\"}),\" is an open-source social media scheduling tool.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"At \",(0,n.jsx)(e.a,{href:\"https://github.com/gitroomhq/postiz-app/blob/e3bd1df158d272190ae90aef48cea6ee17142da2/apps/frontend/src/components/messages/messages.tsx#L147\",children:\"line 147 in messages.tsx\"}),\", you will find the below code snippet.\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const Page: FC<{ page: number; group: string; refChange: any }> = (props) => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const { page, group, refChange } = props;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const fetch = useFetch();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const { message } = useContext(MarketplaceProvider);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const visible = usePageVisibility(page);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const loadMessages = useCallback(async () => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    return await (await fetch(`/messages/${group}/${page}`)).json();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  }, []);\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"loadMessages contains a cached result except it does not contain any dependencies. Interesting. The component in which this function is defined has the following signature:\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsx)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const Page: FC<{ page: number; group: string; refChange: any }> = (props) => {\"})})})})}),`\n`,(0,n.jsx)(e.h1,{id:\"about-me\",children:(0,n.jsx)(e.strong,{children:\"About me:\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Hey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"I am open to work on interesting projects. Send me an email at \",(0,n.jsx)(e.a,{href:\"mailto:ramu.narasinga@gmail.com\",children:\"ramu.narasinga@gmail.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Github \\u2014 \",(0,n.jsx)(e.a,{href:\"https://github.com/ramu-narasinga\",children:\"https://github.com/ramu-narasinga\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My website \\u2014 \",(0,n.jsx)(e.a,{href:\"https://ramunarasinga.com/\",children:\"https://ramunarasinga.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Youtube channel \\u2014 \",(0,n.jsx)(e.a,{href:\"https://www.youtube.com/@thinkthroo\",children:\"https://www.youtube.com/@thinkthroo\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Learning platform \\u2014 \",(0,n.jsx)(e.a,{href:\"https://thinkthroo.com/\",children:\"https://thinkthroo.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Codebase Architecture \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/architecture\",children:\"https://app.thinkthroo.com/architecture\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Best practices \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/best-practices\",children:\"https://app.thinkthroo.com/best-practices\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Production-grade projects \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/production-grade-projects\",children:\"https://app.thinkthroo.com/production-grade-projects\"})]}),`\n`,(0,n.jsx)(e.h3,{id:\"references\",children:\"References\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/tidbcloud/tisqleditor/blob/main/packages/playground-nextjs/app/playground/editor-panel/editor.tsx#L78\",children:\"https://github.com/tidbcloud/tisqleditor/blob/main/packages/playground-nextjs/app/playground/editor-panel/editor.tsx#L78\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/documenso/documenso/blob/main/apps/web/src/app/%28dashboard%29/documents/upload-document.tsx#L48\",children:\"https://github.com/documenso/documenso/blob/main/apps/web/src/app/(dashboard)/documents/upload-document.tsx#L48\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/gitroomhq/postiz-app/blob/e3bd1df158d272190ae90aef48cea6ee17142da2/apps/frontend/src/components/messages/layout.tsx#L19\",children:\"https://github.com/gitroomhq/postiz-app/blob/e3bd1df158d272190ae90aef48cea6ee17142da2/apps/frontend/src/components/messages/layout.tsx#L19\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/search?q=repo%3Agitroomhq%2Fpostiz-app%20useCallback&type=code\",children:\"https://github.com/search?q=repo%3Agitroomhq%2Fpostiz-app%20useCallback&type=code\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/gitroomhq/postiz-app/blob/e3bd1df158d272190ae90aef48cea6ee17142da2/apps/frontend/src/components/messages/messages.tsx#L147\",children:\"https://github.com/gitroomhq/postiz-app/blob/e3bd1df158d272190ae90aef48cea6ee17142da2/apps/frontend/src/components/messages/messages.tsx#L147\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://react.dev/reference/react/useMemo#memoizing-a-function\",children:\"https://react.dev/reference/react/useMemo#memoizing-a-function\"})}),`\n`]}),`\n`]})]})}function h(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,{...a,children:(0,n.jsx)(o,{...a})}):o(a)}return v(x);})();\n;return Component;"
  },
  "_id": "blog/usememo-usage-in-documenso.mdx",
  "_raw": {
    "sourceFilePath": "blog/usememo-usage-in-documenso.mdx",
    "sourceFileName": "usememo-usage-in-documenso.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/usememo-usage-in-documenso"
  },
  "type": "Doc",
  "slug": "/blog/usememo-usage-in-documenso",
  "slugAsParams": "usememo-usage-in-documenso"
}
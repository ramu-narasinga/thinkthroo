{
  "title": "Organize your components and layouts in your pages-based Next.js application this way.\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\nWhen building a Next.js application, organizing your components and layouts efficiently is crucial for maintaining a clean, scalable codebase. In this blog post, we will look at a practical example of structuring your components and layouts using a page-based approach, inspired by [Supabase’s codebase](https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx).\r\n\r\n# **Understanding the Page-Based Approach**\r\n\r\nNext.js uses a pages directory where each file corresponds to a route in your application. This structure is intuitive, but as your app grows, it is very important to organize components and layouts in a way that promotes reusability and clarity.\r\n\r\n## **Example: Sign-In Page Structure**\r\n\r\nLet’s look at real-world example by examining the structure of a `SignInPage` component in [Supabase source code](https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx).\r\n\r\n![](https://miro.medium.com/v2/resize:fit:875/1*CK6fCYcelMlQct4ofriCoQ.png)\r\n\r\n> *We are building a platform that teaches best practices, drawing inspiration from the open-source community.* [*Give us a star on Github*](https://github.com/thinkthroo/thinkthroo)*.*\r\n\r\n# **Components and Layouts: A Clear Separation**\r\n\r\nNotice how the components and layouts are organized:\r\n\r\n* `components/interfaces/SignIn/SignInForm`: This directory holds the `SignInForm` component, specifically related to the Sign-In interface. By organizing components within a relevant interface folder, you ensure that related components are grouped together, making them easier to find and manage.\r\n    \r\n* `components/layouts/SignInLayout/SignInLayout`: The `SignInLayout` component is separated into its own layout directory. This keeps the layout logic distinct from the individual components, allowing you to reuse the layout across different pages.\r\n    \r\n* `lib/constants`: The `IS_PLATFORM` constant is imported from a centralized location. This is a good practice for managing global constants that might be used across multiple components.\r\n    \r\n\r\n[![](https://miro.medium.com/v2/resize:fit:875/0*QlUA8-jvrCQnSBIJ.png)](https://app.thinkthroo.com/best-practices)\r\n\r\nIn fact, [Supabase component folder](https://github.com/supabase/supabase/tree/master/apps/studio/components) has a good explanation about this approach.\r\n\r\n[![](https://miro.medium.com/v2/resize:fit:875/1*KFOZ9Dwmp4G8vMvITn9C2Q.png)](https://github.com/supabase/supabase/tree/master/apps/studio/components)\r\n\r\n# **Adding the Layout**\r\n\r\nOne of the strengths of Next.js is its ability to define layouts on a [per-page basis](https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts#per-page-layouts). The `SignInPage` component is wrapped in a `SignInLayout` that defines the overall structure of the page:\r\n\r\n```plaintext\r\nSignInPage.getLayout = (page) => (\r\n  <SignInLayout\r\n    heading=\"Welcome back\"\r\n    subheading=\"Sign in to your account\"\r\n    logoLinkToMarketingSite={true}\r\n  >\r\n    {page}\r\n  </SignInLayout>\r\n)\r\n\r\nexport default SignInPage\r\n```\r\n\r\n# **Conclusion**\r\n\r\nOrganizing your components and layouts in a pages-based Next.js application this way promotes a clean, scalable structure. By grouping related components and separating layout logic, you create a maintainable codebase that’s easy to extend as your application grows.\r\n\r\n# **About me:**\r\n\r\nHey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\r\n\r\nI am open to work on interesting projects. Send me an email at ramu.narasinga@gmail.com\r\n\r\nMy Github — [https://github.com/ramu-narasinga](https://github.com/ramu-narasinga)\r\n\r\nMy website — [https://ramunarasinga.com](https://ramunarasinga.com/)\r\n\r\nMy Youtube channel — [https://www.youtube.com/@thinkthroo](https://www.youtube.com/@thinkthroo)\r\n\r\nLearning platform — [https://thinkthroo.com](https://thinkthroo.com/)\r\n\r\nCodebase Architecture — [https://app.thinkthroo.com/architecture](https://app.thinkthroo.com/architecture)\r\n\r\nBest practices — [https://app.thinkthroo.com/best-practices](https://app.thinkthroo.com/best-practices)\r\n\r\nProduction-grade projects — [https://app.thinkthroo.com/production-grade-projects](https://app.thinkthroo.com/production-grade-projects)\r\n\r\n# **Further reading:**\r\n\r\n1. [https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx](https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx)\r\n    \r\n2. [https://github.com/supabase/supabase/tree/master/apps/studio/components/interfaces](https://github.com/supabase/supabase/tree/master/apps/studio/components/interfaces)\r\n    \r\n3. [https://github.com/supabase/supabase/tree/master/apps/studio/components/layouts](https://github.com/supabase/supabase/tree/master/apps/studio/components/layouts)\r\n    \r\n4. [https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts#per-page-layouts](https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts#per-page-layouts)\r\n",
    "code": "var Component=(()=>{var d=Object.create;var s=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var y=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),f=(a,e)=>{for(var t in e)s(a,t,{get:e[t],enumerable:!0})},o=(a,e,t,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of g(e))!b.call(a,i)&&i!==t&&s(a,i,{get:()=>e[i],enumerable:!(r=u(e,i))||r.enumerable});return a};var x=(a,e,t)=>(t=a!=null?d(m(a)):{},o(e||!a||!a.__esModule?s(t,\"default\",{value:a,enumerable:!0}):t,a)),w=a=>o(s({},\"__esModule\",{value:!0}),a);var p=y((j,c)=>{c.exports=_jsx_runtime});var k={};f(k,{default:()=>l,frontmatter:()=>S});var n=x(p()),S={title:\"Organize your components and layouts in your pages-based Next.js application this way.\"};function h(a){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",div:\"div\",em:\"em\",h1:\"h1\",h2:\"h2\",img:\"img\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",ul:\"ul\",...a.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"When building a Next.js application, organizing your components and layouts efficiently is crucial for maintaining a clean, scalable codebase. In this blog post, we will look at a practical example of structuring your components and layouts using a page-based approach, inspired by \",(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx\",children:\"Supabase\\u2019s codebase\"}),\".\"]}),`\n`,(0,n.jsx)(e.h1,{id:\"understanding-the-page-based-approach\",children:(0,n.jsx)(e.strong,{children:\"Understanding the Page-Based Approach\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Next.js uses a pages directory where each file corresponds to a route in your application. This structure is intuitive, but as your app grows, it is very important to organize components and layouts in a way that promotes reusability and clarity.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"example-sign-in-page-structure\",children:(0,n.jsx)(e.strong,{children:\"Example: Sign-In Page Structure\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Let\\u2019s look at real-world example by examining the structure of a \",(0,n.jsx)(e.code,{children:\"SignInPage\"}),\" component in \",(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx\",children:\"Supabase source code\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:875/1*CK6fCYcelMlQct4ofriCoQ.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:\"We are building a platform that teaches best practices, drawing inspiration from the open-source community.\"}),\" \",(0,n.jsx)(e.a,{href:\"https://github.com/thinkthroo/thinkthroo\",children:(0,n.jsx)(e.em,{children:\"Give us a star on Github\"})}),(0,n.jsx)(e.em,{children:\".\"})]}),`\n`]}),`\n`,(0,n.jsx)(e.h1,{id:\"components-and-layouts-a-clear-separation\",children:(0,n.jsx)(e.strong,{children:\"Components and Layouts: A Clear Separation\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Notice how the components and layouts are organized:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"components/interfaces/SignIn/SignInForm\"}),\": This directory holds the \",(0,n.jsx)(e.code,{children:\"SignInForm\"}),\" component, specifically related to the Sign-In interface. By organizing components within a relevant interface folder, you ensure that related components are grouped together, making them easier to find and manage.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"components/layouts/SignInLayout/SignInLayout\"}),\": The \",(0,n.jsx)(e.code,{children:\"SignInLayout\"}),\" component is separated into its own layout directory. This keeps the layout logic distinct from the individual components, allowing you to reuse the layout across different pages.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"lib/constants\"}),\": The \",(0,n.jsx)(e.code,{children:\"IS_PLATFORM\"}),\" constant is imported from a centralized location. This is a good practice for managing global constants that might be used across multiple components.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/best-practices\",children:(0,n.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:875/0*QlUA8-jvrCQnSBIJ.png\",alt:\"\"})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In fact, \",(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/master/apps/studio/components\",children:\"Supabase component folder\"}),\" has a good explanation about this approach.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/master/apps/studio/components\",children:(0,n.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:875/1*KFOZ9Dwmp4G8vMvITn9C2Q.png\",alt:\"\"})})}),`\n`,(0,n.jsx)(e.h1,{id:\"adding-the-layout\",children:(0,n.jsx)(e.strong,{children:\"Adding the Layout\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"One of the strengths of Next.js is its ability to define layouts on a \",(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts#per-page-layouts\",children:\"per-page basis\"}),\". The \",(0,n.jsx)(e.code,{children:\"SignInPage\"}),\" component is wrapped in a \",(0,n.jsx)(e.code,{children:\"SignInLayout\"}),\" that defines the overall structure of the page:\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"SignInPage.getLayout = (page) => (\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  <SignInLayout\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:'    heading=\"Welcome back\"'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:'    subheading=\"Sign in to your account\"'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    logoLinkToMarketingSite={true}\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  >\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    {page}\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  </SignInLayout>\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\")\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"export default SignInPage\"})})]})})}),`\n`,(0,n.jsx)(e.h1,{id:\"conclusion\",children:(0,n.jsx)(e.strong,{children:\"Conclusion\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Organizing your components and layouts in a pages-based Next.js application this way promotes a clean, scalable structure. By grouping related components and separating layout logic, you create a maintainable codebase that\\u2019s easy to extend as your application grows.\"}),`\n`,(0,n.jsx)(e.h1,{id:\"about-me\",children:(0,n.jsx)(e.strong,{children:\"About me:\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Hey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"I am open to work on interesting projects. Send me an email at \",(0,n.jsx)(e.a,{href:\"mailto:ramu.narasinga@gmail.com\",children:\"ramu.narasinga@gmail.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Github \\u2014 \",(0,n.jsx)(e.a,{href:\"https://github.com/ramu-narasinga\",children:\"https://github.com/ramu-narasinga\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My website \\u2014 \",(0,n.jsx)(e.a,{href:\"https://ramunarasinga.com/\",children:\"https://ramunarasinga.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Youtube channel \\u2014 \",(0,n.jsx)(e.a,{href:\"https://www.youtube.com/@thinkthroo\",children:\"https://www.youtube.com/@thinkthroo\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Learning platform \\u2014 \",(0,n.jsx)(e.a,{href:\"https://thinkthroo.com/\",children:\"https://thinkthroo.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Codebase Architecture \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/architecture\",children:\"https://app.thinkthroo.com/architecture\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Best practices \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/best-practices\",children:\"https://app.thinkthroo.com/best-practices\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Production-grade projects \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/production-grade-projects\",children:\"https://app.thinkthroo.com/production-grade-projects\"})]}),`\n`,(0,n.jsx)(e.h1,{id:\"further-reading\",children:(0,n.jsx)(e.strong,{children:\"Further reading:\"})}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx\",children:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/master/apps/studio/components/interfaces\",children:\"https://github.com/supabase/supabase/tree/master/apps/studio/components/interfaces\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/master/apps/studio/components/layouts\",children:\"https://github.com/supabase/supabase/tree/master/apps/studio/components/layouts\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts#per-page-layouts\",children:\"https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts#per-page-layouts\"})}),`\n`]}),`\n`]})]})}function l(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,{...a,children:(0,n.jsx)(h,{...a})}):h(a)}return w(k);})();\n;return Component;"
  },
  "_id": "blog/organize-your-components.mdx",
  "_raw": {
    "sourceFilePath": "blog/organize-your-components.mdx",
    "sourceFileName": "organize-your-components.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/organize-your-components"
  },
  "type": "Doc",
  "slug": "/blog/organize-your-components",
  "slugAsParams": "organize-your-components"
}
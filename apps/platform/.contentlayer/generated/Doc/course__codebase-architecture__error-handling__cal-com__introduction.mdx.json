{
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "[Alert component] is used to show errors:\n\nIn this guide, we analyze how errors are handled in a component in \n[cal.com](https://github.com/calcom/cal.com/blob/main/apps/web/pages/bookings/%5Bstatus%5D.tsx).\n\nHow to find out what error handling mechanisms are used in cal.com codebase? Pick a page on cal.com and\nfind the page route in its [source code](link-to-code)\n\nIn this guide, we choose the \n[bookings listing component](https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx).\n\n[Insert screenshots of bookings page]\n\nBookings component depends purely on the `query` result to decide what to render based on `query.status`.\n\n```\n// picked from https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L82C3-L95C5\nconst query = trpc.viewer.bookings.get.useInfiniteQuery(\n    {\n      limit: 10,\n      filters: {\n        ...filterQuery,\n        status: filterQuery.status ?? status,\n      },\n    },\n    {\n      // first render has status `undefined`\n      enabled: true,\n      getNextPageParam: (lastPage) => lastPage.nextCursor,\n    }\n  );\n``` \n\nIn this guide, our focus is only on how errors are handled in a component. So, if there's an error encountered,\nquery.status would be \"error\".\n\n```\n{\n    query.status === \"error\" && \n    (\n      <Alert severity=\"error\" title={t(\"something_went_wrong\")} message={query.error.message} />\n    )\n}\n```\n\n[Alert](https://github.com/calcom/cal.com/blob/main/packages/ui/components/alert/Alert.tsx) is imported from\n`packages/ui/components/alert/Alert.tsx`\n\nReferences:\n1. https://github.com/calcom/cal.com/blob/main/apps/web/pages/bookings/%5Bstatus%5D.tsx\n2. https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L165\n3. https://github.com/calcom/cal.com/blob/main/packages/ui/components/alert/Alert.tsx\n// In auth/login error handling:\n4. https://github.com/calcom/cal.com/blob/main/apps/web/modules/auth/login-view.tsx#L232C1-L233C80\n\n[Error tracking]:\nCal.com uses Sentry to track production errors. The below code snippet is from [cal.com/apps/web/intrumentation.ts](https://github.com/calcom/cal.com/blob/main/apps/web/instrumentation.ts)\n\n```\nimport * as Sentry from \"@sentry/nextjs\";\n\nexport function register() {\n  if (process.env.NEXT_RUNTIME === \"nodejs\") {\n    Sentry.init({\n      dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,\n    });\n  }\n\n  if (process.env.NEXT_RUNTIME === \"edge\") {\n    Sentry.init({\n      dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,\n    });\n  }\n}\n```\nRead this [official Sentry docs](https://docs.sentry.io/platforms/javascript/guides/nextjs/) that explains how to setup Sentry in a Next.js project.\n\nThis intrumentation file above is automatically generated as part of Sentry setup. \n`dsn`:\nThe DSN tells the SDK where to send the events. If this value is not provided, the SDK will try to read it from the SENTRY_DSN environment variable. If that variable also does not exist, the SDK will just not send any events.\n\nIn runtimes without a process environment (such as the browser) that fallback does not apply.\n\nLearn more about DSN utilization.\n  \nReferences:\n1. https://github.com/calcom/cal.com/blob/main/apps/web/instrumentation.ts\n2. https://github.com/calcom/cal.com/blob/main/apps/web/sentry.client.config.ts \n3. https://docs.sentry.io/platforms/javascript/guides/nextjs/\n\n[Error Boundary]\n\nBy default, if your application throws an error during rendering, React will remove its UI \nfrom the screen. To prevent this, you can wrap a part of your UI into an error boundary. \nAn error boundary is a special component that lets you display some fallback UI instead of \nthe part that crashedâ€”for example, an error message.\n\nReact docs explains [how to write your own boundary](https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary)\n\n```\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    // Example \"componentStack\":\n    //   in ComponentThatThrows (created by App)\n    //   in ErrorBoundary (created by App)\n    //   in div (created by App)\n    //   in App\n    logErrorToMyService(error, info.componentStack);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return this.props.fallback;\n    }\n\n    return this.props.children;\n  }\n}\n```\n\nYou can write your own ErrorBoundary or use [react-error-boundary](https://github.com/bvaughn/react-error-boundary/tree/master), recommended by React.\n\nGuess the kind of [ErrorBoundary used in cal.com](https://github.com/calcom/cal.com/blob/5bbccad41d625250ac03a6683e751b8ed6650721/packages/ui/components/errorBoundary/ErrorBoundary.tsx#L4)?\n\n```\nimport type { ErrorInfo } from \"react\";\nimport React from \"react\";\n\nclass ErrorBoundary extends React.Component<\n  { children: React.ReactNode; message?: string },\n  { error: Error | null; errorInfo: ErrorInfo | null }\n> {\n  constructor(props: { children: React.ReactNode } | Readonly<{ children: React.ReactNode }>) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  componentDidCatch?(error: Error, errorInfo: ErrorInfo) {\n    // Catch errors in any components below and re-render with error message\n    this.setState({ error, errorInfo });\n    // You can also log error messages to an error reporting service here\n  }\n\n  render() {\n    // do not intercept next-not-found error, allow displaying not-found.tsx page when notFound() is thrown on server side\n    if (\n      this.state.error !== null &&\n      \"digest\" in this.state.error &&\n      this.state.error.digest === \"NEXT_NOT_FOUND\"\n    ) {\n      return this.props.children;\n    }\n\n    if (this.state.errorInfo) {\n      // Error path\n      return (\n        <div>\n          <h2>{this.props.message || \"Something went wrong.\"}</h2>\n          <details style={{ whiteSpace: \"pre-wrap\" }}>\n            {this.state.error && this.state.error.toString()}\n          </details>\n        </div>\n      );\n    }\n    // Normally, just render children\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n```\ncal.com has its own ErrorBoundary class. It has `componentDidCatch` and `render` methods defined. Although, documentation\nprovides the example containing `getDerivedStateFromError`, it looks like this `getDerivedStateFromError` method is not\nused in cal.com ErrorBoundary class. \n\nReferences:\n1. https://github.com/search?q=repo%3Acalcom%2Fcal.com%20ErrorBoundary&type=code\n2. https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary\n3. https://github.com/bvaughn/react-error-boundary\n4. https://github.com/calcom/cal.com/blob/5bbccad41d625250ac03a6683e751b8ed6650721/packages/ui/components/errorBoundary/ErrorBoundary.tsx#L4",
    "code": "var Component=(()=>{var p=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),y=(r,e)=>{for(var o in e)a(r,o,{get:e[o],enumerable:!0})},i=(r,e,o,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of u(e))!g.call(r,t)&&t!==o&&a(r,t,{get:()=>e[t],enumerable:!(c=m(e,t))||c.enumerable});return r};var w=(r,e,o)=>(o=r!=null?p(b(r)):{},i(e||!r||!r.__esModule?a(o,\"default\",{value:r,enumerable:!0}):o,r)),v=r=>i(a({},\"__esModule\",{value:!0}),r);var l=f((S,s)=>{s.exports=_jsx_runtime});var E={};y(E,{default:()=>d,frontmatter:()=>x});var n=w(l()),x=void 0;function h(r){let e={a:\"a\",code:\"code\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",...r.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"[Alert component] is used to show errors:\"}),`\n`,(0,n.jsxs)(e.p,{children:[`In this guide, we analyze how errors are handled in a component in\n`,(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/pages/bookings/%5Bstatus%5D.tsx\",children:\"cal.com\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[`How to find out what error handling mechanisms are used in cal.com codebase? Pick a page on cal.com and\nfind the page route in its `,(0,n.jsx)(e.a,{href:\"link-to-code\",children:\"source code\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[`In this guide, we choose the\n`,(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx\",children:\"bookings listing component\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"[Insert screenshots of bookings page]\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Bookings component depends purely on the \",(0,n.jsx)(e.code,{children:\"query\"}),\" result to decide what to render based on \",(0,n.jsx)(e.code,{children:\"query.status\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`// picked from https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L82C3-L95C5\nconst query = trpc.viewer.bookings.get.useInfiniteQuery(\n    {\n      limit: 10,\n      filters: {\n        ...filterQuery,\n        status: filterQuery.status ?? status,\n      },\n    },\n    {\n      // first render has status \\`undefined\\`\n      enabled: true,\n      getNextPageParam: (lastPage) => lastPage.nextCursor,\n    }\n  );\n`})}),`\n`,(0,n.jsx)(e.p,{children:`In this guide, our focus is only on how errors are handled in a component. So, if there's an error encountered,\nquery.status would be \"error\".`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`{\n    query.status === \"error\" && \n    (\n      <Alert severity=\"error\" title={t(\"something_went_wrong\")} message={query.error.message} />\n    )\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/packages/ui/components/alert/Alert.tsx\",children:\"Alert\"}),` is imported from\n`,(0,n.jsx)(e.code,{children:\"packages/ui/components/alert/Alert.tsx\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"References:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/pages/bookings/%5Bstatus%5D.tsx\",children:\"https://github.com/calcom/cal.com/blob/main/apps/web/pages/bookings/%5Bstatus%5D.tsx\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L165\",children:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L165\"})}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/packages/ui/components/alert/Alert.tsx\",children:\"https://github.com/calcom/cal.com/blob/main/packages/ui/components/alert/Alert.tsx\"}),`\n// In auth/login error handling:`]}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/auth/login-view.tsx#L232C1-L233C80\",children:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/auth/login-view.tsx#L232C1-L233C80\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[`[Error tracking]:\nCal.com uses Sentry to track production errors. The below code snippet is from `,(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/instrumentation.ts\",children:\"cal.com/apps/web/intrumentation.ts\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import * as Sentry from \"@sentry/nextjs\";\n\nexport function register() {\n  if (process.env.NEXT_RUNTIME === \"nodejs\") {\n    Sentry.init({\n      dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,\n    });\n  }\n\n  if (process.env.NEXT_RUNTIME === \"edge\") {\n    Sentry.init({\n      dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,\n    });\n  }\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Read this \",(0,n.jsx)(e.a,{href:\"https://docs.sentry.io/platforms/javascript/guides/nextjs/\",children:\"official Sentry docs\"}),\" that explains how to setup Sentry in a Next.js project.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[`This intrumentation file above is automatically generated as part of Sentry setup.\n`,(0,n.jsx)(e.code,{children:\"dsn\"}),`:\nThe DSN tells the SDK where to send the events. If this value is not provided, the SDK will try to read it from the SENTRY_DSN environment variable. If that variable also does not exist, the SDK will just not send any events.`]}),`\n`,(0,n.jsx)(e.p,{children:\"In runtimes without a process environment (such as the browser) that fallback does not apply.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Learn more about DSN utilization.\"}),`\n`,(0,n.jsx)(e.p,{children:\"References:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/instrumentation.ts\",children:\"https://github.com/calcom/cal.com/blob/main/apps/web/instrumentation.ts\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/sentry.client.config.ts\",children:\"https://github.com/calcom/cal.com/blob/main/apps/web/sentry.client.config.ts\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://docs.sentry.io/platforms/javascript/guides/nextjs/\",children:\"https://docs.sentry.io/platforms/javascript/guides/nextjs/\"})}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"[Error Boundary]\"}),`\n`,(0,n.jsx)(e.p,{children:`By default, if your application throws an error during rendering, React will remove its UI\nfrom the screen. To prevent this, you can wrap a part of your UI into an error boundary.\nAn error boundary is a special component that lets you display some fallback UI instead of\nthe part that crashed\\u2014for example, an error message.`}),`\n`,(0,n.jsxs)(e.p,{children:[\"React docs explains \",(0,n.jsx)(e.a,{href:\"https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary\",children:\"how to write your own boundary\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`class ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    // Example \"componentStack\":\n    //   in ComponentThatThrows (created by App)\n    //   in ErrorBoundary (created by App)\n    //   in div (created by App)\n    //   in App\n    logErrorToMyService(error, info.componentStack);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return this.props.fallback;\n    }\n\n    return this.props.children;\n  }\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can write your own ErrorBoundary or use \",(0,n.jsx)(e.a,{href:\"https://github.com/bvaughn/react-error-boundary/tree/master\",children:\"react-error-boundary\"}),\", recommended by React.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Guess the kind of \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/5bbccad41d625250ac03a6683e751b8ed6650721/packages/ui/components/errorBoundary/ErrorBoundary.tsx#L4\",children:\"ErrorBoundary used in cal.com\"}),\"?\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import type { ErrorInfo } from \"react\";\nimport React from \"react\";\n\nclass ErrorBoundary extends React.Component<\n  { children: React.ReactNode; message?: string },\n  { error: Error | null; errorInfo: ErrorInfo | null }\n> {\n  constructor(props: { children: React.ReactNode } | Readonly<{ children: React.ReactNode }>) {\n    super(props);\n    this.state = { error: null, errorInfo: null };\n  }\n\n  componentDidCatch?(error: Error, errorInfo: ErrorInfo) {\n    // Catch errors in any components below and re-render with error message\n    this.setState({ error, errorInfo });\n    // You can also log error messages to an error reporting service here\n  }\n\n  render() {\n    // do not intercept next-not-found error, allow displaying not-found.tsx page when notFound() is thrown on server side\n    if (\n      this.state.error !== null &&\n      \"digest\" in this.state.error &&\n      this.state.error.digest === \"NEXT_NOT_FOUND\"\n    ) {\n      return this.props.children;\n    }\n\n    if (this.state.errorInfo) {\n      // Error path\n      return (\n        <div>\n          <h2>{this.props.message || \"Something went wrong.\"}</h2>\n          <details style={{ whiteSpace: \"pre-wrap\" }}>\n            {this.state.error && this.state.error.toString()}\n          </details>\n        </div>\n      );\n    }\n    // Normally, just render children\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"cal.com has its own ErrorBoundary class. It has \",(0,n.jsx)(e.code,{children:\"componentDidCatch\"}),\" and \",(0,n.jsx)(e.code,{children:\"render\"}),` methods defined. Although, documentation\nprovides the example containing `,(0,n.jsx)(e.code,{children:\"getDerivedStateFromError\"}),\", it looks like this \",(0,n.jsx)(e.code,{children:\"getDerivedStateFromError\"}),` method is not\nused in cal.com ErrorBoundary class.`]}),`\n`,(0,n.jsx)(e.p,{children:\"References:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/search?q=repo%3Acalcom%2Fcal.com%20ErrorBoundary&type=code\",children:\"https://github.com/search?q=repo%3Acalcom%2Fcal.com%20ErrorBoundary&type=code\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary\",children:\"https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/bvaughn/react-error-boundary\",children:\"https://github.com/bvaughn/react-error-boundary\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/5bbccad41d625250ac03a6683e751b8ed6650721/packages/ui/components/errorBoundary/ErrorBoundary.tsx#L4\",children:\"https://github.com/calcom/cal.com/blob/5bbccad41d625250ac03a6683e751b8ed6650721/packages/ui/components/errorBoundary/ErrorBoundary.tsx#L4\"})}),`\n`]})]})}function d(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,{...r,children:(0,n.jsx)(h,{...r})}):h(r)}return v(E);})();\n;return Component;"
  },
  "_id": "course/codebase-architecture/error-handling/cal-com/introduction.mdx",
  "_raw": {
    "sourceFilePath": "course/codebase-architecture/error-handling/cal-com/introduction.mdx",
    "sourceFileName": "introduction.mdx",
    "sourceFileDir": "course/codebase-architecture/error-handling/cal-com",
    "contentType": "mdx",
    "flattenedPath": "course/codebase-architecture/error-handling/cal-com/introduction"
  },
  "type": "Doc",
  "slug": "/course/codebase-architecture/error-handling/cal-com/introduction",
  "slugAsParams": "codebase-architecture/error-handling/cal-com/introduction"
}
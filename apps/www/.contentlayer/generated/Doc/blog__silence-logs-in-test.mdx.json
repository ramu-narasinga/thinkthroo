{
  "title": "How to temporarily silence logs in tests\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\nLogger package in [Changesets source code](https://github.com/changesets/changesets/tree/main/packages/logger) provides a [documentation about silencing log message in tests](https://github.com/changesets/changesets/tree/main/packages/logger#silencing-messages-in-tests). This got me wonder how Changesets do it and made me look into its source code.\r\n\r\n### Changesets repository search for silencing logs\r\n\r\nI searched for [temporarilySilenceLogs across the Changesets repo](https://github.com/search?q=repo%3Achangesets%2Fchangesets%20temporarilySilenceLogs%20&type=code) using Github search.\r\n\r\n![](https://cdn-images-1.medium.com/max/1600/1*_ZqcNXp45rTSIn686o9O8Q.png)\r\n\r\nWhat made me choose to search for temporarilySilenceLogs is the fact that it is mentioned in the Logger  \r\npackage Readme.\r\n\r\n```plaintext\r\nimport { temporarilySilenceLogs } from \"@changesets/test-utils\";\r\nimport { log } from \"@changesets/logger\";\r\ntemporarilySilenceLogs();\r\n// Now the logs in this test file are not actually logged to std out\r\nlog(\"I am not logged\");\r\n// Use console.log to log messages in tests if required\r\nconsole.log(\"Yay, I am logged\");\r\n```\r\n\r\nWhen you are trying to understand the source code, you can use documentation as your starting point and search for variables and functions to set the direction for your exploration when you are dealing with large projects like [Changesets](https://github.com/changesets/changesets/tree/main/packages/logger).\r\n\r\n### temporarilySilenceLogs\r\n\r\nThe below code is picked from [Changesets source code](https://github.com/changesets/changesets/blob/baf56448606e005577dbe2fb1e78ff457dcaaefd/scripts/test-utils/src/index.ts#L79C1-L88C5).\r\n\r\n![](https://cdn-images-1.medium.com/max/1600/1*O4YHcCSYRlcX3XanwNn9cQ.png)\r\n\r\nThis function accepts a function as argument and then silences the logs using a function named [createLogSilencer](https://github.com/changesets/changesets/blob/baf56448606e005577dbe2fb1e78ff457dcaaefd/scripts/test-utils/src/index.ts#L16).\r\n\r\nPay attention to the setup function here:\r\n\r\n```plaintext\r\nconst dispose = silencer.setup();\r\ntry {\r\n await testFn();\r\n} finally {\r\n dispose();\r\n}\r\n```\r\n\r\n### createLogSilencer\r\n\r\nBelow code is picked from [Changesets](https://github.com/changesets/changesets/blob/baf56448606e005577dbe2fb1e78ff457dcaaefd/scripts/test-utils/src/index.ts#L16)\r\n\r\n```plaintext\r\nconst createLogSilencer = () => {\r\n  const originalLoggerError = logger.error;\r\n  const originalLoggerInfo = logger.info;\r\n  const originalLoggerLog = logger.log;\r\n  const originalLoggerWarn = logger.warn;\r\n  const originalLoggerSuccess = logger.success;\r\n\r\n  const originalConsoleError = console.error;\r\n  const originalConsoleInfo = console.info;\r\n  const originalConsoleLog = console.log;\r\n  const originalConsoleWarn = console.warn;\r\n\r\n  const originalStdoutWrite = process.stdout.write;\r\n  const originalStderrWrite = process.stderr.write;\r\n\r\n  return {\r\n    setup() {\r\n      logger.error = jest.fn();\r\n      logger.info = jest.fn();\r\n      logger.log = jest.fn();\r\n      logger.warn = jest.fn();\r\n      logger.success = jest.fn();\r\n\r\n      console.error = jest.fn();\r\n      console.info = jest.fn();\r\n      console.log = jest.fn();\r\n      console.warn = jest.fn();\r\n\r\n      process.stdout.write = jest.fn();\r\n      process.stderr.write = jest.fn();\r\n\r\n      return () => {\r\n        logger.error = originalLoggerError;\r\n        logger.info = originalLoggerInfo;\r\n        logger.log = originalLoggerLog;\r\n        logger.warn = originalLoggerWarn;\r\n        logger.success = originalLoggerSuccess;\r\n\r\n        console.error = originalConsoleError;\r\n        console.info = originalConsoleInfo;\r\n        console.log = originalConsoleLog;\r\n        console.warn = originalConsoleWarn;\r\n\r\n        process.stdout.write = originalStdoutWrite;\r\n        process.stderr.write = originalStderrWrite;\r\n      };\r\n    },\r\n  };\r\n};\r\n```\r\n\r\nWhat is happening here?\r\n\r\n1. The assignment\r\n    \r\n\r\n```plaintext\r\nconst originalLoggerError = logger.error;\r\nconst originalLoggerInfo = logger.info;\r\nconst originalLoggerLog = logger.log;\r\nconst originalLoggerWarn = logger.warn;\r\nconst originalLoggerSuccess = logger.success;\r\nconst originalConsoleError = console.error;\r\nconst originalConsoleInfo = console.info;\r\nconst originalConsoleLog = console.log;\r\nconst originalConsoleWarn = console.warn;\r\nconst originalStdoutWrite = process.stdout.write;\r\nconst originalStderrWrite = process.stderr.write;\r\n```\r\n\r\n2\\. Returns setup\r\n\r\nIf you noticed above, setup is called inside temporarilySilenceLogs, this is returned by `createLogSilencer`\r\n\r\n```plaintext\r\nreturn {\r\n    setup() {\r\n      logger.error = jest.fn();\r\n      logger.info = jest.fn();\r\n      logger.log = jest.fn();\r\n      logger.warn = jest.fn();\r\n      logger.success = jest.fn();\r\n\r\n      console.error = jest.fn();\r\n      console.info = jest.fn();\r\n      console.log = jest.fn();\r\n      console.warn = jest.fn();\r\n\r\n      process.stdout.write = jest.fn();\r\n      process.stderr.write = jest.fn();\r\n\r\n      return () => {\r\n        logger.error = originalLoggerError;\r\n        logger.info = originalLoggerInfo;\r\n        logger.log = originalLoggerLog;\r\n        logger.warn = originalLoggerWarn;\r\n        logger.success = originalLoggerSuccess;\r\n\r\n        console.error = originalConsoleError;\r\n        console.info = originalConsoleInfo;\r\n        console.log = originalConsoleLog;\r\n        console.warn = originalConsoleWarn;\r\n\r\n        process.stdout.write = originalStdoutWrite;\r\n        process.stderr.write = originalStderrWrite;\r\n      };\r\n    },\r\n  };\r\n```\r\n\r\nWhat is happening in the setup function?\r\n\r\n2.1 Loggers and console API are initialised to jest.fn()\r\n\r\n```plaintext\r\nlogger.error = jest.fn();\r\nlogger.info = jest.fn();\r\nlogger.log = jest.fn();\r\nlogger.warn = jest.fn();\r\nlogger.success = jest.fn();\r\nconsole.error = jest.fn();\r\nconsole.info = jest.fn();\r\nconsole.log = jest.fn();\r\nconsole.warn = jest.fn();\r\nprocess.stdout.write = jest.fn();\r\nprocess.stderr.write = jest.fn();\r\n```\r\n\r\nThis pretty much silences the logs since jest.fn() gets called when you use any logger, hence this is considerd as setup, an important step to silence your logs.\r\n\r\n2.2 setUp returns original loggers\r\n\r\nIf you have noticed, the sequence of function calls are\r\n\r\na. const silencer = createLogSilencer();  \r\nb. const dispose = silencer.setup();  \r\nc. In the finally block.\r\n\r\n```plaintext\r\ntry {\r\n await testFn();\r\n} finally {\r\n dispose();\r\n}\r\n```\r\n\r\ndispose is returned by setup function that is returned by createLogSilencer. This step restores the logging mechanism after executing your test function.\r\n\r\n# **About me:**\r\n\r\nHey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\r\n\r\nI am open to work on interesting projects. Send me an email at ramu.narasinga@gmail.com\r\n\r\nMy Github — [https://github.com/ramu-narasinga](https://github.com/ramu-narasinga)\r\n\r\nMy website — [https://ramunarasinga.com](https://ramunarasinga.com/)\r\n\r\nMy Youtube channel — [https://www.youtube.com/@thinkthroo](https://www.youtube.com/@thinkthroo)\r\n\r\nLearning platform — [https://thinkthroo.com](https://thinkthroo.com/)\r\n\r\nCodebase Architecture — [https://app.thinkthroo.com/architecture](https://app.thinkthroo.com/architecture)\r\n\r\nBest practices — [https://app.thinkthroo.com/best-practices](https://app.thinkthroo.com/best-practices)\r\n\r\nProduction-grade projects — [https://app.thinkthroo.com/production-grade-projects](https://app.thinkthroo.com/production-grade-projects)\r\n\r\n### References:\r\n\r\n1. [https://github.com/changesets/changesets/tree/main/packages/logger#silencing-messages-in-tests](https://github.com/changesets/changesets/tree/main/packages/logger#silencing-messages-in-tests)\r\n    \r\n2. [https://github.com/search?q=repo%3Achangesets%2Fchangesets%20temporarilySilenceLogs%20&type=code](https://github.com/search?q=repo%3Achangesets%2Fchangesets%20temporarilySilenceLogs%20&type=code)\r\n    \r\n3. [https://github.com/changesets/changesets/blob/baf56448606e005577dbe2fb1e78ff457dcaaefd/scripts/test-utils/src/index.ts#L16](https://github.com/changesets/changesets/blob/baf56448606e005577dbe2fb1e78ff457dcaaefd/scripts/test-utils/src/index.ts#L16)",
    "code": "var Component=(()=>{var p=Object.create;var r=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var N=(s,e)=>()=>(e||s((e={exports:{}}).exports,e),e.exports),b=(s,e)=>{for(var a in e)r(s,a,{get:e[a],enumerable:!0})},c=(s,e,a,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of m(e))!f.call(s,l)&&l!==a&&r(s,l,{get:()=>e[l],enumerable:!(i=g(e,l))||i.enumerable});return s};var y=(s,e,a)=>(a=s!=null?p(u(s)):{},c(e||!s||!s.__esModule?r(a,\"default\",{value:s,enumerable:!0}):a,s)),L=s=>c(r({},\"__esModule\",{value:!0}),s);var o=N((S,t)=>{t.exports=_jsx_runtime});var j={};b(j,{default:()=>d,frontmatter:()=>w});var n=y(o()),w={title:\"How to temporarily silence logs in\\xA0tests\"};function h(s){let e={a:\"a\",br:\"br\",code:\"code\",div:\"div\",h1:\"h1\",h3:\"h3\",img:\"img\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",...s.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Logger package in \",(0,n.jsx)(e.a,{href:\"https://github.com/changesets/changesets/tree/main/packages/logger\",children:\"Changesets source code\"}),\" provides a \",(0,n.jsx)(e.a,{href:\"https://github.com/changesets/changesets/tree/main/packages/logger#silencing-messages-in-tests\",children:\"documentation about silencing log message in tests\"}),\". This got me wonder how Changesets do it and made me look into its source code.\"]}),`\n`,(0,n.jsx)(e.h3,{id:\"changesets-repository-search-for-silencing-logs\",children:\"Changesets repository search for silencing logs\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"I searched for \",(0,n.jsx)(e.a,{href:\"https://github.com/search?q=repo%3Achangesets%2Fchangesets%20temporarilySilenceLogs%20&type=code\",children:\"temporarilySilenceLogs across the Changesets repo\"}),\" using Github search.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://cdn-images-1.medium.com/max/1600/1*_ZqcNXp45rTSIn686o9O8Q.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"What made me choose to search for temporarilySilenceLogs is the fact that it is mentioned in the Logger\",(0,n.jsx)(e.br,{}),`\n`,\"package Readme.\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:'import { temporarilySilenceLogs } from \"@changesets/test-utils\";'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:'import { log } from \"@changesets/logger\";'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"temporarilySilenceLogs();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"// Now the logs in this test file are not actually logged to std out\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:'log(\"I am not logged\");'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"// Use console.log to log messages in tests if required\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:'console.log(\"Yay, I am logged\");'})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"When you are trying to understand the source code, you can use documentation as your starting point and search for variables and functions to set the direction for your exploration when you are dealing with large projects like \",(0,n.jsx)(e.a,{href:\"https://github.com/changesets/changesets/tree/main/packages/logger\",children:\"Changesets\"}),\".\"]}),`\n`,(0,n.jsx)(e.h3,{id:\"temporarilysilencelogs\",children:\"temporarilySilenceLogs\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The below code is picked from \",(0,n.jsx)(e.a,{href:\"https://github.com/changesets/changesets/blob/baf56448606e005577dbe2fb1e78ff457dcaaefd/scripts/test-utils/src/index.ts#L79C1-L88C5\",children:\"Changesets source code\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://cdn-images-1.medium.com/max/1600/1*O4YHcCSYRlcX3XanwNn9cQ.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This function accepts a function as argument and then silences the logs using a function named \",(0,n.jsx)(e.a,{href:\"https://github.com/changesets/changesets/blob/baf56448606e005577dbe2fb1e78ff457dcaaefd/scripts/test-utils/src/index.ts#L16\",children:\"createLogSilencer\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Pay attention to the setup function here:\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const dispose = silencer.setup();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"try {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" await testFn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"} finally {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" dispose();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})})]})})}),`\n`,(0,n.jsx)(e.h3,{id:\"createlogsilencer\",children:\"createLogSilencer\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Below code is picked from \",(0,n.jsx)(e.a,{href:\"https://github.com/changesets/changesets/blob/baf56448606e005577dbe2fb1e78ff457dcaaefd/scripts/test-utils/src/index.ts#L16\",children:\"Changesets\"})]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const createLogSilencer = () => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const originalLoggerError = logger.error;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const originalLoggerInfo = logger.info;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const originalLoggerLog = logger.log;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const originalLoggerWarn = logger.warn;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const originalLoggerSuccess = logger.success;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const originalConsoleError = console.error;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const originalConsoleInfo = console.info;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const originalConsoleLog = console.log;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const originalConsoleWarn = console.warn;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const originalStdoutWrite = process.stdout.write;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const originalStderrWrite = process.stderr.write;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  return {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    setup() {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      logger.error = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      logger.info = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      logger.log = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      logger.warn = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      logger.success = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      console.error = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      console.info = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      console.log = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      console.warn = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      process.stdout.write = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      process.stderr.write = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      return () => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        logger.error = originalLoggerError;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        logger.info = originalLoggerInfo;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        logger.log = originalLoggerLog;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        logger.warn = originalLoggerWarn;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        logger.success = originalLoggerSuccess;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        console.error = originalConsoleError;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        console.info = originalConsoleInfo;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        console.log = originalConsoleLog;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        console.warn = originalConsoleWarn;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        process.stdout.write = originalStdoutWrite;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        process.stderr.write = originalStderrWrite;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      };\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    },\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  };\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"};\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"What is happening here?\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"The assignment\"}),`\n`]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const originalLoggerError = logger.error;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const originalLoggerInfo = logger.info;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const originalLoggerLog = logger.log;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const originalLoggerWarn = logger.warn;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const originalLoggerSuccess = logger.success;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const originalConsoleError = console.error;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const originalConsoleInfo = console.info;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const originalConsoleLog = console.log;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const originalConsoleWarn = console.warn;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const originalStdoutWrite = process.stdout.write;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const originalStderrWrite = process.stderr.write;\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"2. Returns setup\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"If you noticed above, setup is called inside temporarilySilenceLogs, this is returned by \",(0,n.jsx)(e.code,{children:\"createLogSilencer\"})]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"return {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    setup() {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      logger.error = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      logger.info = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      logger.log = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      logger.warn = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      logger.success = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      console.error = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      console.info = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      console.log = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      console.warn = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      process.stdout.write = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      process.stderr.write = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      return () => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        logger.error = originalLoggerError;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        logger.info = originalLoggerInfo;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        logger.log = originalLoggerLog;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        logger.warn = originalLoggerWarn;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        logger.success = originalLoggerSuccess;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        console.error = originalConsoleError;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        console.info = originalConsoleInfo;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        console.log = originalConsoleLog;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        console.warn = originalConsoleWarn;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        process.stdout.write = originalStdoutWrite;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        process.stderr.write = originalStderrWrite;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      };\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    },\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  };\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"What is happening in the setup function?\"}),`\n`,(0,n.jsx)(e.p,{children:\"2.1 Loggers and console API are initialised to jest.fn()\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"logger.error = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"logger.info = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"logger.log = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"logger.warn = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"logger.success = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"console.error = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"console.info = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"console.log = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"console.warn = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"process.stdout.write = jest.fn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"process.stderr.write = jest.fn();\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"This pretty much silences the logs since jest.fn() gets called when you use any logger, hence this is considerd as setup, an important step to silence your logs.\"}),`\n`,(0,n.jsx)(e.p,{children:\"2.2 setUp returns original loggers\"}),`\n`,(0,n.jsx)(e.p,{children:\"If you have noticed, the sequence of function calls are\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"a. const silencer = createLogSilencer();\",(0,n.jsx)(e.br,{}),`\n`,\"b. const dispose = silencer.setup();\",(0,n.jsx)(e.br,{}),`\n`,\"c. In the finally block.\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"try {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" await testFn();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"} finally {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" dispose();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"dispose is returned by setup function that is returned by createLogSilencer. This step restores the logging mechanism after executing your test function.\"}),`\n`,(0,n.jsx)(e.h1,{id:\"about-me\",children:(0,n.jsx)(e.strong,{children:\"About me:\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Hey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"I am open to work on interesting projects. Send me an email at \",(0,n.jsx)(e.a,{href:\"mailto:ramu.narasinga@gmail.com\",children:\"ramu.narasinga@gmail.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Github \\u2014 \",(0,n.jsx)(e.a,{href:\"https://github.com/ramu-narasinga\",children:\"https://github.com/ramu-narasinga\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My website \\u2014 \",(0,n.jsx)(e.a,{href:\"https://ramunarasinga.com/\",children:\"https://ramunarasinga.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Youtube channel \\u2014 \",(0,n.jsx)(e.a,{href:\"https://www.youtube.com/@thinkthroo\",children:\"https://www.youtube.com/@thinkthroo\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Learning platform \\u2014 \",(0,n.jsx)(e.a,{href:\"https://thinkthroo.com/\",children:\"https://thinkthroo.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Codebase Architecture \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/architecture\",children:\"https://app.thinkthroo.com/architecture\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Best practices \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/best-practices\",children:\"https://app.thinkthroo.com/best-practices\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Production-grade projects \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/production-grade-projects\",children:\"https://app.thinkthroo.com/production-grade-projects\"})]}),`\n`,(0,n.jsx)(e.h3,{id:\"references\",children:\"References:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/changesets/changesets/tree/main/packages/logger#silencing-messages-in-tests\",children:\"https://github.com/changesets/changesets/tree/main/packages/logger#silencing-messages-in-tests\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/search?q=repo%3Achangesets%2Fchangesets%20temporarilySilenceLogs%20&type=code\",children:\"https://github.com/search?q=repo%3Achangesets%2Fchangesets%20temporarilySilenceLogs%20&type=code\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/changesets/changesets/blob/baf56448606e005577dbe2fb1e78ff457dcaaefd/scripts/test-utils/src/index.ts#L16\",children:\"https://github.com/changesets/changesets/blob/baf56448606e005577dbe2fb1e78ff457dcaaefd/scripts/test-utils/src/index.ts#L16\"})}),`\n`]}),`\n`]})]})}function d(s={}){let{wrapper:e}=s.components||{};return e?(0,n.jsx)(e,{...s,children:(0,n.jsx)(h,{...s})}):h(s)}return L(j);})();\n;return Component;"
  },
  "_id": "blog/silence-logs-in-test.mdx",
  "_raw": {
    "sourceFilePath": "blog/silence-logs-in-test.mdx",
    "sourceFileName": "silence-logs-in-test.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/silence-logs-in-test"
  },
  "type": "Doc",
  "slug": "/blog/silence-logs-in-test",
  "slugAsParams": "silence-logs-in-test"
}
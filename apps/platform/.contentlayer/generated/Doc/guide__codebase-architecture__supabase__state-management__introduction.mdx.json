{
  "title": "State management in Supabase\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\n# Introduction\r\n\r\n## State management in Supabase\r\n\r\nState management is closely related to the way you manage API layer. \r\nIn this guide, we will analyze how the state is managed in Supabase.\r\n\r\nThe way we approach is we pick a route in the Supabase studio and then find the page responsible for \r\nthat route (Supabase at the time of writing this article uses Page Router). We have to take a closer look\r\nat actions such as:\r\n\r\n### 1. /dashboard/projects\r\n\r\nIn this route, we are interested in finding out how the projects and organzations are rendered. \r\nOnce the data is fetched, is there any state set based on this API response? or is there any other way \r\nAPI response is handled?\r\n\r\nThese actions are specific to Supabase, these actions vary based on an application. \r\nIn cal.com, to understand how how state is managed, you would look at operations such as bookings list, \r\nevent-types etc., \r\n\r\n### 2. Create a project\r\n\r\nIn this action, we analyse how the state is managed when you add a new project in Supabase dashboard. \r\n\r\n[Insert a screenshot of Create project page]\r\n\r\n### 3. Create a table\r\n\r\nIn this action, we analyse how the state is managed when you add a new table. When you click on new table inside\r\na table editor, you will see a dialog positioned to the right of the screen.\r\n\r\n[Insert a screenshot of this create table dialog.]\r\n\r\nWe provide an explanation as to what happens when you click on \"Save\" by reviewing the code. It would be\r\ninteresting to find out how the list of tables gets refreshed after you create a table.",
    "code": "var Component=(()=>{var p=Object.create;var s=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var m=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=>{for(var n in e)s(t,n,{get:e[n],enumerable:!0})},i=(t,e,n,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of w(e))!g.call(t,o)&&o!==n&&s(t,o,{get:()=>e[o],enumerable:!(r=u(e,o))||r.enumerable});return t};var f=(t,e,n)=>(n=t!=null?p(b(t)):{},i(e||!t||!t.__esModule?s(n,\"default\",{value:t,enumerable:!0}):n,t)),j=t=>i(s({},\"__esModule\",{value:!0}),t);var d=m((k,h)=>{h.exports=_jsx_runtime});var S={};y(S,{default:()=>l,frontmatter:()=>I});var a=f(d()),I={title:\"State management in Supabase\"};function c(t){let e={h1:\"h1\",h2:\"h2\",h3:\"h3\",p:\"p\",...t.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{id:\"introduction\",children:\"Introduction\"}),`\n`,(0,a.jsx)(e.h2,{id:\"state-management-in-supabase\",children:\"State management in Supabase\"}),`\n`,(0,a.jsx)(e.p,{children:`State management is closely related to the way you manage API layer.\\r\nIn this guide, we will analyze how the state is managed in Supabase.`}),`\n`,(0,a.jsx)(e.p,{children:`The way we approach is we pick a route in the Supabase studio and then find the page responsible for\\r\nthat route (Supabase at the time of writing this article uses Page Router). We have to take a closer look\\r\nat actions such as:`}),`\n`,(0,a.jsx)(e.h3,{id:\"1-dashboardprojects\",children:\"1. /dashboard/projects\"}),`\n`,(0,a.jsx)(e.p,{children:`In this route, we are interested in finding out how the projects and organzations are rendered.\\r\nOnce the data is fetched, is there any state set based on this API response? or is there any other way\\r\nAPI response is handled?`}),`\n`,(0,a.jsx)(e.p,{children:`These actions are specific to Supabase, these actions vary based on an application.\\r\nIn cal.com, to understand how how state is managed, you would look at operations such as bookings list,\\r\nevent-types etc.,`}),`\n`,(0,a.jsx)(e.h3,{id:\"2-create-a-project\",children:\"2. Create a project\"}),`\n`,(0,a.jsx)(e.p,{children:\"In this action, we analyse how the state is managed when you add a new project in Supabase dashboard.\"}),`\n`,(0,a.jsx)(e.p,{children:\"[Insert a screenshot of Create project page]\"}),`\n`,(0,a.jsx)(e.h3,{id:\"3-create-a-table\",children:\"3. Create a table\"}),`\n`,(0,a.jsx)(e.p,{children:`In this action, we analyse how the state is managed when you add a new table. When you click on new table inside\\r\na table editor, you will see a dialog positioned to the right of the screen.`}),`\n`,(0,a.jsx)(e.p,{children:\"[Insert a screenshot of this create table dialog.]\"}),`\n`,(0,a.jsx)(e.p,{children:`We provide an explanation as to what happens when you click on \"Save\" by reviewing the code. It would be\\r\ninteresting to find out how the list of tables gets refreshed after you create a table.`})]})}function l(t={}){let{wrapper:e}=t.components||{};return e?(0,a.jsx)(e,{...t,children:(0,a.jsx)(c,{...t})}):c(t)}return j(S);})();\n;return Component;"
  },
  "_id": "guide/codebase-architecture/supabase/state-management/introduction.mdx",
  "_raw": {
    "sourceFilePath": "guide/codebase-architecture/supabase/state-management/introduction.mdx",
    "sourceFileName": "introduction.mdx",
    "sourceFileDir": "guide/codebase-architecture/supabase/state-management",
    "contentType": "mdx",
    "flattenedPath": "guide/codebase-architecture/supabase/state-management/introduction"
  },
  "type": "Doc",
  "slug": "/guide/codebase-architecture/supabase/state-management/introduction",
  "slugAsParams": "codebase-architecture/supabase/state-management/introduction"
}
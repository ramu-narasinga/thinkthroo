{
  "title": "state-management in cal.com\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\n[State management in add/edit event type]\r\n\r\nIn this guide, we will review the state management in the following actions in Event Types page:\r\n1. Add new event type\r\n2. Edit existing event type\r\n\r\n# Add new event type\r\n\r\nIn the [event types page](https://app.cal.com/event-types), when you click on \"+ New\" button in the top right,\r\n\r\n[Insert screenshot of New button]\r\n\r\nyou will see this below dialog\r\n\r\n[Insert screenshot of dialog]\r\n\r\nLet's find out how the code behind this works.\r\n\r\n## New button\r\n\r\nI had to open dev tools and find a unique identifier that helped me locate this button in the cal.com codebase.\r\n\r\n```\r\n<div class=\"pwa:bottom-[max(7rem,_calc(5rem_+_env(safe-area-inset-bottom)))] fixed bottom-20 z-40 ltr:right-4 rtl:left-4 md:z-auto md:ltr:right-0 md:rtl:left-0 flex-shrink-0 [-webkit-app-region:no-drag] md:relative md:bottom-auto md:right-auto\">\r\n  <button data-testid=\"new-event-type\" type=\"button\" class=\"whitespace-nowrap inline-flex items-center text-sm font-medium relative transition disabled:cursor-not-allowed rounded-full justify-center md:rounded-md radix-state-open:rotate-45 md:radix-state-open:rotate-0 radix-state-open:shadown-none radix-state-open:ring-0 !shadow-none bg-brand-default hover:bg-brand-emphasis focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-brand-default text-brand disabled:bg-brand-subtle disabled:text-brand-subtle disabled:opacity-40 disabled:hover:bg-brand-subtle disabled:hover:text-brand-default disabled:hover:opacity-40 px-4 py-2.5 h-14 md:h-9 md:w-auto md:px-4 md:py-2.5\"><svg height=\"16\" width=\"16\" class=\"fill-transparent hidden h-4 w-4 stroke-[1.5px] ltr:-ml-1 ltr:mr-2 rtl:-mr-1 rtl:ml-2 md:inline-flex\" aria-hidden=\"true\"><use href=\"#plus\"></use></svg><svg height=\"16\" width=\"16\" class=\"fill-transparent inline h-6 w-6 md:hidden\" data-testid=\"plus\" aria-hidden=\"true\"><use href=\"#plus\"></use></svg><span class=\"hidden md:inline\">New</span></button></div>\r\n``` \r\n\r\nI searched for `pwa:bottom-[max` in the cal.com codebase and found it in [Shell.tsx](https://github.com/calcom/cal.com/blob/bfeafaa21f7dc70e02cbd26ab6670459678b4bcc/packages/features/shell/Shell.tsx#L192)\r\nat line 187 in ShellMain component.\r\n\r\n```\r\n{props.CTA && (\r\n  <div\r\n    className={classNames(\r\n      props.backPath\r\n        ? \"relative\"\r\n        : \"pwa:bottom-[max(7rem,_calc(5rem_+_env(safe-area-inset-bottom)))] fixed bottom-20 z-40 ltr:right-4 rtl:left-4 md:z-auto md:ltr:right-0 md:rtl:left-0\",\r\n      \"flex-shrink-0 [-webkit-app-region:no-drag] md:relative md:bottom-auto md:right-auto\"\r\n    )}>\r\n    {isLocaleReady && props.CTA}\r\n  </div>\r\n)}\r\n```\r\n\r\nIn [event-types-listing-view.tsx](https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx),\r\nShell component is used as shown below:\r\n\r\n```\r\nreturn (\r\n    <Shell\r\n      withoutMain={false}\r\n      title={t(\"event_types_page_title\")}\r\n      description={t(\"event_types_page_subtitle\")}\r\n      withoutSeo\r\n      heading={t(\"event_types_page_title\")}\r\n      hideHeadingOnMobile\r\n      subtitle={t(\"event_types_page_subtitle\")}\r\n      CTA={<CTA profileOptions={profileOptions} isOrganization={!!user?.organizationId} />}>\r\n``` \r\n\r\nBut when we searched for this New button in the cal.com codebase, we found it in ShellMain component. So how's Shell and ShellMain\r\nrelated?\r\n\r\n## Shell\r\n\r\nBelow code is picked from [Shell.tsx at line 120](https://github.com/calcom/cal.com/blob/main/packages/features/shell/Shell.tsx#L120).\r\n\r\n```\r\nexport default function Shell(props: LayoutProps) {\r\n  // if a page is unauthed and isPublic is true, the redirect does not happen.\r\n  useRedirectToLoginIfUnauthenticated(props.isPublic);\r\n  useRedirectToOnboardingIfNeeded();\r\n  useAppTheme();\r\n\r\n  return !props.isPublic ? (\r\n    <KBarWrapper withKBar>\r\n      <Layout {...props} />\r\n    </KBarWrapper>\r\n  ) : (\r\n    <PublicShell {...props} />\r\n  );\r\n}\r\n```\r\n\r\nTo understand how Shell and ShellMain are related, we need to follow the Layout component. Below is the Layout code picked from\r\n[line 25 in Shell.tsx](https://github.com/calcom/cal.com/blob/main/packages/features/shell/Shell.tsx#L25).\r\n\r\n```\r\nconst Layout = (props: LayoutProps) => {\r\n  const { banners, bannersHeight } = useBanners();\r\n  const pathname = usePathname();\r\n  const isFullPageWithoutSidebar = pathname?.startsWith(\"/apps/routing-forms/reporting/\");\r\n  const pageTitle = typeof props.heading === \"string\" && !props.title ? props.heading : props.title;\r\n  const withoutSeo = props.withoutSeo ?? props.withoutMain ?? false;\r\n\r\n  useFormbricks();\r\n\r\n  return (\r\n    <>\r\n      {!withoutSeo && (\r\n        <HeadSeo\r\n          title={pageTitle ?? APP_NAME}\r\n          description={props.description ?? props.subtitle?.toString() ?? \"\"}\r\n        />\r\n      )}\r\n      <div>\r\n        <Toaster position=\"bottom-right\" />\r\n      </div>\r\n\r\n      <TimezoneChangeDialog />\r\n\r\n      <div className=\"flex min-h-screen flex-col\">\r\n        {banners && !props.isPlatformUser && !isFullPageWithoutSidebar && (\r\n          <BannerContainer banners={banners} />\r\n        )}\r\n\r\n        <div className=\"flex flex-1\" data-testid=\"dashboard-shell\">\r\n          {props.SidebarContainer ? (\r\n            cloneElement(props.SidebarContainer, { bannersHeight })\r\n          ) : (\r\n            <SideBarContainer isPlatformUser={props.isPlatformUser} bannersHeight={bannersHeight} />\r\n          )}\r\n          <div className=\"flex w-0 flex-1 flex-col\">\r\n            <MainContainer {...props} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n```\r\n\r\n## MainContainer\r\n\r\nMainContainer component above has the below code picked from Shell.tsx\r\n\r\n```\r\nfunction MainContainer({\r\n  isPlatformUser,\r\n  MobileNavigationContainer: MobileNavigationContainerProp = (\r\n    <MobileNavigationContainer isPlatformNavigation={isPlatformUser} />\r\n  ),\r\n  TopNavContainer: TopNavContainerProp = <TopNavContainer />,\r\n  ...props\r\n}: LayoutProps) {\r\n  return (\r\n    <main className=\"bg-default relative z-0 flex-1 focus:outline-none\">\r\n      {/* show top navigation for md and smaller (tablet and phones) */}\r\n      {TopNavContainerProp}\r\n      <div className=\"max-w-full px-2 py-4 lg:px-6\">\r\n        <ErrorBoundary>\r\n          {!props.withoutMain ? <ShellMain {...props}>{props.children}</ShellMain> : props.children}\r\n        </ErrorBoundary>\r\n        {/* show bottom navigation for md and smaller (tablet and phones) on pages where back button doesn't exist */}\r\n        {!props.backPath ? MobileNavigationContainerProp : null}\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n```\r\n\r\n## CTA component\r\n\r\n`MainContainer` component has the `ShellMain` component. So far, we have only looked at Shell and ShellMain, we still need to \r\nunderstand this code snippet below.\r\n\r\n```\r\n{props.CTA && (\r\n  <div\r\n    className={classNames(\r\n      props.backPath\r\n        ? \"relative\"\r\n        : \"pwa:bottom-[max(7rem,_calc(5rem_+_env(safe-area-inset-bottom)))] fixed bottom-20 z-40 ltr:right-4 rtl:left-4 md:z-auto md:ltr:right-0 md:rtl:left-0\",\r\n      \"flex-shrink-0 [-webkit-app-region:no-drag] md:relative md:bottom-auto md:right-auto\"\r\n    )}>\r\n    {isLocaleReady && props.CTA}\r\n  </div>\r\n)}\r\n```\r\n\r\nNew button is passed down as `props.CTA` to the ShellMain component, let's check the [event-types-listing-view.tsx](https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L1006)\r\n\r\n```\r\n <Shell\r\n  ...\r\n  CTA={<CTA profileOptions={profileOptions} isOrganization={!!user?.organizationId} />}>\r\n  <InfiniteScrollMain\r\n    ...\r\n  />\r\n</Shell>\r\n```\r\n\r\nThis CTA is defined with in the [event-types-listing-view.tsx file](https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L840)\r\n\r\n```\r\nconst CTA = ({\r\n  profileOptions,\r\n  isOrganization,\r\n}: {\r\n  profileOptions: {\r\n    teamId: number | null | undefined;\r\n    label: string | null;\r\n    image: string;\r\n    membershipRole: MembershipRole | null | undefined;\r\n    slug: string | null;\r\n  }[];\r\n  isOrganization: boolean;\r\n}) => {\r\n  const { t } = useLocale();\r\n\r\n  if (!profileOptions.length) return null;\r\n\r\n  return (\r\n    <CreateButton\r\n      data-testid=\"new-event-type\"\r\n      subtitle={t(\"create_event_on\").toUpperCase()}\r\n      options={profileOptions}\r\n      createDialog={() => <CreateEventTypeDialog profileOptions={profileOptions} />}\r\n    />\r\n  );\r\n};\r\n```\r\n\r\n## CreateButton\r\n\r\nCreateButton is a generic component imported from `@calcom/ui`. It has a prop called `createDialog`. This is\r\nwhere you would pass your `CreateEventTypeDialog`. This dialog component shows you the event type \r\nform in a dialog.\r\n\r\nThe below code is picked from [ui/components/createButton/CreateButton.tsx](https://github.com/calcom/cal.com/blob/main/packages/ui/components/createButton/CreateButton.tsx#L40)\r\n\r\n```\r\nimport { usePathname, useRouter } from \"next/navigation\";\r\n\r\nimport { useCompatSearchParams } from \"@calcom/lib/hooks/useCompatSearchParams\";\r\nimport { useLocale } from \"@calcom/lib/hooks/useLocale\";\r\nimport type { ButtonColor } from \"@calcom/ui\";\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  Dropdown,\r\n  DropdownItem,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuTrigger,\r\n} from \"@calcom/ui\";\r\n\r\nexport interface Option {\r\n  platform?: boolean;\r\n  teamId: number | null | undefined; // if undefined, then it's a profile\r\n  label: string | null;\r\n  image: string | null;\r\n  slug: string | null;\r\n}\r\n\r\nexport type CreateBtnProps = {\r\n  options: Option[];\r\n  createDialog?: () => JSX.Element;\r\n  createFunction?: (teamId?: number, platform?: boolean) => void;\r\n  subtitle?: string;\r\n  buttonText?: string;\r\n  isPending?: boolean;\r\n  disableMobileButton?: boolean;\r\n  \"data-testid\"?: string;\r\n  color?: ButtonColor;\r\n};\r\n\r\n/**\r\n * @deprecated use CreateButtonWithTeamsList instead\r\n */\r\nexport function CreateButton(props: CreateBtnProps) {\r\n  const { t } = useLocale();\r\n  const router = useRouter();\r\n  const searchParams = useCompatSearchParams();\r\n  const pathname = usePathname();\r\n\r\n  const {\r\n    createDialog,\r\n    options,\r\n    isPending,\r\n    createFunction,\r\n    buttonText,\r\n    disableMobileButton,\r\n    subtitle,\r\n    ...restProps\r\n  } = props;\r\n  const CreateDialog = createDialog ? createDialog() : null;\r\n\r\n  const hasTeams = !!options.find((option) => option.teamId);\r\n  const platform = !!options.find((option) => option.platform);\r\n\r\n  // inject selection data into url for correct router history\r\n  const openModal = (option: Option) => {\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {!hasTeams && !platform ? (\r\n        <Button\r\n          onClick={() =>\r\n            !!CreateDialog\r\n              ? openModal(options[0])\r\n              : createFunction\r\n              ? createFunction(options[0].teamId || undefined)\r\n              : null\r\n          }\r\n          data-testid=\"create-button\"\r\n          StartIcon=\"plus\"\r\n          loading={isPending}\r\n          variant={disableMobileButton ? \"button\" : \"fab\"}\r\n          {...restProps}>\r\n          {buttonText ? buttonText : t(\"new\")}\r\n        </Button>\r\n      ) : (\r\n        <Dropdown>\r\n          <DropdownMenuTrigger asChild>\r\n            <Button\r\n              variant={disableMobileButton ? \"button\" : \"fab\"}\r\n              StartIcon=\"plus\"\r\n              data-testid=\"create-button-dropdown\"\r\n              loading={isPending}\r\n              {...restProps}>\r\n              {buttonText ? buttonText : t(\"new\")}\r\n            </Button>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent sideOffset={14} align=\"end\">\r\n            <DropdownMenuLabel>\r\n              <div className=\"w-48 text-left text-xs\">{subtitle}</div>\r\n            </DropdownMenuLabel>\r\n            {options.map((option, idx) => (\r\n              <DropdownMenuItem key={option.label}>\r\n                <DropdownItem\r\n                  type=\"button\"\r\n                  data-testid={`option${option.teamId ? \"-team\" : \"\"}-${idx}`}\r\n                  CustomStartIcon={<Avatar alt={option.label || \"\"} imageSrc={option.image} size=\"sm\" />}\r\n                  onClick={() =>\r\n                    !!CreateDialog\r\n                      ? openModal(option)\r\n                      : createFunction\r\n                      ? createFunction(option.teamId || undefined, option.platform)\r\n                      : null\r\n                  }>\r\n                  {\" \"}\r\n                  {/*improve this code */}\r\n                  <span>{option.label}</span>\r\n                </DropdownItem>\r\n              </DropdownMenuItem>\r\n            ))}\r\n          </DropdownMenuContent>\r\n        </Dropdown>\r\n      )}\r\n      {searchParams?.get(\"dialog\") === \"new\" && CreateDialog}\r\n    </>\r\n  );\r\n}\r\n```\r\n\r\nWe now need to go to the `CreateEventTypeDialog` component, we are just following along the code to learn how\r\nthe Create Event Type form dialog state is managed.\r\n\r\n## CreateEventTypeDialog.tsx\r\n\r\nThe below code is picked from [features/eventtypes/components/CreateEventTypeDialog.tsx](https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/CreateEventTypeDialog.tsx#L53)\r\n\r\n```\r\nimport type { EventType } from \"@prisma/client\";\r\nimport { isValidPhoneNumber } from \"libphonenumber-js\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { z } from \"zod\";\r\n\r\nimport { useOrgBranding } from \"@calcom/features/ee/organizations/context/provider\";\r\nimport { TeamEventTypeForm } from \"@calcom/features/ee/teams/components/TeamEventTypeForm\";\r\nimport { useCreateEventType } from \"@calcom/lib/hooks/useCreateEventType\";\r\nimport { useLocale } from \"@calcom/lib/hooks/useLocale\";\r\nimport { useTypedQuery } from \"@calcom/lib/hooks/useTypedQuery\";\r\nimport { MembershipRole, SchedulingType } from \"@calcom/prisma/enums\";\r\nimport { trpc } from \"@calcom/trpc/react\";\r\nimport { Button, Dialog, DialogClose, DialogContent, DialogFooter, showToast } from \"@calcom/ui\";\r\n\r\nimport CreateEventTypeForm from \"./CreateEventTypeForm\";\r\n\r\n// this describes the uniform data needed to create a new event type on Profile or Team\r\nexport interface EventTypeParent {\r\n  teamId: number | null | undefined; // if undefined, then it's a profile\r\n  membershipRole?: MembershipRole | null;\r\n  name?: string | null;\r\n  slug?: string | null;\r\n  image?: string | null;\r\n}\r\n\r\nconst locationFormSchema = z.array(\r\n  z.object({\r\n    locationType: z.string(),\r\n    locationAddress: z.string().optional(),\r\n    displayLocationPublicly: z.boolean().optional(),\r\n    locationPhoneNumber: z\r\n      .string()\r\n      .refine((val) => isValidPhoneNumber(val))\r\n      .optional(),\r\n    locationLink: z.string().url().optional(), // URL validates as new URL() - which requires HTTPS:// In the input field\r\n  })\r\n);\r\n\r\nconst querySchema = z.object({\r\n  eventPage: z.string().optional(),\r\n  teamId: z.union([z.string().transform((val) => +val), z.number()]).optional(),\r\n  title: z.string().optional(),\r\n  slug: z.string().optional(),\r\n  length: z.union([z.string().transform((val) => +val), z.number()]).optional(),\r\n  description: z.string().optional(),\r\n  schedulingType: z.nativeEnum(SchedulingType).optional(),\r\n  locations: z\r\n    .string()\r\n    .transform((jsonString) => locationFormSchema.parse(JSON.parse(jsonString)))\r\n    .optional(),\r\n});\r\n\r\nexport default function CreateEventTypeDialog({\r\n  profileOptions,\r\n}: {\r\n  profileOptions: {\r\n    teamId: number | null | undefined;\r\n    label: string | null;\r\n    image: string | undefined;\r\n    membershipRole: MembershipRole | null | undefined;\r\n  }[];\r\n}) {\r\n  const { t } = useLocale();\r\n  const router = useRouter();\r\n  const orgBranding = useOrgBranding();\r\n\r\n  const {\r\n    data: { teamId, eventPage: pageSlug },\r\n  } = useTypedQuery(querySchema);\r\n\r\n  const teamProfile = profileOptions.find((profile) => profile.teamId === teamId);\r\n\r\n  const isTeamAdminOrOwner =\r\n    teamId !== undefined &&\r\n    (teamProfile?.membershipRole === MembershipRole.OWNER ||\r\n      teamProfile?.membershipRole === MembershipRole.ADMIN);\r\n\r\n  const onSuccessMutation = (eventType: EventType) => {\r\n    router.replace(`/event-types/${eventType.id}${teamId ? \"?tabName=team\" : \"\"}`);\r\n    showToast(\r\n      t(\"event_type_created_successfully\", {\r\n        eventTypeTitle: eventType.title,\r\n      }),\r\n      \"success\"\r\n    );\r\n  };\r\n\r\n  const onErrorMutation = (err: string) => {\r\n    showToast(err, \"error\");\r\n  };\r\n\r\n  const SubmitButton = (isPending: boolean) => {\r\n    return (\r\n      <DialogFooter showDivider>\r\n        <DialogClose />\r\n        <Button type=\"submit\" loading={isPending}>\r\n          {t(\"continue\")}\r\n        </Button>\r\n      </DialogFooter>\r\n    );\r\n  };\r\n\r\n  const { form, createMutation, isManagedEventType } = useCreateEventType(onSuccessMutation, onErrorMutation);\r\n\r\n  const urlPrefix = orgBranding?.fullDomain ?? process.env.NEXT_PUBLIC_WEBSITE_URL;\r\n\r\n  const { data: team } = trpc.viewer.teams.get.useQuery(\r\n    { teamId: teamId ?? -1, isOrg: false },\r\n    { enabled: !!teamId }\r\n  );\r\n\r\n  return (\r\n    <Dialog\r\n      name=\"new\"\r\n      clearQueryParamsOnClose={[\"eventPage\", \"type\", \"description\", \"title\", \"length\", \"slug\", \"locations\"]}>\r\n      <DialogContent\r\n        type=\"creation\"\r\n        enableOverflow\r\n        title={teamId ? t(\"add_new_team_event_type\") : t(\"add_new_event_type\")}\r\n        description={t(\"new_event_type_to_book_description\")}>\r\n        {teamId ? (\r\n          <TeamEventTypeForm\r\n            teamSlug={team?.slug}\r\n            teamId={teamId}\r\n            isTeamAdminOrOwner={isTeamAdminOrOwner}\r\n            urlPrefix={urlPrefix}\r\n            isPending={createMutation.isPending}\r\n            form={form}\r\n            isManagedEventType={isManagedEventType}\r\n            handleSubmit={(values) => {\r\n              createMutation.mutate(values);\r\n            }}\r\n            SubmitButton={SubmitButton}\r\n          />\r\n        ) : (\r\n          <CreateEventTypeForm\r\n            urlPrefix={urlPrefix}\r\n            isPending={createMutation.isPending}\r\n            form={form}\r\n            isManagedEventType={isManagedEventType}\r\n            handleSubmit={(values) => {\r\n              createMutation.mutate(values);\r\n            }}\r\n            SubmitButton={SubmitButton}\r\n            pageSlug={pageSlug}\r\n          />\r\n        )}\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n```\r\n\r\nIn the DialogContent, there's two kinds of forms:\r\n- TeamEventTypeForm\r\n- CreateEventTypeForm\r\n\r\nLet's review the `CreateEventTypeForm`.\r\n\r\n## CreateEventTypeForm\r\n\r\nThe below code snippet shows the props sent to `CreateEventTypeForm`:\r\n\r\n```\r\n<CreateEventTypeForm\r\n  urlPrefix={urlPrefix}\r\n  isPending={createMutation.isPending}\r\n  form={form}\r\n  isManagedEventType={isManagedEventType}\r\n  handleSubmit={(values) => {\r\n    createMutation.mutate(values);\r\n  }}\r\n  SubmitButton={SubmitButton}\r\n  pageSlug={pageSlug}\r\n/>\r\n```\r\n### props\r\n\r\n`handleSubmit` prop calls a mutation function:\r\n\r\n```\r\ncreateMutation.mutate(values);\r\n```\r\n\r\nAt [line 103](https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/CreateEventTypeDialog.tsx#L103), \r\nyou will find createMutation is imported from `useCreateEventType`.\r\n\r\n```\r\nconst { form, createMutation, isManagedEventType } = useCreateEventType(onSuccessMutation, onErrorMutation);\r\n```\r\n\r\nYou can learn more about these mutations in API layer.\r\n\r\n## useCreateEventType\r\n\r\nThis below code is picked from [useCreateEventType](https://github.com/calcom/cal.com/blob/main/packages/lib/hooks/useCreateEventType.ts#L17)\r\n\r\n```\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nexport const useCreateEventTypeForm = () => {\r\n  const form = useForm<CreateEventTypeFormValues>({\r\n    defaultValues: {\r\n      length: 15,\r\n    },\r\n    resolver: zodResolver(createEventTypeInput),\r\n  });\r\n  ...\r\n  return { form, isManagedEventType };\r\n};\r\n\r\nexport const useCreateEventType = (\r\n  onSuccessMutation: (eventType: EventType) => void,\r\n  onErrorMutation: (message: string) => void\r\n) => {\r\n  ...\r\n  const { form, isManagedEventType } = useCreateEventTypeForm();\r\n  ...\r\n}\r\n```\r\n\r\nOkay, now it is clear that CreateEventType uses [react-hook-form](https://react-hook-form.com/) to manage\r\nthe form state and on submitting the form, \r\n\r\n```\r\nhandleSubmit={(values) => {\r\n  createMutation.mutate(values);\r\n}}\r\n```\r\n\r\n# Edit existing event type \r\n\r\nIn the event types listing page, when you click on options as shown below:\r\n\r\n[Insert screenshot of options and dropdown in https://app.cal.com/event-types]\r\n\r\nYou will see `Edit`. When you click on this `Edit` button, you will be navigated to https://app.cal.com/event-types/{id}\r\n\r\n[Insert screenshot of - https://app.cal.com/event-types/989456?tabName=setup]\r\n\r\n`/event-types` is located at [apps/web/app/(use-page-wrapper)/(main-nav)/event-types/page.tsx](https://github.com/calcom/cal.com/blob/main/apps/web/app/(use-page-wrapper)/(main-nav)/event-types/page.tsx) \r\nat the time of writing this guide and returns the below shown component\r\n\r\n```\r\nconst Page = async ({ params, searchParams }: PageProps) => {\r\n  const context = buildLegacyCtx(headers(), cookies(), params, searchParams);\r\n  const session = await getServerSession({ req: context.req });\r\n\r\n  if (!session?.user?.id) {\r\n    redirect(\"/auth/login\");\r\n  }\r\n\r\n  await ssrInit(context);\r\n  const t = await getTranslate();\r\n\r\n  return (\r\n    <ShellMainAppDir\r\n      heading={t(\"event_types_page_title\")}\r\n      subtitle={t(\"event_types_page_subtitle\")}\r\n      CTA={<EventTypesCTA />}>\r\n      <EventTypes />\r\n    </ShellMainAppDir>\r\n  );\r\n};\r\n```\r\n\r\n## EventTypes component\r\n\r\n```\r\nimport EventTypes, { EventTypesCTA } from \"~/event-types/views/event-types-listing-view\";\r\n```\r\n\r\n`~/` is alias for [modules folder](https://github.com/calcom/cal.com/tree/main/apps/web/modules) that you can\r\nfind in [tsconfig.json](https://github.com/calcom/cal.com/blob/main/apps/web/tsconfig.json#L1C1-L6C28).\r\n\r\n```\r\n{\r\n  \"extends\": \"@calcom/tsconfig/nextjs.json\",\r\n  \"compilerOptions\": {\r\n    \"baseUrl\": \".\",\r\n    \"paths\": {\r\n      \"~/*\": [\"modules/*\"],\r\n```\r\n\r\n[event-types-listing-view.tsx](https://github.com/calcom/cal.com/blob/9608669f98bb0952137ecec374ac7125717fc9db/apps/web/modules/event-types/views/event-types-listing-view.tsx#L611)\r\nis a large file containing 1020 lines at the writing this guide. You will find the \"Edit\" button at [line 611](https://github.com/calcom/cal.com/blob/9608669f98bb0952137ecec374ac7125717fc9db/apps/web/modules/event-types/views/event-types-listing-view.tsx#L611)\r\n\r\n```\r\n<DropdownMenuContent>\r\n  {!readOnly && (\r\n    <DropdownMenuItem>\r\n      <DropdownItem\r\n        type=\"button\"\r\n        data-testid={`event-type-edit-${type.id}`}\r\n        StartIcon=\"pencil\"\r\n        onClick={() => router.push(`/event-types/${type.id}`)}>\r\n        {t(\"edit\")}\r\n      </DropdownItem>\r\n    </DropdownMenuItem>\r\n  )}\r\n```\r\n\r\nOn clicking \"Edit\", you are redirected to `/event-types/${some-id}`.\r\n\r\n[Insert screenshot of - https://app.cal.com/event-types/989456?tabName=setup]\r\n\r\nBy default, tabName is set to \"setup\" when you visit `event-types/{id}` as a query param so the url becomes `event-types/{id}?tabName=setup`\r\n\r\n## Finding the route\r\n\r\nWe need to find where this `event-types/{id}` dynamic route is in the cal.com codebase. This page is found at \r\n[web/app/(use-page-wrapper)/event-types/[type]/page.tsx](https://github.com/calcom/cal.com/blob/9608669f98bb0952137ecec374ac7125717fc9db/apps/web/app/(use-page-wrapper)/event-types/%5Btype%5D/page.tsx) \r\n\r\nThe below code snippet is picked from [event-types/[type]/page.tsx]()\r\n\r\n```\r\n...\r\nimport EventTypePageWrapper from \"~/event-types/views/event-types-single-view\";\r\n...\r\nconst ServerPage = async ({ params, searchParams }: _PageProps) => {\r\n  const legacyCtx = buildLegacyCtx(headers(), cookies(), params, searchParams);\r\n  const props = await getData(legacyCtx);\r\n\r\n  return <EventTypePageWrapper {...props} />;\r\n};\r\n\r\nexport default ServerPage;\r\n```\r\n\r\nThis page just returns a wrapper, EventTypePageWrapper, imported from `~/event-types/views/event-types-single-view`\r\nWe know where to look for, i.e., in the modules folder \r\n\r\n## EventTypePageWrapper\r\n\r\nThe below code is picked from [apps/web/modules/event-types/views/event-types-single-view.tsx](https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-single-view.tsx#L7)\r\n\r\n```\r\n\"use client\";\r\n\r\nimport { EventType } from \"@calcom/atoms/monorepo\";\r\n\r\nimport type { PageProps } from \"@lib/event-types/[type]/getServerSideProps\";\r\n\r\nconst EventTypePageWrapper = ({ type, ...rest }: PageProps) => {\r\n  return <EventType {...rest} id={type} />;\r\n};\r\n\r\nexport default EventTypePageWrapper;\r\n```\r\n\r\nSince `event-types/{id}` has multiple tabs, the code displaying these tabs is organized differently.\r\nLet's follow along the code and see how EventType looks like.\r\n\r\n## EventType\r\n\r\n`EventType` is imported from `@calcom/atoms/monorepo`. `@calcom/atoms` here is a package name.\r\nTo find this package, we need to search for `@calcom/atoms` in the `cal.com` codebase.\r\n\r\nYou will find the below search results for [\"package.json @calcom/atoms\" in cal.com codebase](https://github.com/search?q=repo%3Acalcom%2Fcal.com+package.json+%40calcom%2Fatoms&type=code) \r\n\r\n[Insert screenshot of - https://github.com/search?q=repo%3Acalcom%2Fcal.com+package.json+%40calcom%2Fatoms&type=code]\r\n\r\n[Line 16 in platform/atoms/monorepo](https://github.com/calcom/cal.com/blob/962f692e298c2498260baceb8659b0cc55452fe5/packages/platform/atoms/monorepo.ts#L16)\r\nexports `EventTypeWebWrapper as EventType`.\r\n\r\nCal.com uses hashmap for the tabs found at [line 177](https://github.com/calcom/cal.com/blob/962f692e298c2498260baceb8659b0cc55452fe5/packages/platform/atoms/event-types/wrappers/EventTypeWebWrapper.tsx#L177)\r\n\r\n[EventTypeWebWrapper](https://github.com/calcom/cal.com/blob/962f692e298c2498260baceb8659b0cc55452fe5/packages/platform/atoms/event-types/wrappers/EventTypeWebWrapper.tsx#L177)\r\nhas 370 lines at the time of writing, since this guide is about state management, let's review the state \r\nmanagement in setup tab. \r\n\r\n## State management in EventSetupTab\r\n\r\nYou will find the below code at [line 59](https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/tabs/setup/EventSetupTab.tsx#L59),\r\n\r\n```\r\nconst formMethods = useFormContext<FormValues>();\r\n```\r\n\r\nit tells us few things:\r\n\r\n- useFormContext\r\nuseFormContext is imported from \"react-hook-form\", found at [line 2](https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/tabs/setup/EventSetupTab.tsx#L2C1-L2C62) \r\nas shown below:\r\n\r\n```\r\nimport { Controller, useFormContext } from \"react-hook-form\";\r\n```\r\n\r\nRead more about [useFormContext](https://react-hook-form.com/docs/useformcontext)\r\n\r\n- FormValues\r\n\r\nFollow along these below:\r\n- https://github.com/calcom/cal.com/blob/962f692e298c2498260baceb8659b0cc55452fe5/packages/platform/atoms/event-types/wrappers/EventTypeWebWrapper.tsx#L330\r\n- https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/tabs/setup/EventSetupTab.tsx#L2C1-L2C62\r\n- https://github.com/calcom/cal.com/blob/962f692e298c2498260baceb8659b0cc55452fe5/packages/features/eventtypes/components/EventType.tsx\r\n- https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/EventTypeLayout.tsx#L53\r\n",
    "code": "var Component=(()=>{var h=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),v=(t,e)=>{for(var r in e)a(t,r,{get:e[r],enumerable:!0})},s=(t,e,r,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of u(e))!g.call(t,o)&&o!==r&&a(t,o,{get:()=>e[o],enumerable:!(i=m(e,o))||i.enumerable});return t};var y=(t,e,r)=>(r=t!=null?h(b(t)):{},s(e||!t||!t.__esModule?a(r,\"default\",{value:t,enumerable:!0}):r,t)),w=t=>s(a({},\"__esModule\",{value:!0}),t);var c=f((E,l)=>{l.exports=_jsx_runtime});var x={};v(x,{default:()=>d,frontmatter:()=>T});var n=y(c()),T={title:\"state-management in cal.com\"};function p(t){let e={a:\"a\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"[State management in add/edit event type]\"}),`\n`,(0,n.jsx)(e.p,{children:\"In this guide, we will review the state management in the following actions in Event Types page:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Add new event type\"}),`\n`,(0,n.jsx)(e.li,{children:\"Edit existing event type\"}),`\n`]}),`\n`,(0,n.jsx)(e.h1,{id:\"add-new-event-type\",children:\"Add new event type\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In the \",(0,n.jsx)(e.a,{href:\"https://app.cal.com/event-types\",children:\"event types page\"}),', when you click on \"+ New\" button in the top right,']}),`\n`,(0,n.jsx)(e.p,{children:\"[Insert screenshot of New button]\"}),`\n`,(0,n.jsx)(e.p,{children:\"you will see this below dialog\"}),`\n`,(0,n.jsx)(e.p,{children:\"[Insert screenshot of dialog]\"}),`\n`,(0,n.jsx)(e.p,{children:\"Let's find out how the code behind this works.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"new-button\",children:\"New button\"}),`\n`,(0,n.jsx)(e.p,{children:\"I had to open dev tools and find a unique identifier that helped me locate this button in the cal.com codebase.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`<div class=\"pwa:bottom-[max(7rem,_calc(5rem_+_env(safe-area-inset-bottom)))] fixed bottom-20 z-40 ltr:right-4 rtl:left-4 md:z-auto md:ltr:right-0 md:rtl:left-0 flex-shrink-0 [-webkit-app-region:no-drag] md:relative md:bottom-auto md:right-auto\">\\r\n  <button data-testid=\"new-event-type\" type=\"button\" class=\"whitespace-nowrap inline-flex items-center text-sm font-medium relative transition disabled:cursor-not-allowed rounded-full justify-center md:rounded-md radix-state-open:rotate-45 md:radix-state-open:rotate-0 radix-state-open:shadown-none radix-state-open:ring-0 !shadow-none bg-brand-default hover:bg-brand-emphasis focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-brand-default text-brand disabled:bg-brand-subtle disabled:text-brand-subtle disabled:opacity-40 disabled:hover:bg-brand-subtle disabled:hover:text-brand-default disabled:hover:opacity-40 px-4 py-2.5 h-14 md:h-9 md:w-auto md:px-4 md:py-2.5\"><svg height=\"16\" width=\"16\" class=\"fill-transparent hidden h-4 w-4 stroke-[1.5px] ltr:-ml-1 ltr:mr-2 rtl:-mr-1 rtl:ml-2 md:inline-flex\" aria-hidden=\"true\"><use href=\"#plus\"></use></svg><svg height=\"16\" width=\"16\" class=\"fill-transparent inline h-6 w-6 md:hidden\" data-testid=\"plus\" aria-hidden=\"true\"><use href=\"#plus\"></use></svg><span class=\"hidden md:inline\">New</span></button></div>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"I searched for \",(0,n.jsx)(e.code,{children:\"pwa:bottom-[max\"}),\" in the cal.com codebase and found it in \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/bfeafaa21f7dc70e02cbd26ab6670459678b4bcc/packages/features/shell/Shell.tsx#L192\",children:\"Shell.tsx\"}),`\\r\nat line 187 in ShellMain component.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`{props.CTA && (\\r\n  <div\\r\n    className={classNames(\\r\n      props.backPath\\r\n        ? \"relative\"\\r\n        : \"pwa:bottom-[max(7rem,_calc(5rem_+_env(safe-area-inset-bottom)))] fixed bottom-20 z-40 ltr:right-4 rtl:left-4 md:z-auto md:ltr:right-0 md:rtl:left-0\",\\r\n      \"flex-shrink-0 [-webkit-app-region:no-drag] md:relative md:bottom-auto md:right-auto\"\\r\n    )}>\\r\n    {isLocaleReady && props.CTA}\\r\n  </div>\\r\n)}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx\",children:\"event-types-listing-view.tsx\"}),`,\\r\nShell component is used as shown below:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`return (\\r\n    <Shell\\r\n      withoutMain={false}\\r\n      title={t(\"event_types_page_title\")}\\r\n      description={t(\"event_types_page_subtitle\")}\\r\n      withoutSeo\\r\n      heading={t(\"event_types_page_title\")}\\r\n      hideHeadingOnMobile\\r\n      subtitle={t(\"event_types_page_subtitle\")}\\r\n      CTA={<CTA profileOptions={profileOptions} isOrganization={!!user?.organizationId} />}>\n`})}),`\n`,(0,n.jsx)(e.p,{children:`But when we searched for this New button in the cal.com codebase, we found it in ShellMain component. So how's Shell and ShellMain\\r\nrelated?`}),`\n`,(0,n.jsx)(e.h2,{id:\"shell\",children:\"Shell\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Below code is picked from \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/packages/features/shell/Shell.tsx#L120\",children:\"Shell.tsx at line 120\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`export default function Shell(props: LayoutProps) {\\r\n  // if a page is unauthed and isPublic is true, the redirect does not happen.\\r\n  useRedirectToLoginIfUnauthenticated(props.isPublic);\\r\n  useRedirectToOnboardingIfNeeded();\\r\n  useAppTheme();\\r\n\\r\n  return !props.isPublic ? (\\r\n    <KBarWrapper withKBar>\\r\n      <Layout {...props} />\\r\n    </KBarWrapper>\\r\n  ) : (\\r\n    <PublicShell {...props} />\\r\n  );\\r\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[`To understand how Shell and ShellMain are related, we need to follow the Layout component. Below is the Layout code picked from\\r\n`,(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/packages/features/shell/Shell.tsx#L25\",children:\"line 25 in Shell.tsx\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const Layout = (props: LayoutProps) => {\\r\n  const { banners, bannersHeight } = useBanners();\\r\n  const pathname = usePathname();\\r\n  const isFullPageWithoutSidebar = pathname?.startsWith(\"/apps/routing-forms/reporting/\");\\r\n  const pageTitle = typeof props.heading === \"string\" && !props.title ? props.heading : props.title;\\r\n  const withoutSeo = props.withoutSeo ?? props.withoutMain ?? false;\\r\n\\r\n  useFormbricks();\\r\n\\r\n  return (\\r\n    <>\\r\n      {!withoutSeo && (\\r\n        <HeadSeo\\r\n          title={pageTitle ?? APP_NAME}\\r\n          description={props.description ?? props.subtitle?.toString() ?? \"\"}\\r\n        />\\r\n      )}\\r\n      <div>\\r\n        <Toaster position=\"bottom-right\" />\\r\n      </div>\\r\n\\r\n      <TimezoneChangeDialog />\\r\n\\r\n      <div className=\"flex min-h-screen flex-col\">\\r\n        {banners && !props.isPlatformUser && !isFullPageWithoutSidebar && (\\r\n          <BannerContainer banners={banners} />\\r\n        )}\\r\n\\r\n        <div className=\"flex flex-1\" data-testid=\"dashboard-shell\">\\r\n          {props.SidebarContainer ? (\\r\n            cloneElement(props.SidebarContainer, { bannersHeight })\\r\n          ) : (\\r\n            <SideBarContainer isPlatformUser={props.isPlatformUser} bannersHeight={bannersHeight} />\\r\n          )}\\r\n          <div className=\"flex w-0 flex-1 flex-col\">\\r\n            <MainContainer {...props} />\\r\n          </div>\\r\n        </div>\\r\n      </div>\\r\n    </>\\r\n  );\\r\n};\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"maincontainer\",children:\"MainContainer\"}),`\n`,(0,n.jsx)(e.p,{children:\"MainContainer component above has the below code picked from Shell.tsx\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`function MainContainer({\\r\n  isPlatformUser,\\r\n  MobileNavigationContainer: MobileNavigationContainerProp = (\\r\n    <MobileNavigationContainer isPlatformNavigation={isPlatformUser} />\\r\n  ),\\r\n  TopNavContainer: TopNavContainerProp = <TopNavContainer />,\\r\n  ...props\\r\n}: LayoutProps) {\\r\n  return (\\r\n    <main className=\"bg-default relative z-0 flex-1 focus:outline-none\">\\r\n      {/* show top navigation for md and smaller (tablet and phones) */}\\r\n      {TopNavContainerProp}\\r\n      <div className=\"max-w-full px-2 py-4 lg:px-6\">\\r\n        <ErrorBoundary>\\r\n          {!props.withoutMain ? <ShellMain {...props}>{props.children}</ShellMain> : props.children}\\r\n        </ErrorBoundary>\\r\n        {/* show bottom navigation for md and smaller (tablet and phones) on pages where back button doesn't exist */}\\r\n        {!props.backPath ? MobileNavigationContainerProp : null}\\r\n      </div>\\r\n    </main>\\r\n  );\\r\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"cta-component\",children:\"CTA component\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"MainContainer\"}),\" component has the \",(0,n.jsx)(e.code,{children:\"ShellMain\"}),` component. So far, we have only looked at Shell and ShellMain, we still need to\\r\nunderstand this code snippet below.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`{props.CTA && (\\r\n  <div\\r\n    className={classNames(\\r\n      props.backPath\\r\n        ? \"relative\"\\r\n        : \"pwa:bottom-[max(7rem,_calc(5rem_+_env(safe-area-inset-bottom)))] fixed bottom-20 z-40 ltr:right-4 rtl:left-4 md:z-auto md:ltr:right-0 md:rtl:left-0\",\\r\n      \"flex-shrink-0 [-webkit-app-region:no-drag] md:relative md:bottom-auto md:right-auto\"\\r\n    )}>\\r\n    {isLocaleReady && props.CTA}\\r\n  </div>\\r\n)}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"New button is passed down as \",(0,n.jsx)(e.code,{children:\"props.CTA\"}),\" to the ShellMain component, let's check the \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L1006\",children:\"event-types-listing-view.tsx\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:` <Shell\\r\n  ...\\r\n  CTA={<CTA profileOptions={profileOptions} isOrganization={!!user?.organizationId} />}>\\r\n  <InfiniteScrollMain\\r\n    ...\\r\n  />\\r\n</Shell>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This CTA is defined with in the \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L840\",children:\"event-types-listing-view.tsx file\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const CTA = ({\\r\n  profileOptions,\\r\n  isOrganization,\\r\n}: {\\r\n  profileOptions: {\\r\n    teamId: number | null | undefined;\\r\n    label: string | null;\\r\n    image: string;\\r\n    membershipRole: MembershipRole | null | undefined;\\r\n    slug: string | null;\\r\n  }[];\\r\n  isOrganization: boolean;\\r\n}) => {\\r\n  const { t } = useLocale();\\r\n\\r\n  if (!profileOptions.length) return null;\\r\n\\r\n  return (\\r\n    <CreateButton\\r\n      data-testid=\"new-event-type\"\\r\n      subtitle={t(\"create_event_on\").toUpperCase()}\\r\n      options={profileOptions}\\r\n      createDialog={() => <CreateEventTypeDialog profileOptions={profileOptions} />}\\r\n    />\\r\n  );\\r\n};\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"createbutton\",children:\"CreateButton\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"CreateButton is a generic component imported from \",(0,n.jsx)(e.code,{children:\"@calcom/ui\"}),\". It has a prop called \",(0,n.jsx)(e.code,{children:\"createDialog\"}),`. This is\\r\nwhere you would pass your `,(0,n.jsx)(e.code,{children:\"CreateEventTypeDialog\"}),`. This dialog component shows you the event type\\r\nform in a dialog.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The below code is picked from \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/packages/ui/components/createButton/CreateButton.tsx#L40\",children:\"ui/components/createButton/CreateButton.tsx\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import { usePathname, useRouter } from \"next/navigation\";\\r\n\\r\nimport { useCompatSearchParams } from \"@calcom/lib/hooks/useCompatSearchParams\";\\r\nimport { useLocale } from \"@calcom/lib/hooks/useLocale\";\\r\nimport type { ButtonColor } from \"@calcom/ui\";\\r\nimport {\\r\n  Avatar,\\r\n  Button,\\r\n  Dropdown,\\r\n  DropdownItem,\\r\n  DropdownMenuContent,\\r\n  DropdownMenuItem,\\r\n  DropdownMenuLabel,\\r\n  DropdownMenuTrigger,\\r\n} from \"@calcom/ui\";\\r\n\\r\nexport interface Option {\\r\n  platform?: boolean;\\r\n  teamId: number | null | undefined; // if undefined, then it's a profile\\r\n  label: string | null;\\r\n  image: string | null;\\r\n  slug: string | null;\\r\n}\\r\n\\r\nexport type CreateBtnProps = {\\r\n  options: Option[];\\r\n  createDialog?: () => JSX.Element;\\r\n  createFunction?: (teamId?: number, platform?: boolean) => void;\\r\n  subtitle?: string;\\r\n  buttonText?: string;\\r\n  isPending?: boolean;\\r\n  disableMobileButton?: boolean;\\r\n  \"data-testid\"?: string;\\r\n  color?: ButtonColor;\\r\n};\\r\n\\r\n/**\\r\n * @deprecated use CreateButtonWithTeamsList instead\\r\n */\\r\nexport function CreateButton(props: CreateBtnProps) {\\r\n  const { t } = useLocale();\\r\n  const router = useRouter();\\r\n  const searchParams = useCompatSearchParams();\\r\n  const pathname = usePathname();\\r\n\\r\n  const {\\r\n    createDialog,\\r\n    options,\\r\n    isPending,\\r\n    createFunction,\\r\n    buttonText,\\r\n    disableMobileButton,\\r\n    subtitle,\\r\n    ...restProps\\r\n  } = props;\\r\n  const CreateDialog = createDialog ? createDialog() : null;\\r\n\\r\n  const hasTeams = !!options.find((option) => option.teamId);\\r\n  const platform = !!options.find((option) => option.platform);\\r\n\\r\n  // inject selection data into url for correct router history\\r\n  const openModal = (option: Option) => {\\r\n  };\\r\n\\r\n  return (\\r\n    <>\\r\n      {!hasTeams && !platform ? (\\r\n        <Button\\r\n          onClick={() =>\\r\n            !!CreateDialog\\r\n              ? openModal(options[0])\\r\n              : createFunction\\r\n              ? createFunction(options[0].teamId || undefined)\\r\n              : null\\r\n          }\\r\n          data-testid=\"create-button\"\\r\n          StartIcon=\"plus\"\\r\n          loading={isPending}\\r\n          variant={disableMobileButton ? \"button\" : \"fab\"}\\r\n          {...restProps}>\\r\n          {buttonText ? buttonText : t(\"new\")}\\r\n        </Button>\\r\n      ) : (\\r\n        <Dropdown>\\r\n          <DropdownMenuTrigger asChild>\\r\n            <Button\\r\n              variant={disableMobileButton ? \"button\" : \"fab\"}\\r\n              StartIcon=\"plus\"\\r\n              data-testid=\"create-button-dropdown\"\\r\n              loading={isPending}\\r\n              {...restProps}>\\r\n              {buttonText ? buttonText : t(\"new\")}\\r\n            </Button>\\r\n          </DropdownMenuTrigger>\\r\n          <DropdownMenuContent sideOffset={14} align=\"end\">\\r\n            <DropdownMenuLabel>\\r\n              <div className=\"w-48 text-left text-xs\">{subtitle}</div>\\r\n            </DropdownMenuLabel>\\r\n            {options.map((option, idx) => (\\r\n              <DropdownMenuItem key={option.label}>\\r\n                <DropdownItem\\r\n                  type=\"button\"\\r\n                  data-testid={\\`option\\${option.teamId ? \"-team\" : \"\"}-\\${idx}\\`}\\r\n                  CustomStartIcon={<Avatar alt={option.label || \"\"} imageSrc={option.image} size=\"sm\" />}\\r\n                  onClick={() =>\\r\n                    !!CreateDialog\\r\n                      ? openModal(option)\\r\n                      : createFunction\\r\n                      ? createFunction(option.teamId || undefined, option.platform)\\r\n                      : null\\r\n                  }>\\r\n                  {\" \"}\\r\n                  {/*improve this code */}\\r\n                  <span>{option.label}</span>\\r\n                </DropdownItem>\\r\n              </DropdownMenuItem>\\r\n            ))}\\r\n          </DropdownMenuContent>\\r\n        </Dropdown>\\r\n      )}\\r\n      {searchParams?.get(\"dialog\") === \"new\" && CreateDialog}\\r\n    </>\\r\n  );\\r\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"We now need to go to the \",(0,n.jsx)(e.code,{children:\"CreateEventTypeDialog\"}),` component, we are just following along the code to learn how\\r\nthe Create Event Type form dialog state is managed.`]}),`\n`,(0,n.jsx)(e.h2,{id:\"createeventtypedialogtsx\",children:\"CreateEventTypeDialog.tsx\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The below code is picked from \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/CreateEventTypeDialog.tsx#L53\",children:\"features/eventtypes/components/CreateEventTypeDialog.tsx\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import type { EventType } from \"@prisma/client\";\\r\nimport { isValidPhoneNumber } from \"libphonenumber-js\";\\r\nimport { useRouter } from \"next/navigation\";\\r\nimport { z } from \"zod\";\\r\n\\r\nimport { useOrgBranding } from \"@calcom/features/ee/organizations/context/provider\";\\r\nimport { TeamEventTypeForm } from \"@calcom/features/ee/teams/components/TeamEventTypeForm\";\\r\nimport { useCreateEventType } from \"@calcom/lib/hooks/useCreateEventType\";\\r\nimport { useLocale } from \"@calcom/lib/hooks/useLocale\";\\r\nimport { useTypedQuery } from \"@calcom/lib/hooks/useTypedQuery\";\\r\nimport { MembershipRole, SchedulingType } from \"@calcom/prisma/enums\";\\r\nimport { trpc } from \"@calcom/trpc/react\";\\r\nimport { Button, Dialog, DialogClose, DialogContent, DialogFooter, showToast } from \"@calcom/ui\";\\r\n\\r\nimport CreateEventTypeForm from \"./CreateEventTypeForm\";\\r\n\\r\n// this describes the uniform data needed to create a new event type on Profile or Team\\r\nexport interface EventTypeParent {\\r\n  teamId: number | null | undefined; // if undefined, then it's a profile\\r\n  membershipRole?: MembershipRole | null;\\r\n  name?: string | null;\\r\n  slug?: string | null;\\r\n  image?: string | null;\\r\n}\\r\n\\r\nconst locationFormSchema = z.array(\\r\n  z.object({\\r\n    locationType: z.string(),\\r\n    locationAddress: z.string().optional(),\\r\n    displayLocationPublicly: z.boolean().optional(),\\r\n    locationPhoneNumber: z\\r\n      .string()\\r\n      .refine((val) => isValidPhoneNumber(val))\\r\n      .optional(),\\r\n    locationLink: z.string().url().optional(), // URL validates as new URL() - which requires HTTPS:// In the input field\\r\n  })\\r\n);\\r\n\\r\nconst querySchema = z.object({\\r\n  eventPage: z.string().optional(),\\r\n  teamId: z.union([z.string().transform((val) => +val), z.number()]).optional(),\\r\n  title: z.string().optional(),\\r\n  slug: z.string().optional(),\\r\n  length: z.union([z.string().transform((val) => +val), z.number()]).optional(),\\r\n  description: z.string().optional(),\\r\n  schedulingType: z.nativeEnum(SchedulingType).optional(),\\r\n  locations: z\\r\n    .string()\\r\n    .transform((jsonString) => locationFormSchema.parse(JSON.parse(jsonString)))\\r\n    .optional(),\\r\n});\\r\n\\r\nexport default function CreateEventTypeDialog({\\r\n  profileOptions,\\r\n}: {\\r\n  profileOptions: {\\r\n    teamId: number | null | undefined;\\r\n    label: string | null;\\r\n    image: string | undefined;\\r\n    membershipRole: MembershipRole | null | undefined;\\r\n  }[];\\r\n}) {\\r\n  const { t } = useLocale();\\r\n  const router = useRouter();\\r\n  const orgBranding = useOrgBranding();\\r\n\\r\n  const {\\r\n    data: { teamId, eventPage: pageSlug },\\r\n  } = useTypedQuery(querySchema);\\r\n\\r\n  const teamProfile = profileOptions.find((profile) => profile.teamId === teamId);\\r\n\\r\n  const isTeamAdminOrOwner =\\r\n    teamId !== undefined &&\\r\n    (teamProfile?.membershipRole === MembershipRole.OWNER ||\\r\n      teamProfile?.membershipRole === MembershipRole.ADMIN);\\r\n\\r\n  const onSuccessMutation = (eventType: EventType) => {\\r\n    router.replace(\\`/event-types/\\${eventType.id}\\${teamId ? \"?tabName=team\" : \"\"}\\`);\\r\n    showToast(\\r\n      t(\"event_type_created_successfully\", {\\r\n        eventTypeTitle: eventType.title,\\r\n      }),\\r\n      \"success\"\\r\n    );\\r\n  };\\r\n\\r\n  const onErrorMutation = (err: string) => {\\r\n    showToast(err, \"error\");\\r\n  };\\r\n\\r\n  const SubmitButton = (isPending: boolean) => {\\r\n    return (\\r\n      <DialogFooter showDivider>\\r\n        <DialogClose />\\r\n        <Button type=\"submit\" loading={isPending}>\\r\n          {t(\"continue\")}\\r\n        </Button>\\r\n      </DialogFooter>\\r\n    );\\r\n  };\\r\n\\r\n  const { form, createMutation, isManagedEventType } = useCreateEventType(onSuccessMutation, onErrorMutation);\\r\n\\r\n  const urlPrefix = orgBranding?.fullDomain ?? process.env.NEXT_PUBLIC_WEBSITE_URL;\\r\n\\r\n  const { data: team } = trpc.viewer.teams.get.useQuery(\\r\n    { teamId: teamId ?? -1, isOrg: false },\\r\n    { enabled: !!teamId }\\r\n  );\\r\n\\r\n  return (\\r\n    <Dialog\\r\n      name=\"new\"\\r\n      clearQueryParamsOnClose={[\"eventPage\", \"type\", \"description\", \"title\", \"length\", \"slug\", \"locations\"]}>\\r\n      <DialogContent\\r\n        type=\"creation\"\\r\n        enableOverflow\\r\n        title={teamId ? t(\"add_new_team_event_type\") : t(\"add_new_event_type\")}\\r\n        description={t(\"new_event_type_to_book_description\")}>\\r\n        {teamId ? (\\r\n          <TeamEventTypeForm\\r\n            teamSlug={team?.slug}\\r\n            teamId={teamId}\\r\n            isTeamAdminOrOwner={isTeamAdminOrOwner}\\r\n            urlPrefix={urlPrefix}\\r\n            isPending={createMutation.isPending}\\r\n            form={form}\\r\n            isManagedEventType={isManagedEventType}\\r\n            handleSubmit={(values) => {\\r\n              createMutation.mutate(values);\\r\n            }}\\r\n            SubmitButton={SubmitButton}\\r\n          />\\r\n        ) : (\\r\n          <CreateEventTypeForm\\r\n            urlPrefix={urlPrefix}\\r\n            isPending={createMutation.isPending}\\r\n            form={form}\\r\n            isManagedEventType={isManagedEventType}\\r\n            handleSubmit={(values) => {\\r\n              createMutation.mutate(values);\\r\n            }}\\r\n            SubmitButton={SubmitButton}\\r\n            pageSlug={pageSlug}\\r\n          />\\r\n        )}\\r\n      </DialogContent>\\r\n    </Dialog>\\r\n  );\\r\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"In the DialogContent, there's two kinds of forms:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"TeamEventTypeForm\"}),`\n`,(0,n.jsx)(e.li,{children:\"CreateEventTypeForm\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Let's review the \",(0,n.jsx)(e.code,{children:\"CreateEventTypeForm\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"createeventtypeform\",children:\"CreateEventTypeForm\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The below code snippet shows the props sent to \",(0,n.jsx)(e.code,{children:\"CreateEventTypeForm\"}),\":\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`<CreateEventTypeForm\\r\n  urlPrefix={urlPrefix}\\r\n  isPending={createMutation.isPending}\\r\n  form={form}\\r\n  isManagedEventType={isManagedEventType}\\r\n  handleSubmit={(values) => {\\r\n    createMutation.mutate(values);\\r\n  }}\\r\n  SubmitButton={SubmitButton}\\r\n  pageSlug={pageSlug}\\r\n/>\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"props\",children:\"props\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"handleSubmit\"}),\" prop calls a mutation function:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`createMutation.mutate(values);\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"At \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/CreateEventTypeDialog.tsx#L103\",children:\"line 103\"}),`,\\r\nyou will find createMutation is imported from `,(0,n.jsx)(e.code,{children:\"useCreateEventType\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const { form, createMutation, isManagedEventType } = useCreateEventType(onSuccessMutation, onErrorMutation);\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"You can learn more about these mutations in API layer.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"usecreateeventtype\",children:\"useCreateEventType\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"This below code is picked from \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/packages/lib/hooks/useCreateEventType.ts#L17\",children:\"useCreateEventType\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import { useForm } from \"react-hook-form\";\\r\n\\r\nexport const useCreateEventTypeForm = () => {\\r\n  const form = useForm<CreateEventTypeFormValues>({\\r\n    defaultValues: {\\r\n      length: 15,\\r\n    },\\r\n    resolver: zodResolver(createEventTypeInput),\\r\n  });\\r\n  ...\\r\n  return { form, isManagedEventType };\\r\n};\\r\n\\r\nexport const useCreateEventType = (\\r\n  onSuccessMutation: (eventType: EventType) => void,\\r\n  onErrorMutation: (message: string) => void\\r\n) => {\\r\n  ...\\r\n  const { form, isManagedEventType } = useCreateEventTypeForm();\\r\n  ...\\r\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Okay, now it is clear that CreateEventType uses \",(0,n.jsx)(e.a,{href:\"https://react-hook-form.com/\",children:\"react-hook-form\"}),` to manage\\r\nthe form state and on submitting the form,`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`handleSubmit={(values) => {\\r\n  createMutation.mutate(values);\\r\n}}\n`})}),`\n`,(0,n.jsx)(e.h1,{id:\"edit-existing-event-type\",children:\"Edit existing event type\"}),`\n`,(0,n.jsx)(e.p,{children:\"In the event types listing page, when you click on options as shown below:\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert screenshot of options and dropdown in \",(0,n.jsx)(e.a,{href:\"https://app.cal.com/event-types\",children:\"https://app.cal.com/event-types\"}),\"]\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"You will see \",(0,n.jsx)(e.code,{children:\"Edit\"}),\". When you click on this \",(0,n.jsx)(e.code,{children:\"Edit\"}),\" button, you will be navigated to \",(0,n.jsx)(e.a,{href:\"https://app.cal.com/event-types/%7Bid%7D\",children:\"https://app.cal.com/event-types/{id}\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert screenshot of - \",(0,n.jsx)(e.a,{href:\"https://app.cal.com/event-types/989456?tabName=setup\",children:\"https://app.cal.com/event-types/989456?tabName=setup\"}),\"]\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"/event-types\"}),\" is located at \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/app/(use-page-wrapper)/(main-nav)/event-types/page.tsx\",children:\"apps/web/app/(use-page-wrapper)/(main-nav)/event-types/page.tsx\"}),`\\r\nat the time of writing this guide and returns the below shown component`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const Page = async ({ params, searchParams }: PageProps) => {\\r\n  const context = buildLegacyCtx(headers(), cookies(), params, searchParams);\\r\n  const session = await getServerSession({ req: context.req });\\r\n\\r\n  if (!session?.user?.id) {\\r\n    redirect(\"/auth/login\");\\r\n  }\\r\n\\r\n  await ssrInit(context);\\r\n  const t = await getTranslate();\\r\n\\r\n  return (\\r\n    <ShellMainAppDir\\r\n      heading={t(\"event_types_page_title\")}\\r\n      subtitle={t(\"event_types_page_subtitle\")}\\r\n      CTA={<EventTypesCTA />}>\\r\n      <EventTypes />\\r\n    </ShellMainAppDir>\\r\n  );\\r\n};\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"eventtypes-component\",children:\"EventTypes component\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import EventTypes, { EventTypesCTA } from \"~/event-types/views/event-types-listing-view\";\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"~/\"}),\" is alias for \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/tree/main/apps/web/modules\",children:\"modules folder\"}),` that you can\\r\nfind in `,(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/tsconfig.json#L1C1-L6C28\",children:\"tsconfig.json\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`{\\r\n  \"extends\": \"@calcom/tsconfig/nextjs.json\",\\r\n  \"compilerOptions\": {\\r\n    \"baseUrl\": \".\",\\r\n    \"paths\": {\\r\n      \"~/*\": [\"modules/*\"],\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/9608669f98bb0952137ecec374ac7125717fc9db/apps/web/modules/event-types/views/event-types-listing-view.tsx#L611\",children:\"event-types-listing-view.tsx\"}),`\\r\nis a large file containing 1020 lines at the writing this guide. You will find the \"Edit\" button at `,(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/9608669f98bb0952137ecec374ac7125717fc9db/apps/web/modules/event-types/views/event-types-listing-view.tsx#L611\",children:\"line 611\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`<DropdownMenuContent>\\r\n  {!readOnly && (\\r\n    <DropdownMenuItem>\\r\n      <DropdownItem\\r\n        type=\"button\"\\r\n        data-testid={\\`event-type-edit-\\${type.id}\\`}\\r\n        StartIcon=\"pencil\"\\r\n        onClick={() => router.push(\\`/event-types/\\${type.id}\\`)}>\\r\n        {t(\"edit\")}\\r\n      </DropdownItem>\\r\n    </DropdownMenuItem>\\r\n  )}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:['On clicking \"Edit\", you are redirected to ',(0,n.jsx)(e.code,{children:\"/event-types/${some-id}\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert screenshot of - \",(0,n.jsx)(e.a,{href:\"https://app.cal.com/event-types/989456?tabName=setup\",children:\"https://app.cal.com/event-types/989456?tabName=setup\"}),\"]\"]}),`\n`,(0,n.jsxs)(e.p,{children:['By default, tabName is set to \"setup\" when you visit ',(0,n.jsx)(e.code,{children:\"event-types/{id}\"}),\" as a query param so the url becomes \",(0,n.jsx)(e.code,{children:\"event-types/{id}?tabName=setup\"})]}),`\n`,(0,n.jsx)(e.h2,{id:\"finding-the-route\",children:\"Finding the route\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"We need to find where this \",(0,n.jsx)(e.code,{children:\"event-types/{id}\"}),` dynamic route is in the cal.com codebase. This page is found at\\r\n`,(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/9608669f98bb0952137ecec374ac7125717fc9db/apps/web/app/(use-page-wrapper)/event-types/%5Btype%5D/page.tsx\",children:\"web/app/(use-page-wrapper)/event-types/[type]/page.tsx\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The below code snippet is picked from \",(0,n.jsx)(e.a,{href:\"\",children:\"event-types/[type]/page.tsx\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`...\\r\nimport EventTypePageWrapper from \"~/event-types/views/event-types-single-view\";\\r\n...\\r\nconst ServerPage = async ({ params, searchParams }: _PageProps) => {\\r\n  const legacyCtx = buildLegacyCtx(headers(), cookies(), params, searchParams);\\r\n  const props = await getData(legacyCtx);\\r\n\\r\n  return <EventTypePageWrapper {...props} />;\\r\n};\\r\n\\r\nexport default ServerPage;\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This page just returns a wrapper, EventTypePageWrapper, imported from \",(0,n.jsx)(e.code,{children:\"~/event-types/views/event-types-single-view\"}),`\\r\nWe know where to look for, i.e., in the modules folder`]}),`\n`,(0,n.jsx)(e.h2,{id:\"eventtypepagewrapper\",children:\"EventTypePageWrapper\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The below code is picked from \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-single-view.tsx#L7\",children:\"apps/web/modules/event-types/views/event-types-single-view.tsx\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`\"use client\";\\r\n\\r\nimport { EventType } from \"@calcom/atoms/monorepo\";\\r\n\\r\nimport type { PageProps } from \"@lib/event-types/[type]/getServerSideProps\";\\r\n\\r\nconst EventTypePageWrapper = ({ type, ...rest }: PageProps) => {\\r\n  return <EventType {...rest} id={type} />;\\r\n};\\r\n\\r\nexport default EventTypePageWrapper;\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Since \",(0,n.jsx)(e.code,{children:\"event-types/{id}\"}),` has multiple tabs, the code displaying these tabs is organized differently.\\r\nLet's follow along the code and see how EventType looks like.`]}),`\n`,(0,n.jsx)(e.h2,{id:\"eventtype\",children:\"EventType\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"EventType\"}),\" is imported from \",(0,n.jsx)(e.code,{children:\"@calcom/atoms/monorepo\"}),\". \",(0,n.jsx)(e.code,{children:\"@calcom/atoms\"}),` here is a package name.\\r\nTo find this package, we need to search for `,(0,n.jsx)(e.code,{children:\"@calcom/atoms\"}),\" in the \",(0,n.jsx)(e.code,{children:\"cal.com\"}),\" codebase.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"You will find the below search results for \",(0,n.jsx)(e.a,{href:\"https://github.com/search?q=repo%3Acalcom%2Fcal.com+package.json+%40calcom%2Fatoms&type=code\",children:'\"package.json @calcom/atoms\" in cal.com codebase'})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert screenshot of - \",(0,n.jsx)(e.a,{href:\"https://github.com/search?q=repo%3Acalcom%2Fcal.com+package.json+%40calcom%2Fatoms&type=code\",children:\"https://github.com/search?q=repo%3Acalcom%2Fcal.com+package.json+%40calcom%2Fatoms&type=code\"}),\"]\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/962f692e298c2498260baceb8659b0cc55452fe5/packages/platform/atoms/monorepo.ts#L16\",children:\"Line 16 in platform/atoms/monorepo\"}),`\\r\nexports `,(0,n.jsx)(e.code,{children:\"EventTypeWebWrapper as EventType\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Cal.com uses hashmap for the tabs found at \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/962f692e298c2498260baceb8659b0cc55452fe5/packages/platform/atoms/event-types/wrappers/EventTypeWebWrapper.tsx#L177\",children:\"line 177\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/962f692e298c2498260baceb8659b0cc55452fe5/packages/platform/atoms/event-types/wrappers/EventTypeWebWrapper.tsx#L177\",children:\"EventTypeWebWrapper\"}),`\\r\nhas 370 lines at the time of writing, since this guide is about state management, let's review the state\\r\nmanagement in setup tab.`]}),`\n`,(0,n.jsx)(e.h2,{id:\"state-management-in-eventsetuptab\",children:\"State management in EventSetupTab\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"You will find the below code at \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/tabs/setup/EventSetupTab.tsx#L59\",children:\"line 59\"}),\",\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const formMethods = useFormContext<FormValues>();\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"it tells us few things:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`useFormContext\\r\nuseFormContext is imported from \"react-hook-form\", found at `,(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/tabs/setup/EventSetupTab.tsx#L2C1-L2C62\",children:\"line 2\"}),`\\r\nas shown below:`]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import { Controller, useFormContext } from \"react-hook-form\";\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Read more about \",(0,n.jsx)(e.a,{href:\"https://react-hook-form.com/docs/useformcontext\",children:\"useFormContext\"})]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"FormValues\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Follow along these below:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/962f692e298c2498260baceb8659b0cc55452fe5/packages/platform/atoms/event-types/wrappers/EventTypeWebWrapper.tsx#L330\",children:\"https://github.com/calcom/cal.com/blob/962f692e298c2498260baceb8659b0cc55452fe5/packages/platform/atoms/event-types/wrappers/EventTypeWebWrapper.tsx#L330\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/tabs/setup/EventSetupTab.tsx#L2C1-L2C62\",children:\"https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/tabs/setup/EventSetupTab.tsx#L2C1-L2C62\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/962f692e298c2498260baceb8659b0cc55452fe5/packages/features/eventtypes/components/EventType.tsx\",children:\"https://github.com/calcom/cal.com/blob/962f692e298c2498260baceb8659b0cc55452fe5/packages/features/eventtypes/components/EventType.tsx\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/EventTypeLayout.tsx#L53\",children:\"https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/EventTypeLayout.tsx#L53\"})}),`\n`]})]})}function d(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(p,{...t})}):p(t)}return w(x);})();\n;return Component;"
  },
  "_id": "guide/codebase-architecture/cal-com/state-management/3-add-edit-event-type.mdx",
  "_raw": {
    "sourceFilePath": "guide/codebase-architecture/cal-com/state-management/3-add-edit-event-type.mdx",
    "sourceFileName": "3-add-edit-event-type.mdx",
    "sourceFileDir": "guide/codebase-architecture/cal-com/state-management",
    "contentType": "mdx",
    "flattenedPath": "guide/codebase-architecture/cal-com/state-management/3-add-edit-event-type"
  },
  "type": "Doc",
  "slug": "/guide/codebase-architecture/cal-com/state-management/3-add-edit-event-type",
  "slugAsParams": "codebase-architecture/cal-com/state-management/3-add-edit-event-type"
}
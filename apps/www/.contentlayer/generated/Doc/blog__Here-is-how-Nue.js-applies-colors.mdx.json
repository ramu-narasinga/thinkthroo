{
  "title": "Here is how Nue-js applies colors to the console output in the CLI.",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\nIn this article, we will review how Nue.js applies colors to the console logs in the CLI. \n\n![](https://cdn-images-1.medium.com/max/1000/1*HdOsm9UfUY36VvL3GBBRPg.png)\n\nI found this log function in the [cli.js file](https://github.com/nuejs/nue/blob/master/packages/nuekit/src/cli.js#L82).\n\n```plaintext\nasync function printVersion() {\n  log(`Nue ${version} ${colors.green('•')} ${getEngine()}`)\n}\n```\n\nlog function is imported from [packages/nuekit/src/util.js](https://github.com/nuejs/nue/blob/master/packages/nuekit/src/util.js#L38)\n\n```plaintext\nexport function log(msg, extra = '') {\n  console.log(colors.green('✓'), msg, extra)\n}\n```\n\nWhat is colors.green here? colors function is defined in the same file and has the below code:\n\n```plaintext\n// console colors\nexport const colors = function() {\n  const codes = { red: 31, green: 32, yellow: 33, blue: 34, magenta: 35, cyan: 36, gray: 90 }\n  const fns = {}\n  const noColor = process.env.NO_COLOR || !(process.env.TERM || process.platform == 'win32')\n\n  for (const key in codes) {\n    fns[key] = msg => noColor ? msg : `\\u001b[${codes[key]}m${msg}\\u001b[39m`\n  }\n  return fns\n}()\n```\n\nI find this function really interesting because in the wild, OSS projects use [Picocolors](https://www.npmjs.com/package/picocolors) or [chalk](https://www.npmjs.com/package/chalk) to apply colors to the console output in the CLI.\n\nThere’s codes and noColor is set to true if there is an env, NO\\_COLOR, or when the platform is ‘win32’ and TERM is set (not sure what this TERM is).\n\nThe trick is in the below code:\n\n```plaintext\nfor (const key in codes) {\n    fns[key] = msg => noColor ? msg : `\\u001b[${codes[key]}m${msg}\\u001b[39m`\n  }\n```\n\nHere a `\\u001b[${codes[key]}m${msg}\\u001b[39m` is a **template string** commonly seen in **JavaScript or TypeScript** used to format **console output with colors** using **ANSI escape codes**. Interesting.\n\n### About me:\n\nHey, my name is [Ramu Narasinga](https://ramunarasinga.com). I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\n\n***I am open to work on interesting projects. Send me an email at ramu.narasinga@gmail.com***\n\nMy Github — [https://github.com/ramu-narasinga](https://github.com/ramu-narasinga)\n\nMy website — [https://ramunarasinga.com](https://ramunarasinga.com/)\n\nMy Youtube channel — [https://www.youtube.com/@ramu-narasinga](https://www.youtube.com/@ramu-narasinga)\n\nLearning platform — [https://thinkthroo.com](https://thinkthroo.com/)\n\nCodebase Architecture — [https://app.thinkthroo.com/architecture](https://app.thinkthroo.com/architecture)\n\nBest practices — [https://app.thinkthroo.com/best-practices](https://app.thinkthroo.com/best-practices)\n\nProduction-grade projects — [https://app.thinkthroo.com/production-grade-projects](https://app.thinkthroo.com/production-grade-projects)\n\n### References:\n\n1. [https://github.com/nuejs/nue/blob/master/packages/nuekit/src/util.js#L47](https://github.com/nuejs/nue/blob/master/packages/nuekit/src/util.js#L47)\n    \n2. [https://github.com/nuejs/nue/blob/master/packages/nuekit/src/util.js#L38](https://github.com/nuejs/nue/blob/master/packages/nuekit/src/util.js#L38)\n    \n3. [https://github.com/nuejs/nue/blob/master/packages/nuekit/src/cli.js#L82](https://github.com/nuejs/nue/blob/master/packages/nuekit/src/cli.js#L82)\n    \n4. [https://www.npmjs.com/package/chalk](https://www.npmjs.com/package/chalk)\n    \n5. [https://www.npmjs.com/package/picocolors](https://www.npmjs.com/package/picocolors)",
    "code": "var Component=(()=>{var d=Object.create;var r=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var b=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),k=(a,e)=>{for(var t in e)r(a,t,{get:e[t],enumerable:!0})},i=(a,e,t,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of u(e))!f.call(a,s)&&s!==t&&r(a,s,{get:()=>e[s],enumerable:!(c=m(e,s))||c.enumerable});return a};var w=(a,e,t)=>(t=a!=null?d(g(a)):{},i(e||!a||!a.__esModule?r(t,\"default\",{value:a,enumerable:!0}):t,a)),j=a=>i(r({},\"__esModule\",{value:!0}),a);var o=b((L,l)=>{l.exports=_jsx_runtime});var N={};k(N,{default:()=>p,frontmatter:()=>y});var n=w(o()),y={title:\"Here is how Nue-js applies colors to the console output in the\\xA0CLI.\"};function h(a){let e={a:\"a\",code:\"code\",div:\"div\",em:\"em\",h3:\"h3\",img:\"img\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",...a.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"In this article, we will review how Nue.js applies colors to the console logs in the CLI.\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://cdn-images-1.medium.com/max/1000/1*HdOsm9UfUY36VvL3GBBRPg.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"I found this log function in the \",(0,n.jsx)(e.a,{href:\"https://github.com/nuejs/nue/blob/master/packages/nuekit/src/cli.js#L82\",children:\"cli.js file\"}),\".\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"async function printVersion() {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  log(`Nue ${version} ${colors.green('\\u2022')} ${getEngine()}`)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"log function is imported from \",(0,n.jsx)(e.a,{href:\"https://github.com/nuejs/nue/blob/master/packages/nuekit/src/util.js#L38\",children:\"packages/nuekit/src/util.js\"})]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"export function log(msg, extra = '') {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  console.log(colors.green('\\u2713'), msg, extra)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"What is colors.green here? colors function is defined in the same file and has the below code:\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"// console colors\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"export const colors = function() {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const codes = { red: 31, green: 32, yellow: 33, blue: 34, magenta: 35, cyan: 36, gray: 90 }\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const fns = {}\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const noColor = process.env.NO_COLOR || !(process.env.TERM || process.platform == 'win32')\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  for (const key in codes) {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    fns[key] = msg => noColor ? msg : `\\\\u001b[${codes[key]}m${msg}\\\\u001b[39m`\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  }\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  return fns\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}()\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"I find this function really interesting because in the wild, OSS projects use \",(0,n.jsx)(e.a,{href:\"https://www.npmjs.com/package/picocolors\",children:\"Picocolors\"}),\" or \",(0,n.jsx)(e.a,{href:\"https://www.npmjs.com/package/chalk\",children:\"chalk\"}),\" to apply colors to the console output in the CLI.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"There\\u2019s codes and noColor is set to true if there is an env, NO_COLOR, or when the platform is \\u2018win32\\u2019 and TERM is set (not sure what this TERM is).\"}),`\n`,(0,n.jsx)(e.p,{children:\"The trick is in the below code:\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"for (const key in codes) {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    fns[key] = msg => noColor ? msg : `\\\\u001b[${codes[key]}m${msg}\\\\u001b[39m`\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  }\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Here a \",(0,n.jsx)(e.code,{children:\"\\\\u001b[${codes[key]}m${msg}\\\\u001b[39m\"}),\" is a \",(0,n.jsx)(e.strong,{children:\"template string\"}),\" commonly seen in \",(0,n.jsx)(e.strong,{children:\"JavaScript or TypeScript\"}),\" used to format \",(0,n.jsx)(e.strong,{children:\"console output with colors\"}),\" using \",(0,n.jsx)(e.strong,{children:\"ANSI escape codes\"}),\". Interesting.\"]}),`\n`,(0,n.jsx)(e.h3,{id:\"about-me\",children:\"About me:\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Hey, my name is \",(0,n.jsx)(e.a,{href:\"https://ramunarasinga.com\",children:\"Ramu Narasinga\"}),\". I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:(0,n.jsxs)(e.strong,{children:[\"I am open to work on interesting projects. Send me an email at \",(0,n.jsx)(e.a,{href:\"mailto:ramu.narasinga@gmail.com\",children:\"ramu.narasinga@gmail.com\"})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Github\\u200A\\u2014\\u200A\",(0,n.jsx)(e.a,{href:\"https://github.com/ramu-narasinga\",children:\"https://github.com/ramu-narasinga\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My website\\u200A\\u2014\\u200A\",(0,n.jsx)(e.a,{href:\"https://ramunarasinga.com/\",children:\"https://ramunarasinga.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Youtube channel\\u200A\\u2014\\u200A\",(0,n.jsx)(e.a,{href:\"https://www.youtube.com/@ramu-narasinga\",children:\"https://www.youtube.com/@ramu-narasinga\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Learning platform\\u200A\\u2014\\u200A\",(0,n.jsx)(e.a,{href:\"https://thinkthroo.com/\",children:\"https://thinkthroo.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Codebase Architecture\\u200A\\u2014\\u200A\",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/architecture\",children:\"https://app.thinkthroo.com/architecture\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Best practices\\u200A\\u2014\\u200A\",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/best-practices\",children:\"https://app.thinkthroo.com/best-practices\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Production-grade projects\\u200A\\u2014\\u200A\",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/production-grade-projects\",children:\"https://app.thinkthroo.com/production-grade-projects\"})]}),`\n`,(0,n.jsx)(e.h3,{id:\"references\",children:\"References:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/nuejs/nue/blob/master/packages/nuekit/src/util.js#L47\",children:\"https://github.com/nuejs/nue/blob/master/packages/nuekit/src/util.js#L47\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/nuejs/nue/blob/master/packages/nuekit/src/util.js#L38\",children:\"https://github.com/nuejs/nue/blob/master/packages/nuekit/src/util.js#L38\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/nuejs/nue/blob/master/packages/nuekit/src/cli.js#L82\",children:\"https://github.com/nuejs/nue/blob/master/packages/nuekit/src/cli.js#L82\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://www.npmjs.com/package/chalk\",children:\"https://www.npmjs.com/package/chalk\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://www.npmjs.com/package/picocolors\",children:\"https://www.npmjs.com/package/picocolors\"})}),`\n`]}),`\n`]})]})}function p(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,{...a,children:(0,n.jsx)(h,{...a})}):h(a)}return j(N);})();\n;return Component;"
  },
  "_id": "blog/Here-is-how-Nue.js-applies-colors.mdx",
  "_raw": {
    "sourceFilePath": "blog/Here-is-how-Nue.js-applies-colors.mdx",
    "sourceFileName": "Here-is-how-Nue.js-applies-colors.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/Here-is-how-Nue.js-applies-colors"
  },
  "type": "Doc",
  "slug": "/blog/Here-is-how-Nue.js-applies-colors",
  "slugAsParams": "Here-is-how-Nue.js-applies-colors"
}
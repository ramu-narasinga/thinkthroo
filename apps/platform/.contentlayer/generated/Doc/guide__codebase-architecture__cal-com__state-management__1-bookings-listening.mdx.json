{
  "title": "state-management in cal.com\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\n[C: Bookings listing page]\r\n\r\n[Insert screenshot of bookings page]\r\n\r\nCal.com uses Next.js pages router, there a folder named bookings inside [pages folder](https://github.com/calcom/cal.com/tree/main/apps/web/pages/bookings)\r\nand in the [status.tsx](https://github.com/calcom/cal.com/blob/main/apps/web/pages/bookings/%5Bstatus%5D.tsx)\r\n, you will find the below code:\r\n\r\n```\r\nimport type { GetStaticPaths } from \"next\";\r\n\r\nimport PageWrapper from \"@components/PageWrapper\";\r\n\r\nimport { validStatuses } from \"~/bookings/lib/validStatuses\";\r\nimport BookingsListingView from \"~/bookings/views/bookings-listing-view\";\r\n\r\nexport { getStaticProps } from \"~/bookings/views/bookings-listing-view.getStaticProps\";\r\n\r\nconst BookingsListingPage = new Proxy<{\r\n  (): JSX.Element;\r\n  PageWrapper?: typeof PageWrapper;\r\n}>(BookingsListingView, {});\r\n\r\nBookingsListingPage.PageWrapper = PageWrapper;\r\n\r\nexport const getStaticPaths: GetStaticPaths = () => {\r\n  return {\r\n    paths: validStatuses.map((status) => ({\r\n      params: { status },\r\n      locale: \"en\",\r\n    })),\r\n    fallback: \"blocking\",\r\n  };\r\n};\r\n\r\nexport default BookingsListingPage;\r\n```\r\n\r\nPay attention to the imports at the top of this code snippet. Listing view component is imported from\r\n`/bookings/views/bookings-listing-view`\r\n\r\nThere's a dedicated components structure chapter in this guide to help you understand more about \r\ncal.com's component structures.\r\n\r\n# Bookings-listinig-view\r\n\r\nYou will find Bookings listing view component in [modules folder](https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx)\r\n\r\n[Insert a screenshot of - https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx]\r\n\r\nAt this point, it is important to ask yourself the right questions.\r\n\r\n1. How is the data fetched?\r\n2. Is there any state updated based on fetch response?\r\n3. Does the rendered JSX have any conditions inside the html code? if so, what are those conditions?\r\n\r\n## 1. How is the data fetched?\r\n\r\nThe below code is responsible to fetch the data. cal.com uses tRPC to fetch the data. There's a \r\ndedicated chapter about API layer in this guide, let's focus on the state management.\r\n\r\n```\r\n const query = trpc.viewer.bookings.get.useInfiniteQuery(\r\n    {\r\n      limit: 10,\r\n      filters: {\r\n        ...filterQuery,\r\n        status: filterQuery.status ?? status,\r\n      },\r\n    },\r\n    {\r\n      enabled: true,\r\n      getNextPageParam: (lastPage) => lastPage.nextCursor,\r\n    }\r\n  );\r\n``` \r\n## 2. Is there any state updated based on fetch response?\r\n\r\nThere are no state variables updated based on the query but the query response is processed differently.\r\n\r\n### Example 1:\r\nAt [Line 130 in bookings-listing-view](https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L130C3-L142C16)\r\nyou will find the below code:\r\n\r\n```\r\nconst bookingsToday =\r\n  query.data?.pages.map((page) =>\r\n    page.bookings.filter((booking: BookingOutput) => {\r\n      recurringInfoToday = page.recurringInfo.find(\r\n        (info) => info.recurringEventId === booking.recurringEventId\r\n      );\r\n\r\n      return (\r\n        dayjs(booking.startTime).tz(user?.timeZone).format(\"YYYY-MM-DD\") ===\r\n        dayjs().tz(user?.timeZone).format(\"YYYY-MM-DD\")\r\n      );\r\n    })\r\n)[0] || [];\r\n```\r\n\r\n`bookingsToday` here is updated based on `query.data`.\r\n\r\n### Example 2:\r\n\r\nSimilarly, `isEmpty` is computed based on `query.data`. Below code is picked from [line 103](https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L103C3-L103C58)\r\n\r\n```\r\nconst isEmpty = !query.data?.pages[0]?.bookings.length;\r\n```\r\n\r\nYou could make a tRPC call and process the response further to update variables with required response values,\r\nwithout using any `setState` methods. We can also observe that this component is on client side as it has \r\n\"use client\" at the top of the file. tRPC call did not happen inside a useEffect with an empty array dependency.\r\n\r\n## Does the rendered JSX have any conditions inside the html code? if so, what are those conditions?\r\nIn the [bookings-listing-view.tsx](https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L159),\r\nbased on the query status, certain components are rendered. \r\n\r\nQuery status can be:\r\n- error\r\n- pending\r\n- success  \r\n\r\n### Error condition\r\nBelow code is picked from [bookings-listing-view.tsx](https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L151C11-L153C13)\r\n\r\n```\r\n{query.status === \"error\" && (\r\n  <Alert severity=\"error\" title={t(\"something_went_wrong\")} message={query.error.message} />\r\n)}\r\n```\r\n\r\n### Pending condition\r\nBelow code can be found at line 151.\r\n\r\n```\r\n{(query.status === \"pending\" || query.isPaused) && <SkeletonLoader />}\r\n```\r\n\r\n### Success condition\r\nIf the query status is successful, this condition is associated with `isEmpty` variable. If there's no bookings\r\navailable, the below code handles success + isEmpty condition, picked from [line 227](https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L227C11-L238C13):\r\n\r\n```\r\n{query.status === \"success\" && isEmpty && (\r\n  <div className=\"flex items-center justify-center pt-2 xl:pt-0\">\r\n    <EmptyScreen\r\n      Icon=\"calendar\"\r\n      headline={t(\"no_status_bookings_yet\", { status: t(status).toLowerCase() })}\r\n      description={t(\"no_status_bookings_yet_description\", {\r\n        status: t(status).toLowerCase(),\r\n        description: t(descriptionByStatus[status]),\r\n      })}\r\n    />\r\n  </div>\r\n)}\r\n```\r\n\r\nIf there's bookings available, the below code handles success + !isEmpty condition, picked from [line 155](https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L155C11-L226C13):\r\n\r\n```\r\n{query.status === \"success\" && !isEmpty && (\r\n<>\r\n    {!!bookingsToday.length && status === \"upcoming\" && (\r\n      <div className=\"mb-6 pt-2 xl:pt-0\">\r\n        <WipeMyCalActionButton bookingStatus={status} bookingsEmpty={isEmpty} />\r\n        <p className=\"text-subtle mb-2 text-xs font-medium uppercase leading-4\">{t(\"today\")}</p>\r\n        <div className=\"border-subtle overflow-hidden rounded-md border\">\r\n          <table className=\"w-full max-w-full table-fixed\">\r\n            <tbody className=\"bg-default divide-subtle divide-y\" data-testid=\"today-bookings\">\r\n              <Fragment>\r\n                {bookingsToday.map((booking: BookingOutput) => (\r\n                  <BookingListItem\r\n                    key={booking.id}\r\n                    loggedInUser={{\r\n                      userId: user?.id,\r\n                      userTimeZone: user?.timeZone,\r\n                      userTimeFormat: user?.timeFormat,\r\n                      userEmail: user?.email,\r\n                    }}\r\n                    listingStatus={status}\r\n                    recurringInfo={recurringInfoToday}\r\n                    {...booking}\r\n                  />\r\n                ))}\r\n              </Fragment>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    )}\r\n    <div className=\"pt-2 xl:pt-0\">\r\n      <div className=\"border-subtle overflow-hidden rounded-md border\">\r\n        <table data-testid={`${status}-bookings`} className=\"w-full max-w-full table-fixed\">\r\n          <tbody className=\"bg-default divide-subtle divide-y\" data-testid=\"bookings\">\r\n            {query.data.pages.map((page, index) => (\r\n              <Fragment key={index}>\r\n                {page.bookings.filter(filterBookings).map((booking: BookingOutput) => {\r\n                  const recurringInfo = page.recurringInfo.find(\r\n                    (info) => info.recurringEventId === booking.recurringEventId\r\n                  );\r\n                  return (\r\n                    <BookingListItem\r\n                      key={booking.id}\r\n                      loggedInUser={{\r\n                        userId: user?.id,\r\n                        userTimeZone: user?.timeZone,\r\n                        userTimeFormat: user?.timeFormat,\r\n                        userEmail: user?.email,\r\n                      }}\r\n                      listingStatus={status}\r\n                      recurringInfo={recurringInfo}\r\n                      {...booking}\r\n                    />\r\n                  );\r\n                })}\r\n              </Fragment>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <div className=\"text-default p-4 text-center\" ref={buttonInView.ref}>\r\n        <Button\r\n          color=\"minimal\"\r\n          loading={query.isFetchingNextPage}\r\n          disabled={!query.hasNextPage}\r\n          onClick={() => query.fetchNextPage()}>\r\n          {query.hasNextPage ? t(\"load_more_results\") : t(\"no_more_results\")}\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  </>\r\n)}\r\n```\r\n\r\n# References:\r\n1. https://github.com/calcom/cal.com/tree/main/apps/web/pages/bookings\r\n",
    "code": "var Component=(()=>{var u=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),k=(t,e)=>{for(var i in e)o(t,i,{get:e[i],enumerable:!0})},a=(t,e,i,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of g(e))!b.call(t,r)&&r!==i&&o(t,r,{get:()=>e[r],enumerable:!(s=p(e,r))||s.enumerable});return t};var w=(t,e,i)=>(i=t!=null?u(m(t)):{},a(e||!t||!t.__esModule?o(i,\"default\",{value:t,enumerable:!0}):i,t)),y=t=>a(o({},\"__esModule\",{value:!0}),t);var c=f((P,d)=>{d.exports=_jsx_runtime});var x={};k(x,{default:()=>h,frontmatter:()=>v});var n=w(c()),v={title:\"state-management in cal.com\"};function l(t){let e={a:\"a\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"[C: Bookings listing page]\"}),`\n`,(0,n.jsx)(e.p,{children:\"[Insert screenshot of bookings page]\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Cal.com uses Next.js pages router, there a folder named bookings inside \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/tree/main/apps/web/pages/bookings\",children:\"pages folder\"}),`\\r\nand in the `,(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/pages/bookings/%5Bstatus%5D.tsx\",children:\"status.tsx\"}),`\\r\n, you will find the below code:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import type { GetStaticPaths } from \"next\";\\r\n\\r\nimport PageWrapper from \"@components/PageWrapper\";\\r\n\\r\nimport { validStatuses } from \"~/bookings/lib/validStatuses\";\\r\nimport BookingsListingView from \"~/bookings/views/bookings-listing-view\";\\r\n\\r\nexport { getStaticProps } from \"~/bookings/views/bookings-listing-view.getStaticProps\";\\r\n\\r\nconst BookingsListingPage = new Proxy<{\\r\n  (): JSX.Element;\\r\n  PageWrapper?: typeof PageWrapper;\\r\n}>(BookingsListingView, {});\\r\n\\r\nBookingsListingPage.PageWrapper = PageWrapper;\\r\n\\r\nexport const getStaticPaths: GetStaticPaths = () => {\\r\n  return {\\r\n    paths: validStatuses.map((status) => ({\\r\n      params: { status },\\r\n      locale: \"en\",\\r\n    })),\\r\n    fallback: \"blocking\",\\r\n  };\\r\n};\\r\n\\r\nexport default BookingsListingPage;\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[`Pay attention to the imports at the top of this code snippet. Listing view component is imported from\\r\n`,(0,n.jsx)(e.code,{children:\"/bookings/views/bookings-listing-view\"})]}),`\n`,(0,n.jsx)(e.p,{children:`There's a dedicated components structure chapter in this guide to help you understand more about\\r\ncal.com's component structures.`}),`\n`,(0,n.jsx)(e.h1,{id:\"bookings-listinig-view\",children:\"Bookings-listinig-view\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"You will find Bookings listing view component in \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx\",children:\"modules folder\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert a screenshot of - \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx\",children:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx\"}),\"]\"]}),`\n`,(0,n.jsx)(e.p,{children:\"At this point, it is important to ask yourself the right questions.\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"How is the data fetched?\"}),`\n`,(0,n.jsx)(e.li,{children:\"Is there any state updated based on fetch response?\"}),`\n`,(0,n.jsx)(e.li,{children:\"Does the rendered JSX have any conditions inside the html code? if so, what are those conditions?\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"1-how-is-the-data-fetched\",children:\"1. How is the data fetched?\"}),`\n`,(0,n.jsx)(e.p,{children:`The below code is responsible to fetch the data. cal.com uses tRPC to fetch the data. There's a\\r\ndedicated chapter about API layer in this guide, let's focus on the state management.`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:` const query = trpc.viewer.bookings.get.useInfiniteQuery(\\r\n    {\\r\n      limit: 10,\\r\n      filters: {\\r\n        ...filterQuery,\\r\n        status: filterQuery.status ?? status,\\r\n      },\\r\n    },\\r\n    {\\r\n      enabled: true,\\r\n      getNextPageParam: (lastPage) => lastPage.nextCursor,\\r\n    }\\r\n  );\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"2-is-there-any-state-updated-based-on-fetch-response\",children:\"2. Is there any state updated based on fetch response?\"}),`\n`,(0,n.jsx)(e.p,{children:\"There are no state variables updated based on the query but the query response is processed differently.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"example-1\",children:\"Example 1:\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"At \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L130C3-L142C16\",children:\"Line 130 in bookings-listing-view\"}),`\\r\nyou will find the below code:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const bookingsToday =\\r\n  query.data?.pages.map((page) =>\\r\n    page.bookings.filter((booking: BookingOutput) => {\\r\n      recurringInfoToday = page.recurringInfo.find(\\r\n        (info) => info.recurringEventId === booking.recurringEventId\\r\n      );\\r\n\\r\n      return (\\r\n        dayjs(booking.startTime).tz(user?.timeZone).format(\"YYYY-MM-DD\") ===\\r\n        dayjs().tz(user?.timeZone).format(\"YYYY-MM-DD\")\\r\n      );\\r\n    })\\r\n)[0] || [];\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"bookingsToday\"}),\" here is updated based on \",(0,n.jsx)(e.code,{children:\"query.data\"}),\".\"]}),`\n`,(0,n.jsx)(e.h3,{id:\"example-2\",children:\"Example 2:\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Similarly, \",(0,n.jsx)(e.code,{children:\"isEmpty\"}),\" is computed based on \",(0,n.jsx)(e.code,{children:\"query.data\"}),\". Below code is picked from \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L103C3-L103C58\",children:\"line 103\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const isEmpty = !query.data?.pages[0]?.bookings.length;\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[`You could make a tRPC call and process the response further to update variables with required response values,\\r\nwithout using any `,(0,n.jsx)(e.code,{children:\"setState\"}),` methods. We can also observe that this component is on client side as it has\\r\n\"use client\" at the top of the file. tRPC call did not happen inside a useEffect with an empty array dependency.`]}),`\n`,(0,n.jsx)(e.h2,{id:\"does-the-rendered-jsx-have-any-conditions-inside-the-html-code-if-so-what-are-those-conditions\",children:\"Does the rendered JSX have any conditions inside the html code? if so, what are those conditions?\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In the \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L159\",children:\"bookings-listing-view.tsx\"}),`,\\r\nbased on the query status, certain components are rendered.`]}),`\n`,(0,n.jsx)(e.p,{children:\"Query status can be:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"error\"}),`\n`,(0,n.jsx)(e.li,{children:\"pending\"}),`\n`,(0,n.jsx)(e.li,{children:\"success\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"error-condition\",children:\"Error condition\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Below code is picked from \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L151C11-L153C13\",children:\"bookings-listing-view.tsx\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`{query.status === \"error\" && (\\r\n  <Alert severity=\"error\" title={t(\"something_went_wrong\")} message={query.error.message} />\\r\n)}\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"pending-condition\",children:\"Pending condition\"}),`\n`,(0,n.jsx)(e.p,{children:\"Below code can be found at line 151.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`{(query.status === \"pending\" || query.isPaused) && <SkeletonLoader />}\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"success-condition\",children:\"Success condition\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"If the query status is successful, this condition is associated with \",(0,n.jsx)(e.code,{children:\"isEmpty\"}),` variable. If there's no bookings\\r\navailable, the below code handles success + isEmpty condition, picked from `,(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L227C11-L238C13\",children:\"line 227\"}),\":\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`{query.status === \"success\" && isEmpty && (\\r\n  <div className=\"flex items-center justify-center pt-2 xl:pt-0\">\\r\n    <EmptyScreen\\r\n      Icon=\"calendar\"\\r\n      headline={t(\"no_status_bookings_yet\", { status: t(status).toLowerCase() })}\\r\n      description={t(\"no_status_bookings_yet_description\", {\\r\n        status: t(status).toLowerCase(),\\r\n        description: t(descriptionByStatus[status]),\\r\n      })}\\r\n    />\\r\n  </div>\\r\n)}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"If there's bookings available, the below code handles success + !isEmpty condition, picked from \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L155C11-L226C13\",children:\"line 155\"}),\":\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`{query.status === \"success\" && !isEmpty && (\\r\n<>\\r\n    {!!bookingsToday.length && status === \"upcoming\" && (\\r\n      <div className=\"mb-6 pt-2 xl:pt-0\">\\r\n        <WipeMyCalActionButton bookingStatus={status} bookingsEmpty={isEmpty} />\\r\n        <p className=\"text-subtle mb-2 text-xs font-medium uppercase leading-4\">{t(\"today\")}</p>\\r\n        <div className=\"border-subtle overflow-hidden rounded-md border\">\\r\n          <table className=\"w-full max-w-full table-fixed\">\\r\n            <tbody className=\"bg-default divide-subtle divide-y\" data-testid=\"today-bookings\">\\r\n              <Fragment>\\r\n                {bookingsToday.map((booking: BookingOutput) => (\\r\n                  <BookingListItem\\r\n                    key={booking.id}\\r\n                    loggedInUser={{\\r\n                      userId: user?.id,\\r\n                      userTimeZone: user?.timeZone,\\r\n                      userTimeFormat: user?.timeFormat,\\r\n                      userEmail: user?.email,\\r\n                    }}\\r\n                    listingStatus={status}\\r\n                    recurringInfo={recurringInfoToday}\\r\n                    {...booking}\\r\n                  />\\r\n                ))}\\r\n              </Fragment>\\r\n            </tbody>\\r\n          </table>\\r\n        </div>\\r\n      </div>\\r\n    )}\\r\n    <div className=\"pt-2 xl:pt-0\">\\r\n      <div className=\"border-subtle overflow-hidden rounded-md border\">\\r\n        <table data-testid={\\`\\${status}-bookings\\`} className=\"w-full max-w-full table-fixed\">\\r\n          <tbody className=\"bg-default divide-subtle divide-y\" data-testid=\"bookings\">\\r\n            {query.data.pages.map((page, index) => (\\r\n              <Fragment key={index}>\\r\n                {page.bookings.filter(filterBookings).map((booking: BookingOutput) => {\\r\n                  const recurringInfo = page.recurringInfo.find(\\r\n                    (info) => info.recurringEventId === booking.recurringEventId\\r\n                  );\\r\n                  return (\\r\n                    <BookingListItem\\r\n                      key={booking.id}\\r\n                      loggedInUser={{\\r\n                        userId: user?.id,\\r\n                        userTimeZone: user?.timeZone,\\r\n                        userTimeFormat: user?.timeFormat,\\r\n                        userEmail: user?.email,\\r\n                      }}\\r\n                      listingStatus={status}\\r\n                      recurringInfo={recurringInfo}\\r\n                      {...booking}\\r\n                    />\\r\n                  );\\r\n                })}\\r\n              </Fragment>\\r\n            ))}\\r\n          </tbody>\\r\n        </table>\\r\n      </div>\\r\n      <div className=\"text-default p-4 text-center\" ref={buttonInView.ref}>\\r\n        <Button\\r\n          color=\"minimal\"\\r\n          loading={query.isFetchingNextPage}\\r\n          disabled={!query.hasNextPage}\\r\n          onClick={() => query.fetchNextPage()}>\\r\n          {query.hasNextPage ? t(\"load_more_results\") : t(\"no_more_results\")}\\r\n        </Button>\\r\n      </div>\\r\n    </div>\\r\n  </>\\r\n)}\n`})}),`\n`,(0,n.jsx)(e.h1,{id:\"references\",children:\"References:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/tree/main/apps/web/pages/bookings\",children:\"https://github.com/calcom/cal.com/tree/main/apps/web/pages/bookings\"})}),`\n`]})]})}function h(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(l,{...t})}):l(t)}return y(x);})();\n;return Component;"
  },
  "_id": "guide/codebase-architecture/cal-com/state-management/1-bookings-listening.mdx",
  "_raw": {
    "sourceFilePath": "guide/codebase-architecture/cal-com/state-management/1-bookings-listening.mdx",
    "sourceFileName": "1-bookings-listening.mdx",
    "sourceFileDir": "guide/codebase-architecture/cal-com/state-management",
    "contentType": "mdx",
    "flattenedPath": "guide/codebase-architecture/cal-com/state-management/1-bookings-listening"
  },
  "type": "Doc",
  "slug": "/guide/codebase-architecture/cal-com/state-management/1-bookings-listening",
  "slugAsParams": "codebase-architecture/cal-com/state-management/1-bookings-listening"
}
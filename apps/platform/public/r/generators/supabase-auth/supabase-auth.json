{
  "$schema": "https://app.thinkthroo.com/schema/registry-item.json",
  "name": "supabase-auth",
  "type": "registry:generator",
  "author": "Ramu Narasinga (https://thinkthroo.com)",
  "scripts": {},
  "dependencies": [
    "@supabase/supabase-js",
    "@supabase/ssr"
  ],
  "devDependencies": [],
  "commands": [
    "npx shadcn@latest add login-01"
  ],
  "files": [
    {
      "path": "middleware.ts",
      "content": "import { type NextRequest } from \"next/server\";\nimport { updateSession } from \"@/utils/supabase/middleware\";\n\nexport async function middleware(request: NextRequest) {\n  return await updateSession(request);\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * Feel free to modify this pattern to include more paths.\n     */\n    \"/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)\",\n  ],\n};\n",
      "type": "registry:file",
      "target": "middleware.ts"
    },
    {
      "path": "utils/supabase/client.ts",
      "content": "import { createBrowserClient } from \"@supabase/ssr\";\n\nexport function createClient() {\n  return createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n  );\n}\n",
      "type": "registry:file",
      "target": "utils/supabase/client.ts"
    },
    {
      "path": "utils/supabase/middleware.ts",
      "content": "import { createServerClient } from \"@supabase/ssr\";\nimport { NextResponse, type NextRequest } from \"next/server\";\n\nexport async function updateSession(request: NextRequest) {\n  let supabaseResponse = NextResponse.next({\n    request,\n  });\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll();\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value, options }) =>\n            request.cookies.set(name, value),\n          );\n          supabaseResponse = NextResponse.next({\n            request,\n          });\n          cookiesToSet.forEach(({ name, value, options }) =>\n            supabaseResponse.cookies.set(name, value, options),\n          );\n        },\n      },\n    },\n  );\n\n  // Do not run code between createServerClient and\n  // supabase.auth.getUser(). A simple mistake could make it very hard to debug\n  // issues with users being randomly logged out.\n\n  // IMPORTANT: DO NOT REMOVE auth.getUser()\n\n  const {\n    data: { user },\n  } = await supabase.auth.getUser();\n\n  if (\n    !user &&\n    !request.nextUrl.pathname.startsWith(\"/login\") &&\n    !request.nextUrl.pathname.startsWith(\"/signup\") &&\n    !request.nextUrl.pathname.startsWith(\"/auth\")\n  ) {\n    // no user, potentially respond by redirecting the user to the login page\n    const url = request.nextUrl.clone();\n    url.pathname = \"/login\";\n    return NextResponse.redirect(url);\n  }\n\n  // IMPORTANT: You *must* return the supabaseResponse object as it is.\n  // If you're creating a new response object with NextResponse.next() make sure to:\n  // 1. Pass the request in it, like so:\n  //    const myNewResponse = NextResponse.next({ request })\n  // 2. Copy over the cookies, like so:\n  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())\n  // 3. Change the myNewResponse object to fit your needs, but avoid changing\n  //    the cookies!\n  // 4. Finally:\n  //    return myNewResponse\n  // If this is not done, you may be causing the browser and server to go out\n  // of sync and terminate the user's session prematurely!\n\n  return supabaseResponse;\n}\n",
      "type": "registry:file",
      "target": "utils/supabase/middleware.ts"
    },
    {
      "path": "utils/supabase/server.ts",
      "content": "import { createServerClient } from \"@supabase/ssr\";\nimport { cookies } from \"next/headers\";\n\nexport async function createClient() {\n  const cookieStore = await cookies();\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll();\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options),\n            );\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    },\n  );\n}\n",
      "type": "registry:file",
      "target": "utils/supabase/server.ts"
    },
    {
      "path": "components/login-form.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport { Button } from \"@thinkthroo/ui/components/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@thinkthroo/ui/components/card\";\nimport { Input } from \"@thinkthroo/ui/components/input\";\nimport { Label } from \"@thinkthroo/ui/components/label\";\nimport { login } from \"@/app/login/actions\";\n\nexport function LoginForm({\n  className,\n  error,\n  ...props\n}: React.ComponentProps<\"div\"> & { error?: string }) {\n  return (\n    <div className={cn(\"flex flex-col gap-6\", className)} {...props}>\n      <Card>\n        <CardHeader>\n          <CardTitle>Login to your account</CardTitle>\n          <CardDescription>\n            Enter your email below to login to your account\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form>\n            <div className=\"flex flex-col gap-6\">\n              <div className=\"grid gap-3\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  name=\"email\"\n                  placeholder=\"joe@bloggs.com\"\n                  required\n                />\n              </div>\n              <div className=\"grid gap-3\">\n                <div className=\"flex items-center\">\n                  <Label htmlFor=\"password\">Password</Label>\n                  <a\n                    href=\"#\"\n                    className=\"ml-auto inline-block text-sm underline-offset-4 hover:underline\"\n                  >\n                    Forgot your password?\n                  </a>\n                </div>\n                <Input id=\"password\" type=\"password\" required name=\"password\" />\n              </div>\n\n              {error && (\n                <p className=\"text-sm text-red-600\">\n                  {decodeURIComponent(error)}\n                </p>\n              )}\n\n              <div className=\"flex flex-col gap-3\">\n                <Button type=\"submit\" className=\"w-full\" formAction={login}>\n                  Login\n                </Button>\n                <Button variant=\"outline\" className=\"w-full\">\n                  Login with Google\n                </Button>\n              </div>\n            </div>\n            <div className=\"mt-4 text-center text-sm\">\n              Don&apos;t have an account?{\" \"}\n              <a href=\"/signup\" className=\"underline underline-offset-4\">\n                Sign up\n              </a>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
      "type": "registry:file",
      "target": "components/login-form.tsx"
    },
    {
      "path": "components/signup-form.tsx",
      "content": "import { cn } from \"@/lib/utils\";\nimport { Button } from \"@thinkthroo/ui/components/button\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@thinkthroo/ui/components/card\";\nimport { Input } from \"@thinkthroo/ui/components/input\";\nimport { Label } from \"@thinkthroo/ui/components/label\";\nimport { signup } from \"@/app/signup/actions\";\n\nexport function SignupForm({\n  className,\n  error,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div className={cn(\"flex flex-col gap-6\", className)} {...props}>\n      <Card>\n        <CardHeader>\n          <CardTitle>Register your account</CardTitle>\n          <CardDescription>Enter your email below to signup</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form>\n            <div className=\"flex flex-col gap-6\">\n              <div className=\"grid gap-3\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  name=\"email\"\n                  placeholder=\"m@example.com\"\n                  required\n                />\n              </div>\n              <div className=\"grid gap-3\">\n                <div className=\"flex items-center\">\n                  <Label htmlFor=\"password\">Password</Label>\n                </div>\n                <Input id=\"password\" type=\"password\" required name=\"password\" />\n              </div>\n\n              {error && (\n                <p className=\"text-sm text-red-600\">\n                  {decodeURIComponent(error)}\n                </p>\n              )}\n\n              <div className=\"flex flex-col gap-3\">\n                <Button type=\"submit\" className=\"w-full\" formAction={signup}>\n                  Sign up\n                </Button>\n                <Button variant=\"outline\" className=\"w-full\">\n                  Sign up with Google\n                </Button>\n              </div>\n            </div>\n            <div className=\"mt-4 text-center text-sm\">\n              Already have an account?{\" \"}\n              <a href=\"/login\" className=\"underline underline-offset-4\">\n                Login\n              </a>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n",
      "type": "registry:file",
      "target": "components/signup-form.tsx"
    },
    {
      "path": "app/auth/confirm/route.ts",
      "content": "import { type EmailOtpType } from \"@supabase/supabase-js\";\nimport { type NextRequest } from \"next/server\";\n\nimport { createClient } from \"@/utils/supabase/server\";\nimport { redirect } from \"next/navigation\";\n\nexport async function GET(request: NextRequest) {\n  const { searchParams } = new URL(request.url);\n  const token_hash = searchParams.get(\"token_hash\");\n  const type = searchParams.get(\"type\") as EmailOtpType | null;\n  const next = searchParams.get(\"next\") ?? \"/\";\n\n  if (token_hash && type) {\n    const supabase = await createClient();\n\n    const { error } = await supabase.auth.verifyOtp({\n      type,\n      token_hash,\n    });\n    if (!error) {\n      // redirect user to specified redirect URL or root of app\n      redirect(next);\n    }\n  }\n\n  // redirect the user to an error page with some instructions\n  redirect(\"/error\");\n}\n",
      "type": "registry:file",
      "target": "app/auth/confirm/route.ts"
    },
    {
      "path": "app/error/page.tsx",
      "content": "\"use client\";\n\nexport default function ErrorPage() {\n  return <p>Sorry, something went wrong</p>;\n}\n",
      "type": "registry:file",
      "target": "app/error/page.tsx"
    },
    {
      "path": "app/login/actions.ts",
      "content": "\"use server\";\n\nimport { revalidatePath } from \"next/cache\";\nimport { redirect } from \"next/navigation\";\n\nimport { createClient } from \"@/utils/supabase/server\";\n\nexport async function login(formData: FormData) {\n  const supabase = await createClient();\n\n  // type-casting here for convenience\n  // in practice, you should validate your inputs\n  const data = {\n    email: formData.get(\"email\") as string,\n    password: formData.get(\"password\") as string,\n  };\n\n  const { error } = await supabase.auth.signInWithPassword(data);\n\n  if (error) {\n    const encoded = encodeURIComponent(error.message);\n    redirect(`/login?error=${encoded}`);\n  }\n\n  revalidatePath(\"/\", \"layout\");\n  redirect(\"/\");\n}\n",
      "type": "registry:file",
      "target": "app/login/actions.ts"
    },
    {
      "path": "app/login/page.tsx",
      "content": "import { LoginForm } from \"@/components/login-form\";\n\nexport default function Page({\n  searchParams,\n}: {\n  searchParams?: { error?: string };\n}) {\n  return (\n    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\n      <div className=\"w-full max-w-sm\">\n        <LoginForm error={searchParams?.error} />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:file",
      "target": "app/login/page.tsx"
    },
    {
      "path": "app/signup/actions.ts",
      "content": "\"use server\";\n\nimport { revalidatePath } from \"next/cache\";\nimport { redirect } from \"next/navigation\";\n\nimport { createClient } from \"@/utils/supabase/server\";\n\nexport async function signup(formData: FormData) {\n  const supabase = await createClient();\n\n  // type-casting here for convenience\n  // in practice, you should validate your inputs\n  const data = {\n    email: formData.get(\"email\") as string,\n    password: formData.get(\"password\") as string,\n  };\n\n  const { error } = await supabase.auth.signUp(data);\n\n  if (error) {\n    const encoded = encodeURIComponent(error.message);\n    redirect(`/signup?error=${encoded}`);\n  }\n\n  revalidatePath(\"/\", \"layout\");\n  redirect(\"/\");\n}\n",
      "type": "registry:file",
      "target": "app/signup/actions.ts"
    },
    {
      "path": "app/signup/page.tsx",
      "content": "import { SignupForm } from \"@/components/signup-form\";\n\nexport default function Page({\n  searchParams,\n}: {\n  searchParams?: { error?: string };\n}) {\n  return (\n    <div className=\"flex min-h-svh w-full items-center justify-center p-6 md:p-10\">\n      <div className=\"w-full max-w-sm\">\n        <SignupForm error={searchParams?.error} />\n      </div>\n    </div>\n  );\n}\n",
      "type": "registry:file",
      "target": "app/signup/page.tsx"
    }
  ],
  "docs": "Supabase auth is configured sucessfully. Find the next steps at https://app.thinkthroo.com/guide/cli/configure-supabase-auth/c-configure-supabase-auth/l-configure-supabase-auth-introduction"
}
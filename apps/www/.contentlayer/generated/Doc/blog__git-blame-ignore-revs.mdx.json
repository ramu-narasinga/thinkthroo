{
  "title": ".git-blame-ignore-revs to ignore bulk formatting changes.\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\n`.git-blame-ignore-revs` is a Git feature introduced in version 2.23 that allows you to ignore specific commits in `git blame` results. This is particularly useful for bulk commits that change a large number of lines without altering the actual functionality of the code, such as formatting changes, renaming, or applying coding standards across a codebase. By ignoring these non-functional changes, `git blame` can focus on meaningful edits that explain the context and reasoning behind the code.\r\n\r\n# **Why** `.git-blame-ignore-revs` Matters\r\n\r\nWhen you use `git blame` on a file, it shows you which commit last changed each line of the file, along with the author and timestamp. This is useful for tracking down why a particular line was changed. However, if a large commit that makes purely formatting changes, like applying prettier, is part of the history, `git blame` may point to that commit for many lines. This make it difficult to find the actual functional change history.\r\n\r\nFor example, if your team uses a tool like Prettier or ESLint to reformat the entire codebase, the resulting commit might touch thousands of lines of code. Without `.git-blame-ignore-revs`, `git blame` would show this commit as responsible for every affected line, which could obscure the more meaningful history behind each line.\r\n\r\nBy using `.git-blame-ignore-revs`, you can tell `git blame` to skip over these commits and focus on the changes that matter.\r\n\r\n# **How to Use** `.git-blame-ignore-revs`\r\n\r\nTo understand how to use this feature, let’s walk through an example from the React repository.\r\n\r\n## **Step 1: Identify the Bulk Formatting Commits**\r\n\r\nThe React source code includes bulk commits where tools like Prettier were run across the entire project. Here are two such commits:\r\n\r\n![](https://miro.medium.com/v2/resize:fit:875/1*n9p1gqHavAqRdztyy-xH9g.png)\r\n\r\n1. **Commit:** [**c998bb1**](https://github.com/facebook/react/commit/c998bb1ed4b3285398c9c7797135d3f060243c6a)  \r\n    Message: *\\[compiler\\] Run prettier, fix snap*  \r\n    This commit applies Prettier formatting across the codebase, altering many lines without changing the functionality.\r\n    \r\n\r\n![](https://miro.medium.com/v2/resize:fit:875/1*_G35OKwbF7NN1hxtPKq9ug.png)\r\n\r\n**2\\. Commit:** [**fd2b3e1**](https://github.com/facebook/react/commit/fd2b3e13d330a4559f5aa21462e1cb2cbbcf144b)  \r\nMessage: [*Compiler: Unfork prettier config*](https://github.com/facebook/react/commit/fd2b3e13d330a4559f5aa21462e1cb2cbbcf144b)  \r\nThis commit contains further updates to the Prettier configuration, affecting all `.ts` and `.tsx` files in the repository.\r\n\r\n![](https://miro.medium.com/v2/resize:fit:875/1*7Mkt1Lad2YSzi3lNS2auCA.png)\r\n\r\nThese commits only deal with formatting and don’t provide meaningful context when investigating why a line of code was written the way it was.\r\n\r\n## **Step 2: Create the** `.git-blame-ignore-revs` File\r\n\r\nTo make `git blame` ignore these bulk formatting commits, we can create a `.git-blame-ignore-revs` file in the root of the repository.\r\n\r\n1. Create the `.git-blame-ignore-revs` file:\r\n    \r\n\r\n```plaintext\r\ntouch .git-blame-ignore-revs\r\n```\r\n\r\n2\\. Add the relevant commit hashes to the file, explaining why each commit is being ignored. In this case, we’ll add the two commits we identified earlier:\r\n\r\n```plaintext\r\n# Prettier formatting changes \r\nc998bb1ed4b3285398c9c7797135d3f060243c6a \r\nfd2b3e13d330a4559f5aa21462e1cb2cbbcf144b\r\n```\r\n\r\n3\\. Save the `.git-blame-ignore-revs` file in the repository. This file can be versioned alongside your code, allowing the entire team to use the same list of ignored commits.\r\n\r\n## **Step 3: Configure Git to Use** `.git-blame-ignore-revs`\r\n\r\nTo avoid typing the `--ignore-revs-file` option every time you use `git blame`, you can configure Git to automatically use the `.git-blame-ignore-revs` file.\r\n\r\n1. Set up the configuration at the repository level:\r\n    \r\n\r\n```plaintext\r\ngit config blame.ignoreRevsFile .git-blame-ignore-revs\r\n```\r\n\r\nThis ensures that every time someone runs `git blame` in this repository, Git will automatically ignore the commits listed in `.git-blame-ignore-revs`.\r\n\r\n## **Step 4: Run** `git blame` with the Ignored Commits\r\n\r\nLet’s see how this works in practice. Without ignoring the bulk formatting commits, `git blame` might show:\r\n\r\n```plaintext\r\n$ git blame src/someFile.tsx\r\nc998bb1e (Joe Bloggs 2023-03-15 10:00:00 +0200 1) import React from 'react';\r\nfd2b3e13 (Alan 2023-04-01 14:15:30 +0200 2) function App() {\r\nc998bb1e (Joe Bloggs 2023-03-15 10:00:00 +0200 3)     return <div>Hello, world!</div>;\r\nfd2b3e13 (Ben 2023-04-01 14:15:30 +0200 4) }\r\n```\r\n\r\nThis output indicates that the last change to lines 1 and 3 was due to the Prettier formatting commit (`c998bb1e`), and lines 2 and 4 were modified in another bulk commit (`fd2b3e13`). Since these are formatting changes, this is not helpful for understanding who introduced the actual logic behind these lines.\r\n\r\nAfter configuring `.git-blame-ignore-revs`, running `git blame` will skip the bulk commits and show the real history:\r\n\r\n```plaintext\r\n$ git blame src/someFile.tsx\r\na23d9b34 (May 2022-12-01 09:30:00 +0200 1) import React from 'react';\r\nb12e45a6 (JJ 2022-12-05 11:45:15 +0200 2) function App() {\r\na23d9b34 (Joe 2022-12-01 09:30:00 +0200 3)     return <div>Hello, world!</div>;\r\nb12e45a6 (Ram 2022-12-05 11:45:15 +0200 4) }\r\n```\r\n\r\nNow, `git blame` attributes the lines to the correct commits, ignoring the unimportant formatting changes. This gives us useful information, showing who made the actual functional changes.\r\n\r\n# **Conclusion**\r\n\r\nThe `.git-blame-ignore-revs` feature in Git 2.23 is a game-changer for projects with bulk formatting or style changes. By setting up a `.git-blame-ignore-revs` file and configuring your repository, you can apply coding standards, run tools like Prettier, or refactor code without worrying about polluting the blame history.\r\n\r\nWith this approach, your team can confidently improve code quality and formatting without sacrificing the ability to track meaningful changes, ensuring that `git blame` remains a valuable tool for understanding the history and reasoning behind each line of code.\r\n\r\n# **About me:**\r\n\r\nHey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\r\n\r\nI am open to work on interesting projects. Send me an email at ramu.narasinga@gmail.com\r\n\r\nMy Github — [https://github.com/ramu-narasinga](https://github.com/ramu-narasinga)\r\n\r\nMy website — [https://ramunarasinga.com](https://ramunarasinga.com/)\r\n\r\nMy Youtube channel — [https://www.youtube.com/@thinkthroo](https://www.youtube.com/@thinkthroo)\r\n\r\nLearning platform — [https://thinkthroo.com](https://thinkthroo.com/)\r\n\r\nCodebase Architecture — [https://app.thinkthroo.com/architecture](https://app.thinkthroo.com/architecture)\r\n\r\nBest practices — [https://app.thinkthroo.com/best-practices](https://app.thinkthroo.com/best-practices)\r\n\r\nProduction-grade projects — [https://app.thinkthroo.com/production-grade-projects](https://app.thinkthroo.com/production-grade-projects)\r\n\r\n# **References:**\r\n\r\n1. [https://github.com/facebook/react/blob/main/.git-blame-ignore-revs](https://github.com/facebook/react/blob/main/.git-blame-ignore-revs)\r\n    \r\n2. [https://gist.github.com/kateinoigakukun/b0bc920e587851bfffa98b9e279175f2](https://gist.github.com/kateinoigakukun/b0bc920e587851bfffa98b9e279175f2)\r\n    \r\n3. [https://github.com/facebook/react/commit/c998bb1ed4b3285398c9c7797135d3f060243c6a](https://github.com/facebook/react/commit/c998bb1ed4b3285398c9c7797135d3f060243c6a)\r\n    \r\n4. [https://moxio.com/blog/ignoring-bulk-change-commits-with-git-blame/](https://moxio.com/blog/ignoring-bulk-change-commits-with-git-blame/)\r\n    \r\n\r\n[  \r\n](https://medium.com/tag/javascript?source=post_page-----f20ac23e6155--------------------------------)\r\n",
    "code": "var Component=(()=>{var m=Object.create;var a=Object.defineProperty;var g=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var b=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),y=(i,e)=>{for(var n in e)a(i,n,{get:e[n],enumerable:!0})},c=(i,e,n,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of p(e))!f.call(i,r)&&r!==n&&a(i,r,{get:()=>e[r],enumerable:!(o=g(e,r))||o.enumerable});return i};var w=(i,e,n)=>(n=i!=null?m(u(i)):{},c(e||!i||!i.__esModule?a(n,\"default\",{value:i,enumerable:!0}):n,i)),v=i=>c(a({},\"__esModule\",{value:!0}),i);var l=b((T,h)=>{h.exports=_jsx_runtime});var x={};y(x,{default:()=>d,frontmatter:()=>k});var t=w(l()),k={title:\".git-blame-ignore-revs to ignore bulk formatting changes.\"};function s(i){let e={a:\"a\",br:\"br\",code:\"code\",div:\"div\",em:\"em\",h1:\"h1\",h2:\"h2\",img:\"img\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",...i.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\".git-blame-ignore-revs\"}),\" is a Git feature introduced in version 2.23 that allows you to ignore specific commits in \",(0,t.jsx)(e.code,{children:\"git blame\"}),\" results. This is particularly useful for bulk commits that change a large number of lines without altering the actual functionality of the code, such as formatting changes, renaming, or applying coding standards across a codebase. By ignoring these non-functional changes, \",(0,t.jsx)(e.code,{children:\"git blame\"}),\" can focus on meaningful edits that explain the context and reasoning behind the code.\"]}),`\n`,(0,t.jsxs)(e.h1,{id:\"why-git-blame-ignore-revs-matters\",children:[(0,t.jsx)(e.strong,{children:\"Why\"}),\" \",(0,t.jsx)(e.code,{children:\".git-blame-ignore-revs\"}),\" Matters\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"When you use \",(0,t.jsx)(e.code,{children:\"git blame\"}),\" on a file, it shows you which commit last changed each line of the file, along with the author and timestamp. This is useful for tracking down why a particular line was changed. However, if a large commit that makes purely formatting changes, like applying prettier, is part of the history, \",(0,t.jsx)(e.code,{children:\"git blame\"}),\" may point to that commit for many lines. This make it difficult to find the actual functional change history.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"For example, if your team uses a tool like Prettier or ESLint to reformat the entire codebase, the resulting commit might touch thousands of lines of code. Without \",(0,t.jsx)(e.code,{children:\".git-blame-ignore-revs\"}),\", \",(0,t.jsx)(e.code,{children:\"git blame\"}),\" would show this commit as responsible for every affected line, which could obscure the more meaningful history behind each line.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"By using \",(0,t.jsx)(e.code,{children:\".git-blame-ignore-revs\"}),\", you can tell \",(0,t.jsx)(e.code,{children:\"git blame\"}),\" to skip over these commits and focus on the changes that matter.\"]}),`\n`,(0,t.jsxs)(e.h1,{id:\"how-to-use-git-blame-ignore-revs\",children:[(0,t.jsx)(e.strong,{children:\"How to Use\"}),\" \",(0,t.jsx)(e.code,{children:\".git-blame-ignore-revs\"})]}),`\n`,(0,t.jsx)(e.p,{children:\"To understand how to use this feature, let\\u2019s walk through an example from the React repository.\"}),`\n`,(0,t.jsx)(e.h2,{id:\"step-1-identify-the-bulk-formatting-commits\",children:(0,t.jsx)(e.strong,{children:\"Step 1: Identify the Bulk Formatting Commits\"})}),`\n`,(0,t.jsx)(e.p,{children:\"The React source code includes bulk commits where tools like Prettier were run across the entire project. Here are two such commits:\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:875/1*n9p1gqHavAqRdztyy-xH9g.png\",alt:\"\"})}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Commit:\"}),\" \",(0,t.jsx)(e.a,{href:\"https://github.com/facebook/react/commit/c998bb1ed4b3285398c9c7797135d3f060243c6a\",children:(0,t.jsx)(e.strong,{children:\"c998bb1\"})}),(0,t.jsx)(e.br,{}),`\n`,\"Message: \",(0,t.jsx)(e.em,{children:\"[compiler] Run prettier, fix snap\"}),(0,t.jsx)(e.br,{}),`\n`,\"This commit applies Prettier formatting across the codebase, altering many lines without changing the functionality.\"]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:875/1*_G35OKwbF7NN1hxtPKq9ug.png\",alt:\"\"})}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"2. Commit:\"}),\" \",(0,t.jsx)(e.a,{href:\"https://github.com/facebook/react/commit/fd2b3e13d330a4559f5aa21462e1cb2cbbcf144b\",children:(0,t.jsx)(e.strong,{children:\"fd2b3e1\"})}),(0,t.jsx)(e.br,{}),`\n`,\"Message: \",(0,t.jsx)(e.a,{href:\"https://github.com/facebook/react/commit/fd2b3e13d330a4559f5aa21462e1cb2cbbcf144b\",children:(0,t.jsx)(e.em,{children:\"Compiler: Unfork prettier config\"})}),(0,t.jsx)(e.br,{}),`\n`,\"This commit contains further updates to the Prettier configuration, affecting all \",(0,t.jsx)(e.code,{children:\".ts\"}),\" and \",(0,t.jsx)(e.code,{children:\".tsx\"}),\" files in the repository.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:875/1*7Mkt1Lad2YSzi3lNS2auCA.png\",alt:\"\"})}),`\n`,(0,t.jsx)(e.p,{children:\"These commits only deal with formatting and don\\u2019t provide meaningful context when investigating why a line of code was written the way it was.\"}),`\n`,(0,t.jsxs)(e.h2,{id:\"step-2-create-the-git-blame-ignore-revs-file\",children:[(0,t.jsx)(e.strong,{children:\"Step 2: Create the\"}),\" \",(0,t.jsx)(e.code,{children:\".git-blame-ignore-revs\"}),\" File\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"To make \",(0,t.jsx)(e.code,{children:\"git blame\"}),\" ignore these bulk formatting commits, we can create a \",(0,t.jsx)(e.code,{children:\".git-blame-ignore-revs\"}),\" file in the root of the repository.\"]}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Create the \",(0,t.jsx)(e.code,{children:\".git-blame-ignore-revs\"}),\" file:\"]}),`\n`]}),`\n`,(0,t.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,t.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,t.jsx)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,t.jsx)(e.span,{className:\"line\",children:(0,t.jsx)(e.span,{children:\"touch .git-blame-ignore-revs\"})})})})}),`\n`,(0,t.jsx)(e.p,{children:\"2. Add the relevant commit hashes to the file, explaining why each commit is being ignored. In this case, we\\u2019ll add the two commits we identified earlier:\"}),`\n`,(0,t.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,t.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,t.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,t.jsx)(e.span,{className:\"line\",children:(0,t.jsx)(e.span,{children:\"# Prettier formatting changes \"})}),`\n`,(0,t.jsx)(e.span,{className:\"line\",children:(0,t.jsx)(e.span,{children:\"c998bb1ed4b3285398c9c7797135d3f060243c6a \"})}),`\n`,(0,t.jsx)(e.span,{className:\"line\",children:(0,t.jsx)(e.span,{children:\"fd2b3e13d330a4559f5aa21462e1cb2cbbcf144b\"})})]})})}),`\n`,(0,t.jsxs)(e.p,{children:[\"3. Save the \",(0,t.jsx)(e.code,{children:\".git-blame-ignore-revs\"}),\" file in the repository. This file can be versioned alongside your code, allowing the entire team to use the same list of ignored commits.\"]}),`\n`,(0,t.jsxs)(e.h2,{id:\"step-3-configure-git-to-use-git-blame-ignore-revs\",children:[(0,t.jsx)(e.strong,{children:\"Step 3: Configure Git to Use\"}),\" \",(0,t.jsx)(e.code,{children:\".git-blame-ignore-revs\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"To avoid typing the \",(0,t.jsx)(e.code,{children:\"--ignore-revs-file\"}),\" option every time you use \",(0,t.jsx)(e.code,{children:\"git blame\"}),\", you can configure Git to automatically use the \",(0,t.jsx)(e.code,{children:\".git-blame-ignore-revs\"}),\" file.\"]}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Set up the configuration at the repository level:\"}),`\n`]}),`\n`,(0,t.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,t.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,t.jsx)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,t.jsx)(e.span,{className:\"line\",children:(0,t.jsx)(e.span,{children:\"git config blame.ignoreRevsFile .git-blame-ignore-revs\"})})})})}),`\n`,(0,t.jsxs)(e.p,{children:[\"This ensures that every time someone runs \",(0,t.jsx)(e.code,{children:\"git blame\"}),\" in this repository, Git will automatically ignore the commits listed in \",(0,t.jsx)(e.code,{children:\".git-blame-ignore-revs\"}),\".\"]}),`\n`,(0,t.jsxs)(e.h2,{id:\"step-4-run-git-blame-with-the-ignored-commits\",children:[(0,t.jsx)(e.strong,{children:\"Step 4: Run\"}),\" \",(0,t.jsx)(e.code,{children:\"git blame\"}),\" with the Ignored Commits\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Let\\u2019s see how this works in practice. Without ignoring the bulk formatting commits, \",(0,t.jsx)(e.code,{children:\"git blame\"}),\" might show:\"]}),`\n`,(0,t.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,t.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,t.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,t.jsx)(e.span,{className:\"line\",children:(0,t.jsx)(e.span,{children:\"$ git blame src/someFile.tsx\"})}),`\n`,(0,t.jsx)(e.span,{className:\"line\",children:(0,t.jsx)(e.span,{children:\"c998bb1e (Joe Bloggs 2023-03-15 10:00:00 +0200 1) import React from 'react';\"})}),`\n`,(0,t.jsx)(e.span,{className:\"line\",children:(0,t.jsx)(e.span,{children:\"fd2b3e13 (Alan 2023-04-01 14:15:30 +0200 2) function App() {\"})}),`\n`,(0,t.jsx)(e.span,{className:\"line\",children:(0,t.jsx)(e.span,{children:\"c998bb1e (Joe Bloggs 2023-03-15 10:00:00 +0200 3)     return <div>Hello, world!</div>;\"})}),`\n`,(0,t.jsx)(e.span,{className:\"line\",children:(0,t.jsx)(e.span,{children:\"fd2b3e13 (Ben 2023-04-01 14:15:30 +0200 4) }\"})})]})})}),`\n`,(0,t.jsxs)(e.p,{children:[\"This output indicates that the last change to lines 1 and 3 was due to the Prettier formatting commit (\",(0,t.jsx)(e.code,{children:\"c998bb1e\"}),\"), and lines 2 and 4 were modified in another bulk commit (\",(0,t.jsx)(e.code,{children:\"fd2b3e13\"}),\"). Since these are formatting changes, this is not helpful for understanding who introduced the actual logic behind these lines.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"After configuring \",(0,t.jsx)(e.code,{children:\".git-blame-ignore-revs\"}),\", running \",(0,t.jsx)(e.code,{children:\"git blame\"}),\" will skip the bulk commits and show the real history:\"]}),`\n`,(0,t.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,t.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,t.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,t.jsx)(e.span,{className:\"line\",children:(0,t.jsx)(e.span,{children:\"$ git blame src/someFile.tsx\"})}),`\n`,(0,t.jsx)(e.span,{className:\"line\",children:(0,t.jsx)(e.span,{children:\"a23d9b34 (May 2022-12-01 09:30:00 +0200 1) import React from 'react';\"})}),`\n`,(0,t.jsx)(e.span,{className:\"line\",children:(0,t.jsx)(e.span,{children:\"b12e45a6 (JJ 2022-12-05 11:45:15 +0200 2) function App() {\"})}),`\n`,(0,t.jsx)(e.span,{className:\"line\",children:(0,t.jsx)(e.span,{children:\"a23d9b34 (Joe 2022-12-01 09:30:00 +0200 3)     return <div>Hello, world!</div>;\"})}),`\n`,(0,t.jsx)(e.span,{className:\"line\",children:(0,t.jsx)(e.span,{children:\"b12e45a6 (Ram 2022-12-05 11:45:15 +0200 4) }\"})})]})})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Now, \",(0,t.jsx)(e.code,{children:\"git blame\"}),\" attributes the lines to the correct commits, ignoring the unimportant formatting changes. This gives us useful information, showing who made the actual functional changes.\"]}),`\n`,(0,t.jsx)(e.h1,{id:\"conclusion\",children:(0,t.jsx)(e.strong,{children:\"Conclusion\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"The \",(0,t.jsx)(e.code,{children:\".git-blame-ignore-revs\"}),\" feature in Git 2.23 is a game-changer for projects with bulk formatting or style changes. By setting up a \",(0,t.jsx)(e.code,{children:\".git-blame-ignore-revs\"}),\" file and configuring your repository, you can apply coding standards, run tools like Prettier, or refactor code without worrying about polluting the blame history.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"With this approach, your team can confidently improve code quality and formatting without sacrificing the ability to track meaningful changes, ensuring that \",(0,t.jsx)(e.code,{children:\"git blame\"}),\" remains a valuable tool for understanding the history and reasoning behind each line of code.\"]}),`\n`,(0,t.jsx)(e.h1,{id:\"about-me\",children:(0,t.jsx)(e.strong,{children:\"About me:\"})}),`\n`,(0,t.jsx)(e.p,{children:\"Hey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"I am open to work on interesting projects. Send me an email at \",(0,t.jsx)(e.a,{href:\"mailto:ramu.narasinga@gmail.com\",children:\"ramu.narasinga@gmail.com\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"My Github \\u2014 \",(0,t.jsx)(e.a,{href:\"https://github.com/ramu-narasinga\",children:\"https://github.com/ramu-narasinga\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"My website \\u2014 \",(0,t.jsx)(e.a,{href:\"https://ramunarasinga.com/\",children:\"https://ramunarasinga.com\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"My Youtube channel \\u2014 \",(0,t.jsx)(e.a,{href:\"https://www.youtube.com/@thinkthroo\",children:\"https://www.youtube.com/@thinkthroo\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Learning platform \\u2014 \",(0,t.jsx)(e.a,{href:\"https://thinkthroo.com/\",children:\"https://thinkthroo.com\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Codebase Architecture \\u2014 \",(0,t.jsx)(e.a,{href:\"https://app.thinkthroo.com/architecture\",children:\"https://app.thinkthroo.com/architecture\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Best practices \\u2014 \",(0,t.jsx)(e.a,{href:\"https://app.thinkthroo.com/best-practices\",children:\"https://app.thinkthroo.com/best-practices\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Production-grade projects \\u2014 \",(0,t.jsx)(e.a,{href:\"https://app.thinkthroo.com/production-grade-projects\",children:\"https://app.thinkthroo.com/production-grade-projects\"})]}),`\n`,(0,t.jsx)(e.h1,{id:\"references\",children:(0,t.jsx)(e.strong,{children:\"References:\"})}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:\"https://github.com/facebook/react/blob/main/.git-blame-ignore-revs\",children:\"https://github.com/facebook/react/blob/main/.git-blame-ignore-revs\"})}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:\"https://gist.github.com/kateinoigakukun/b0bc920e587851bfffa98b9e279175f2\",children:\"https://gist.github.com/kateinoigakukun/b0bc920e587851bfffa98b9e279175f2\"})}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:\"https://github.com/facebook/react/commit/c998bb1ed4b3285398c9c7797135d3f060243c6a\",children:\"https://github.com/facebook/react/commit/c998bb1ed4b3285398c9c7797135d3f060243c6a\"})}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:\"https://moxio.com/blog/ignoring-bulk-change-commits-with-git-blame/\",children:\"https://moxio.com/blog/ignoring-bulk-change-commits-with-git-blame/\"})}),`\n`]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsxs)(e.a,{href:\"https://medium.com/tag/javascript?source=post_page-----f20ac23e6155--------------------------------\",children:[(0,t.jsx)(e.br,{}),`\n`]})})]})}function d(i={}){let{wrapper:e}=i.components||{};return e?(0,t.jsx)(e,{...i,children:(0,t.jsx)(s,{...i})}):s(i)}return v(x);})();\n;return Component;"
  },
  "_id": "blog/git-blame-ignore-revs.mdx",
  "_raw": {
    "sourceFilePath": "blog/git-blame-ignore-revs.mdx",
    "sourceFileName": "git-blame-ignore-revs.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/git-blame-ignore-revs"
  },
  "type": "Doc",
  "slug": "/blog/git-blame-ignore-revs",
  "slugAsParams": "git-blame-ignore-revs"
}
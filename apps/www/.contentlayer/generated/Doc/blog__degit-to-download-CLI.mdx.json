{
  "title": "Use degit to download a template in your CLI tool.",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\nI found a file named “degit” in the [Remotion source code](https://github.com/remotion-dev/remotion/blob/main/packages/create-video/src/degit.ts). [Remotion](https://www.remotion.dev/) helps you make videos programatically.\n\nIn this article, we will look at the following concepts:\n\n1. What is Degit?\n    \n2. Build a simple degit function inspired by [Remotion’s degit file](https://github.com/remotion-dev/remotion/blob/main/packages/create-video/src/degit.ts)\n    \n\n![](https://miro.medium.com/v2/resize:fit:875/1*9HJbUD4G5M4MLeAI3WZ8rA.png)\n\n# **What is Degit?**\n\nI do remember seeing “degit” mentioned in one of the Readmes in the open source, but I could not recall which repository it was so I googled what a degit means and found this [degit npm package](https://github.com/Rich-Harris/degit).\n\nIn simple terms, You can use degit to quickly make a copy of a Github repository by only downloading the latest commit  \ninstead of the entire git history.\n\nVisit the official [npm package for degit](https://github.com/Rich-Harris/degit) to read more about this package.\n\nYou can use this degit package to download repos from Gitlab or Bitbucket as well so its not just limited to Github repositories.\n\n```plaintext\n# download from GitLab\ndegit gitlab:user/repo\n# download from BitBucket\ndegit bitbucket:user/repo\ndegit user/repo\n# these commands are equivalent\ndegit github:user/repo\n```\n\nHere’s a sample usage in Javascript:\n\n```plaintext\nconst degit = require('degit');\nconst emitter = degit('user/repo', {\n    cache: true,\n    force: true,\n    verbose: true,\n});\nemitter.on('info', info => {\n    console.log(info.message);\n});\nemitter.clone('path/to/dest').then(() => {\n    console.log('done');\n});\n```\n\n# **Build a simple degit function inspired by Remotion’s degit file**\n\nTo understand how to build a simple degit function, let’s break down the code from Remotion’s degit.ts file. This file implements a basic version of what the degit npm package does: fetching a GitHub repository’s latest state without downloading the full history.\n\n# **1\\. Imports used**\n\n```plaintext\nimport https from 'https';\nimport fs from 'node:fs';\nimport {tmpdir} from 'node:os';\nimport path from 'node:path';\nimport tar from 'tar';\nimport {mkdirp} from './mkdirp';\n```\n\n* https: Used to make a network request to fetch the repository.\n    \n* fs: Interacts with the file system, such as writing the downloaded files.\n    \n* tmpdir: Provides the system’s temporary directory path.\n    \n* path: Handles and transforms file paths.\n    \n* tar: Extracts the contents of the tarball (compressed file).\n    \n* mkdirp: A helper function to create directories recursively, provided in a separate file.\n    \n\n# **2: Fetching the Repository**\n\n```plaintext\nexport function fetch(url: string, dest: string) {\n    return new Promise<void>((resolve, reject) => {\n        https.get(url, (response) => {\n            const code = response.statusCode as number;\n            if (code >= 400) {\n                reject(\n                    new Error(\n                        `Network request to ${url} failed with code ${code} (${response.statusMessage})`,\n                    ),\n                );\n            } else if (code >= 300) {\n                fetch(response.headers.location as string, dest)\n                    .then(resolve)\n                    .catch(reject);\n            } else {\n                response\n                    .pipe(fs.createWriteStream(dest))\n                    .on('finish', () => resolve())\n                    .on('error', reject);\n            }\n        }).on('error', reject);\n    });\n}\n```\n\n* URL Handling: The function checks if the request is successful (status codes below 300). If it’s a redirect (codes between 300 and 399), it follows the new URL. If it’s an error (codes 400+), it rejects the promise.\n    \n* File Saving: The repository is downloaded and saved to the dest path using fs.createWriteStream.\n    \n\n# **3: Extracting the Repository**\n\nAfter downloading the repository, it’s necessary to extract the contents of the tarball:\n\n```plaintext\nfunction untar(file: string, dest: string) {\n    return tar.extract(\n        {\n            file,\n            strip: 1,\n            C: dest,\n        },\n        [],\n    );\n}\n```\n\n* Tar Extraction: This function extracts the contents of the .tar.gz file into the specified destination directory.\n    \n\n# **4: Putting It All Together**\n\nThe main degit function ties everything together, handling directory creation, fetching, and extracting the repository:\n\n```plaintext\nexport const degit = async ({\n    repoOrg,\n    repoName,\n    dest,\n}: {\n    repoOrg: string;\n    repoName: string;\n    dest: string;\n}) => {\n    const base = path.join(tmpdir(), '.degit');\n    const dir = path.join(base, repoOrg, repoName);\n    const file = `${dir}/HEAD.tar.gz`;\n    const url = `https://github.com/${repoOrg}/${repoName}/archive/HEAD.tar.gz`;\n    mkdirp(path.dirname(file));\n    await fetch(url, file);\n    mkdirp(dest);\n    await untar(file, dest);\n    fs.unlinkSync(file);\n};\n```\n\n[mkdirp](https://github.com/remotion-dev/remotion/blob/main/packages/create-video/src/mkdirp.ts) is used to create a directories recursively.\n\n# **Conclusion:**\n\nI found that remotion uses degit to download templates when you run their installation commmand:\n\n```plaintext\nnpx create-video@latest\n```\n\nThis command asks you to choose a template, this is where degit comes into action to download the latest commit of the selected template\n\nYou can check this code from [create-video package](https://github.com/remotion-dev/remotion/blob/c535e676badd055187d1ea8007f9ac76ab0ad315/packages/create-video/src/init.ts#L109) for proof.\n\n![](https://miro.medium.com/v2/resize:fit:875/0*7vT8QgWHKCJj4eCF)\n\n> [*Get free courses inspired by the best practices used in open source.*](https://app.thinkthroo.com/best-practices)\n\n# About me:\n\nHey, my name is [Ramu Narasinga](https://ramunarasinga.com). I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\n\n***I am open to work on interesting projects. Send me an email at ramu.narasinga@gmail.com***\n\nMy Github —  [https://github.com/ramu-narasinga](https://github.com/ramu-narasinga)\n\nMy website —  [https://ramunarasinga.com](https://ramunarasinga.com/)\n\nMy Youtube channel —  [https://www.youtube.com/@thinkthroo](https://www.youtube.com/@thinkthroo)\n\nLearning platform —  [https://thinkthroo.com](https://thinkthroo.com/)\n\nCodebase Architecture —  [https://app.thinkthroo.com/architecture](https://app.thinkthroo.com/architecture)\n\nBest practices —  [https://app.thinkthroo.com/best-practices](https://app.thinkthroo.com/best-practices)\n\nProduction-grade projects —  [https://app.thinkthroo.com/production-grade-projects](https://app.thinkthroo.com/production-grade-projects)\n\n# **References:**\n\n1. [https://github.com/Rich-Harris/degit](https://github.com/Rich-Harris/degit)\n    \n2. [https://github.com/remotion-dev/remotion/blob/main/packages/create-video/src/degit.ts](https://github.com/remotion-dev/remotion/blob/main/packages/create-video/src/degit.ts)\n    \n3. [https://github.com/remotion-dev/remotion/blob/c535e676badd055187d1ea8007f9ac76ab0ad315/packages/create-video/src/init.ts#L109](https://github.com/remotion-dev/remotion/blob/c535e676badd055187d1ea8007f9ac76ab0ad315/packages/create-video/src/init.ts#L109)\n    \n4. [https://github.com/remotion-dev/remotion/blob/main/packages/create-video/src/mkdirp.ts](https://github.com/remotion-dev/remotion/blob/main/packages/create-video/src/mkdirp.ts)",
    "code": "var Component=(()=>{var p=Object.create;var r=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var b=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),N=(i,e)=>{for(var a in e)r(i,a,{get:e[a],enumerable:!0})},l=(i,e,a,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of g(e))!f.call(i,t)&&t!==a&&r(i,t,{get:()=>e[t],enumerable:!(s=m(e,t))||s.enumerable});return i};var y=(i,e,a)=>(a=i!=null?p(u(i)):{},l(e||!i||!i.__esModule?r(a,\"default\",{value:i,enumerable:!0}):a,i)),k=i=>l(r({},\"__esModule\",{value:!0}),i);var d=b((j,c)=>{c.exports=_jsx_runtime});var w={};N(w,{default:()=>o,frontmatter:()=>v});var n=y(d()),v={title:\"Use degit to download a template in your CLI tool.\"};function h(i){let e={a:\"a\",blockquote:\"blockquote\",br:\"br\",code:\"code\",div:\"div\",em:\"em\",h1:\"h1\",img:\"img\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",ul:\"ul\",...i.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"I found a file named \\u201Cdegit\\u201D in the \",(0,n.jsx)(e.a,{href:\"https://github.com/remotion-dev/remotion/blob/main/packages/create-video/src/degit.ts\",children:\"Remotion source code\"}),\". \",(0,n.jsx)(e.a,{href:\"https://www.remotion.dev/\",children:\"Remotion\"}),\" helps you make videos programatically.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"In this article, we will look at the following concepts:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"What is Degit?\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Build a simple degit function inspired by \",(0,n.jsx)(e.a,{href:\"https://github.com/remotion-dev/remotion/blob/main/packages/create-video/src/degit.ts\",children:\"Remotion\\u2019s degit file\"})]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:875/1*9HJbUD4G5M4MLeAI3WZ8rA.png\",alt:\"\"})}),`\n`,(0,n.jsx)(e.h1,{id:\"what-is-degit\",children:(0,n.jsx)(e.strong,{children:\"What is Degit?\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"I do remember seeing \\u201Cdegit\\u201D mentioned in one of the Readmes in the open source, but I could not recall which repository it was so I googled what a degit means and found this \",(0,n.jsx)(e.a,{href:\"https://github.com/Rich-Harris/degit\",children:\"degit npm package\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In simple terms, You can use degit to quickly make a copy of a Github repository by only downloading the latest commit\",(0,n.jsx)(e.br,{}),`\n`,\"instead of the entire git history.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Visit the official \",(0,n.jsx)(e.a,{href:\"https://github.com/Rich-Harris/degit\",children:\"npm package for degit\"}),\" to read more about this package.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"You can use this degit package to download repos from Gitlab or Bitbucket as well so its not just limited to Github repositories.\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"# download from GitLab\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"degit gitlab:user/repo\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"# download from BitBucket\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"degit bitbucket:user/repo\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"degit user/repo\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"# these commands are equivalent\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"degit github:user/repo\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"Here\\u2019s a sample usage in Javascript:\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const degit = require('degit');\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const emitter = degit('user/repo', {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    cache: true,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    force: true,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    verbose: true,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"});\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"emitter.on('info', info => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    console.log(info.message);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"});\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"emitter.clone('path/to/dest').then(() => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    console.log('done');\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"});\"})})]})})}),`\n`,(0,n.jsx)(e.h1,{id:\"build-a-simple-degit-function-inspired-by-remotions-degit-file\",children:(0,n.jsx)(e.strong,{children:\"Build a simple degit function inspired by Remotion\\u2019s degit file\"})}),`\n`,(0,n.jsx)(e.p,{children:\"To understand how to build a simple degit function, let\\u2019s break down the code from Remotion\\u2019s degit.ts file. This file implements a basic version of what the degit npm package does: fetching a GitHub repository\\u2019s latest state without downloading the full history.\"}),`\n`,(0,n.jsx)(e.h1,{id:\"1-imports-used\",children:(0,n.jsx)(e.strong,{children:\"1. Imports used\"})}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"import https from 'https';\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"import fs from 'node:fs';\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"import {tmpdir} from 'node:os';\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"import path from 'node:path';\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"import tar from 'tar';\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"import {mkdirp} from './mkdirp';\"})})]})})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"https: Used to make a network request to fetch the repository.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"fs: Interacts with the file system, such as writing the downloaded files.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"tmpdir: Provides the system\\u2019s temporary directory path.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"path: Handles and transforms file paths.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"tar: Extracts the contents of the tarball (compressed file).\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"mkdirp: A helper function to create directories recursively, provided in a separate file.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h1,{id:\"2-fetching-the-repository\",children:(0,n.jsx)(e.strong,{children:\"2: Fetching the Repository\"})}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"export function fetch(url: string, dest: string) {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    return new Promise<void>((resolve, reject) => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        https.get(url, (response) => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"            const code = response.statusCode as number;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"            if (code >= 400) {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"                reject(\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"                    new Error(\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"                        `Network request to ${url} failed with code ${code} (${response.statusMessage})`,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"                    ),\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"                );\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"            } else if (code >= 300) {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"                fetch(response.headers.location as string, dest)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"                    .then(resolve)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"                    .catch(reject);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"            } else {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"                response\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"                    .pipe(fs.createWriteStream(dest))\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"                    .on('finish', () => resolve())\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"                    .on('error', reject);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"            }\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        }).on('error', reject);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    });\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})})]})})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"URL Handling: The function checks if the request is successful (status codes below 300). If it\\u2019s a redirect (codes between 300 and 399), it follows the new URL. If it\\u2019s an error (codes 400+), it rejects the promise.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"File Saving: The repository is downloaded and saved to the dest path using fs.createWriteStream.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h1,{id:\"3-extracting-the-repository\",children:(0,n.jsx)(e.strong,{children:\"3: Extracting the Repository\"})}),`\n`,(0,n.jsx)(e.p,{children:\"After downloading the repository, it\\u2019s necessary to extract the contents of the tarball:\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"function untar(file: string, dest: string) {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    return tar.extract(\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"            file,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"            strip: 1,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"            C: dest,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        },\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"        [],\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    );\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})})]})})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Tar Extraction: This function extracts the contents of the .tar.gz file into the specified destination directory.\"}),`\n`]}),`\n`,(0,n.jsx)(e.h1,{id:\"4-putting-it-all-together\",children:(0,n.jsx)(e.strong,{children:\"4: Putting It All Together\"})}),`\n`,(0,n.jsx)(e.p,{children:\"The main degit function ties everything together, handling directory creation, fetching, and extracting the repository:\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"export const degit = async ({\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    repoOrg,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    repoName,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    dest,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}: {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    repoOrg: string;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    repoName: string;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    dest: string;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}) => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    const base = path.join(tmpdir(), '.degit');\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    const dir = path.join(base, repoOrg, repoName);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    const file = `${dir}/HEAD.tar.gz`;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    const url = `https://github.com/${repoOrg}/${repoName}/archive/HEAD.tar.gz`;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    mkdirp(path.dirname(file));\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    await fetch(url, file);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    mkdirp(dest);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    await untar(file, dest);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    fs.unlinkSync(file);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"};\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/remotion-dev/remotion/blob/main/packages/create-video/src/mkdirp.ts\",children:\"mkdirp\"}),\" is used to create a directories recursively.\"]}),`\n`,(0,n.jsx)(e.h1,{id:\"conclusion\",children:(0,n.jsx)(e.strong,{children:\"Conclusion:\"})}),`\n`,(0,n.jsx)(e.p,{children:\"I found that remotion uses degit to download templates when you run their installation commmand:\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsx)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"npx create-video@latest\"})})})})}),`\n`,(0,n.jsx)(e.p,{children:\"This command asks you to choose a template, this is where degit comes into action to download the latest commit of the selected template\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can check this code from \",(0,n.jsx)(e.a,{href:\"https://github.com/remotion-dev/remotion/blob/c535e676badd055187d1ea8007f9ac76ab0ad315/packages/create-video/src/init.ts#L109\",children:\"create-video package\"}),\" for proof.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:875/0*7vT8QgWHKCJj4eCF\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/best-practices\",children:(0,n.jsx)(e.em,{children:\"Get free courses inspired by the best practices used in open source.\"})})}),`\n`]}),`\n`,(0,n.jsx)(e.h1,{id:\"about-me\",children:\"About me:\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Hey, my name is \",(0,n.jsx)(e.a,{href:\"https://ramunarasinga.com\",children:\"Ramu Narasinga\"}),\". I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:(0,n.jsxs)(e.strong,{children:[\"I am open to work on interesting projects. Send me an email at \",(0,n.jsx)(e.a,{href:\"mailto:ramu.narasinga@gmail.com\",children:\"ramu.narasinga@gmail.com\"})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Github\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://github.com/ramu-narasinga\",children:\"https://github.com/ramu-narasinga\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My website\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://ramunarasinga.com/\",children:\"https://ramunarasinga.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Youtube channel\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://www.youtube.com/@thinkthroo\",children:\"https://www.youtube.com/@thinkthroo\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Learning platform\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://thinkthroo.com/\",children:\"https://thinkthroo.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Codebase Architecture\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/architecture\",children:\"https://app.thinkthroo.com/architecture\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Best practices\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/best-practices\",children:\"https://app.thinkthroo.com/best-practices\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Production-grade projects\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/production-grade-projects\",children:\"https://app.thinkthroo.com/production-grade-projects\"})]}),`\n`,(0,n.jsx)(e.h1,{id:\"references\",children:(0,n.jsx)(e.strong,{children:\"References:\"})}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/Rich-Harris/degit\",children:\"https://github.com/Rich-Harris/degit\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/remotion-dev/remotion/blob/main/packages/create-video/src/degit.ts\",children:\"https://github.com/remotion-dev/remotion/blob/main/packages/create-video/src/degit.ts\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/remotion-dev/remotion/blob/c535e676badd055187d1ea8007f9ac76ab0ad315/packages/create-video/src/init.ts#L109\",children:\"https://github.com/remotion-dev/remotion/blob/c535e676badd055187d1ea8007f9ac76ab0ad315/packages/create-video/src/init.ts#L109\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/remotion-dev/remotion/blob/main/packages/create-video/src/mkdirp.ts\",children:\"https://github.com/remotion-dev/remotion/blob/main/packages/create-video/src/mkdirp.ts\"})}),`\n`]}),`\n`]})]})}function o(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,{...i,children:(0,n.jsx)(h,{...i})}):h(i)}return k(w);})();\n;return Component;"
  },
  "_id": "blog/degit-to-download-CLI.mdx",
  "_raw": {
    "sourceFilePath": "blog/degit-to-download-CLI.mdx",
    "sourceFileName": "degit-to-download-CLI.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/degit-to-download-CLI"
  },
  "type": "Doc",
  "slug": "/blog/degit-to-download-CLI",
  "slugAsParams": "degit-to-download-CLI"
}
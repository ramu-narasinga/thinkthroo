[
  {
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "[Build Zustand from Scratch]\r\n\r\nIn this course, we build Zustand from scratch using TDD approach.\r\n\r\nWe gradually add the necessary tooling required in this project.\r\n\r\nThe approach:\r\n1. Set up a Node project with TypeScript. \r\n\r\n[C: Project Setup]\r\n[L: Create a Node project with TypeScript]\r\n# Challenge\r\n\r\nIn this challenge, you will have to complete the below tasks:\r\n- Create a Node Project with TypeScript\r\n- Make sure your tsconfig.json matches that of [Zustand's](https://github.com/pmndrs/zustand/blob/v4.5.5/tsconfig.json) (v4.5.5)\r\n\r\n## Resources:\r\n1. https://khalilstemmler.com/blogs/typescript/node-starter-project/\r\n\r\n# Solution\r\n\r\n\r\n\r\n[L: Configure vitest]\r\n# Challenge\r\n\r\nIn this challenge, you will have to complete the below tasks:\r\n- Study the [vitest.config.ts in Zustand](https://github.com/pmndrs/zustand/blob/main/vitest.config.ts).\r\n- Read the Vitest's [Getting Started Guide](https://vitest.dev/guide/).\r\n- Configure Vitest in your project.\r\n- Update your project's vitest.config.ts to match with [Zustand's vitest.config.ts](https://github.com/pmndrs/zustand/blob/main/vitest.config.ts)\r\n\r\n> If you copy over Zustand's vitest.config.ts into your project, please make sure you read the options you pasted so you understand\r\nyour configuration.\r\n\r\n# Resources:\r\n1. https://vitest.dev/guide/\r\n2. https://github.com/pmndrs/zustand/blob/main/vitest.config.ts\r\n\r\n# Solution\r\n\r\n[C: Create a store hook and api object]\r\n[L: Write test]\r\n# Challenge\r\n\r\nNow that you have setup your project locally and configured vitest, it is time you write tests first. \r\n\r\nWe are taking a TDD approach to build the zustand from scratch, we aim to cover the core functionalities so that you\r\nunderstand how Zustand's internals work.\r\n\r\nIn this challenge, you will have to complete the below tasks:\r\n\r\n- Head over to [basic.test.tsx](https://github.com/pmndrs/zustand/blob/main/tests/basic.test.tsx#L21) and analyze the first\r\ntest case - 'creates a store hook and api object'.\r\n- Create a folder named tests at the root of your project.\r\n- Create a file named `basic.test.ts`\r\n- Copy and paste the test case - \"creates a store hook and api object\" into your `basic.test.ts`\r\n\r\n[L: Write create API]\r\n[L: Execute test]",
      "code": "var Component=(()=>{var u=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var b=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),y=(n,e)=>{for(var i in e)o(n,i,{get:e[i],enumerable:!0})},c=(n,e,i,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!f.call(n,r)&&r!==i&&o(n,r,{get:()=>e[r],enumerable:!(s=p(e,r))||s.enumerable});return n};var v=(n,e,i)=>(i=n!=null?u(g(n)):{},c(e||!n||!n.__esModule?o(i,\"default\",{value:n,enumerable:!0}):i,n)),j=n=>c(o({},\"__esModule\",{value:!0}),n);var h=b((x,l)=>{l.exports=_jsx_runtime});var k={};y(k,{default:()=>d,frontmatter:()=>w});var t=v(h()),w=void 0;function a(n){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",li:\"li\",ol:\"ol\",p:\"p\",ul:\"ul\",...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:\"[Build Zustand from Scratch]\"}),`\n`,(0,t.jsx)(e.p,{children:\"In this course, we build Zustand from scratch using TDD approach.\"}),`\n`,(0,t.jsx)(e.p,{children:\"We gradually add the necessary tooling required in this project.\"}),`\n`,(0,t.jsx)(e.p,{children:\"The approach:\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Set up a Node project with TypeScript.\"}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:`[C: Project Setup]\\r\n[L: Create a Node project with TypeScript]`}),`\n`,(0,t.jsx)(e.h1,{id:\"challenge\",children:\"Challenge\"}),`\n`,(0,t.jsx)(e.p,{children:\"In this challenge, you will have to complete the below tasks:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Create a Node Project with TypeScript\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"Make sure your tsconfig.json matches that of \",(0,t.jsx)(e.a,{href:\"https://github.com/pmndrs/zustand/blob/v4.5.5/tsconfig.json\",children:\"Zustand's\"}),\" (v4.5.5)\"]}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:\"resources\",children:\"Resources:\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://khalilstemmler.com/blogs/typescript/node-starter-project/\",children:\"https://khalilstemmler.com/blogs/typescript/node-starter-project/\"})}),`\n`]}),`\n`,(0,t.jsx)(e.h1,{id:\"solution\",children:\"Solution\"}),`\n`,(0,t.jsx)(e.p,{children:\"[L: Configure vitest]\"}),`\n`,(0,t.jsx)(e.h1,{id:\"challenge-1\",children:\"Challenge\"}),`\n`,(0,t.jsx)(e.p,{children:\"In this challenge, you will have to complete the below tasks:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Study the \",(0,t.jsx)(e.a,{href:\"https://github.com/pmndrs/zustand/blob/main/vitest.config.ts\",children:\"vitest.config.ts in Zustand\"}),\".\"]}),`\n`,(0,t.jsxs)(e.li,{children:[\"Read the Vitest's \",(0,t.jsx)(e.a,{href:\"https://vitest.dev/guide/\",children:\"Getting Started Guide\"}),\".\"]}),`\n`,(0,t.jsx)(e.li,{children:\"Configure Vitest in your project.\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"Update your project's vitest.config.ts to match with \",(0,t.jsx)(e.a,{href:\"https://github.com/pmndrs/zustand/blob/main/vitest.config.ts\",children:\"Zustand's vitest.config.ts\"})]}),`\n`]}),`\n`,(0,t.jsxs)(e.blockquote,{children:[`\n`,(0,t.jsx)(e.p,{children:`If you copy over Zustand's vitest.config.ts into your project, please make sure you read the options you pasted so you understand\\r\nyour configuration.`}),`\n`]}),`\n`,(0,t.jsx)(e.h1,{id:\"resources-1\",children:\"Resources:\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://vitest.dev/guide/\",children:\"https://vitest.dev/guide/\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/pmndrs/zustand/blob/main/vitest.config.ts\",children:\"https://github.com/pmndrs/zustand/blob/main/vitest.config.ts\"})}),`\n`]}),`\n`,(0,t.jsx)(e.h1,{id:\"solution-1\",children:\"Solution\"}),`\n`,(0,t.jsx)(e.p,{children:`[C: Create a store hook and api object]\\r\n[L: Write test]`}),`\n`,(0,t.jsx)(e.h1,{id:\"challenge-2\",children:\"Challenge\"}),`\n`,(0,t.jsx)(e.p,{children:\"Now that you have setup your project locally and configured vitest, it is time you write tests first.\"}),`\n`,(0,t.jsx)(e.p,{children:`We are taking a TDD approach to build the zustand from scratch, we aim to cover the core functionalities so that you\\r\nunderstand how Zustand's internals work.`}),`\n`,(0,t.jsx)(e.p,{children:\"In this challenge, you will have to complete the below tasks:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[\"Head over to \",(0,t.jsx)(e.a,{href:\"https://github.com/pmndrs/zustand/blob/main/tests/basic.test.tsx#L21\",children:\"basic.test.tsx\"}),` and analyze the first\\r\ntest case - 'creates a store hook and api object'.`]}),`\n`,(0,t.jsx)(e.li,{children:\"Create a folder named tests at the root of your project.\"}),`\n`,(0,t.jsxs)(e.li,{children:[\"Create a file named \",(0,t.jsx)(e.code,{children:\"basic.test.ts\"})]}),`\n`,(0,t.jsxs)(e.li,{children:['Copy and paste the test case - \"creates a store hook and api object\" into your ',(0,t.jsx)(e.code,{children:\"basic.test.ts\"})]}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:`[L: Write create API]\\r\n[L: Execute test]`})]})}function d(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(a,{...n})}):a(n)}return j(k);})();\n;return Component;"
    },
    "_id": "guide/build-from-scratch/build-zustand-from-scratch/introduction.mdx",
    "_raw": {
      "sourceFilePath": "guide/build-from-scratch/build-zustand-from-scratch/introduction.mdx",
      "sourceFileName": "introduction.mdx",
      "sourceFileDir": "guide/build-from-scratch/build-zustand-from-scratch",
      "contentType": "mdx",
      "flattenedPath": "guide/build-from-scratch/build-zustand-from-scratch/introduction"
    },
    "type": "Doc",
    "slug": "/guide/build-from-scratch/build-zustand-from-scratch/introduction",
    "slugAsParams": "build-from-scratch/build-zustand-from-scratch/introduction"
  },
  {
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "# Refine component\r\n\r\nIn this article, we will review the Refine component found in Refine source code. \r\n\r\nLocating this component\r\n(Talk about how you find this component?)\r\n- could not fine in index.tsx - https://github.com/refinedev/refine/blob/main/packages/core/src/index.tsx\r\n- Search - https://github.com/search?q=repo%3Arefinedev%2Frefine+Refine+path%3A%2F%5Epackages%5C%2Fcore%5C%2Fsrc%5C%2F%2F&type=code\r\n- Found Refine defined in https://github.com/refinedev/refine/blob/6729794dada71ad34402c8e66303e821193af0d9/packages/core/src/components/containers/refine/index.tsx#L39",
      "code": "var Component=(()=>{var p=Object.create;var c=Object.defineProperty;var l=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var b=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),g=(n,e)=>{for(var t in e)c(n,t,{get:e[t],enumerable:!0})},a=(n,e,t,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!x.call(n,r)&&r!==t&&c(n,r,{get:()=>e[r],enumerable:!(o=l(e,r))||o.enumerable});return n};var F=(n,e,t)=>(t=n!=null?p(u(n)):{},a(e||!n||!n.__esModule?c(t,\"default\",{value:n,enumerable:!0}):t,n)),C=n=>a(c({},\"__esModule\",{value:!0}),n);var d=b((R,s)=>{s.exports=_jsx_runtime});var v={};g(v,{default:()=>f,frontmatter:()=>k});var i=F(d()),k=void 0;function h(n){let e={a:\"a\",h1:\"h1\",li:\"li\",p:\"p\",ul:\"ul\",...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.h1,{id:\"refine-component\",children:\"Refine component\"}),`\n`,(0,i.jsx)(e.p,{children:\"In this article, we will review the Refine component found in Refine source code.\"}),`\n`,(0,i.jsx)(e.p,{children:`Locating this component\\r\n(Talk about how you find this component?)`}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsxs)(e.li,{children:[\"could not fine in index.tsx - \",(0,i.jsx)(e.a,{href:\"https://github.com/refinedev/refine/blob/main/packages/core/src/index.tsx\",children:\"https://github.com/refinedev/refine/blob/main/packages/core/src/index.tsx\"})]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Search - \",(0,i.jsx)(e.a,{href:\"https://github.com/search?q=repo%3Arefinedev%2Frefine+Refine+path%3A%2F%5Epackages%5C%2Fcore%5C%2Fsrc%5C%2F%2F&type=code\",children:\"https://github.com/search?q=repo%3Arefinedev%2Frefine+Refine+path%3A%2F%5Epackages%5C%2Fcore%5C%2Fsrc%5C%2F%2F&type=code\"})]}),`\n`,(0,i.jsxs)(e.li,{children:[\"Found Refine defined in \",(0,i.jsx)(e.a,{href:\"https://github.com/refinedev/refine/blob/6729794dada71ad34402c8e66303e821193af0d9/packages/core/src/components/containers/refine/index.tsx#L39\",children:\"https://github.com/refinedev/refine/blob/6729794dada71ad34402c8e66303e821193af0d9/packages/core/src/components/containers/refine/index.tsx#L39\"})]}),`\n`]})]})}function f(n={}){let{wrapper:e}=n.components||{};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(h,{...n})}):h(n)}return C(v);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/refine/refine-component.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/refine/refine-component.mdx",
      "sourceFileName": "refine-component.mdx",
      "sourceFileDir": "guide/codebase-architecture/refine",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/refine/refine-component"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/refine/refine-component",
    "slugAsParams": "codebase-architecture/refine/refine-component"
  },
  {
    "title": "Component Structure in Cal.com\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\nIn this guide, you will learn how components are organized in Cal.com.\r\n\r\nBy components, here we mean the building blocks of the user interface or more precisely, \r\nthe building blocks used in a page.\r\n\r\nOur focus is primarily on the folder structure and file naming conventions used. \r\nIn order to establish a common pattern and to understand components structure better, \r\nwe will study few pages/routes in the Cal.com.\r\n\r\nOur approach is to pick a route, locate the route in the source code and from there on, we will look at \r\n1. Where the imported components are located in a project\r\n2. Folder structure and naming conventions used  \r\n3. How the \"page\" is built using these imported components\r\n\r\nThere will be screenshots and links pointing to folders and components that belong to this project. \r\n\r\nwe will select some routes as shown in the following and discuss the components structure used.\r\n\r\n1. [Event types route](https://app.cal.com/event-types)\r\n2. [Booking route](https://app.cal.com/bookings/upcoming) \r\n  a. Upcoming sub-route\r\n  b. Unconfirmed sub-route\r\n  c. Recurring sub-route\r\n  d. Past sub-route\r\n  e. Cancelled sub-route\r\n3. [Availability route](https://app.cal.com/availability)\r\n\r\nUse this free guide to learn how components are organized in Cal.com.",
      "code": "var Component=(()=>{var h=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var b=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),w=(t,e)=>{for(var o in e)i(t,o,{get:e[o],enumerable:!0})},s=(t,e,o,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!f.call(t,r)&&r!==o&&i(t,r,{get:()=>e[r],enumerable:!(l=p(e,r))||l.enumerable});return t};var y=(t,e,o)=>(o=t!=null?h(g(t)):{},s(e||!t||!t.__esModule?i(o,\"default\",{value:t,enumerable:!0}):o,t)),x=t=>s(i({},\"__esModule\",{value:!0}),t);var a=b((_,c)=>{c.exports=_jsx_runtime});var j={};w(j,{default:()=>d,frontmatter:()=>C});var n=y(a()),C={title:\"Component Structure in Cal.com\"};function u(t){let e={a:\"a\",li:\"li\",ol:\"ol\",p:\"p\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"In this guide, you will learn how components are organized in Cal.com.\"}),`\n`,(0,n.jsx)(e.p,{children:`By components, here we mean the building blocks of the user interface or more precisely,\\r\nthe building blocks used in a page.`}),`\n`,(0,n.jsx)(e.p,{children:`Our focus is primarily on the folder structure and file naming conventions used.\\r\nIn order to establish a common pattern and to understand components structure better,\\r\nwe will study few pages/routes in the Cal.com.`}),`\n`,(0,n.jsx)(e.p,{children:\"Our approach is to pick a route, locate the route in the source code and from there on, we will look at\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Where the imported components are located in a project\"}),`\n`,(0,n.jsx)(e.li,{children:\"Folder structure and naming conventions used\"}),`\n`,(0,n.jsx)(e.li,{children:'How the \"page\" is built using these imported components'}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"There will be screenshots and links pointing to folders and components that belong to this project.\"}),`\n`,(0,n.jsx)(e.p,{children:\"we will select some routes as shown in the following and discuss the components structure used.\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://app.cal.com/event-types\",children:\"Event types route\"})}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.a,{href:\"https://app.cal.com/bookings/upcoming\",children:\"Booking route\"}),`\\r\na. Upcoming sub-route\\r\nb. Unconfirmed sub-route\\r\nc. Recurring sub-route\\r\nd. Past sub-route\\r\ne. Cancelled sub-route`]}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://app.cal.com/availability\",children:\"Availability route\"})}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Use this free guide to learn how components are organized in Cal.com.\"})]})}function d(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(u,{...t})}):u(t)}return x(j);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/cal-com/component-structure/introduction.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/cal-com/component-structure/introduction.mdx",
      "sourceFileName": "introduction.mdx",
      "sourceFileDir": "guide/codebase-architecture/cal-com/component-structure",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/cal-com/component-structure/introduction"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/cal-com/component-structure/introduction",
    "slugAsParams": "codebase-architecture/cal-com/component-structure/introduction"
  },
  {
    "title": "API Layer in Cal.com\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\nIn this guide, you will learn the API layer used in [Cal.com](https://github.com/calcom/cal.com). \r\n\r\nCal.com provides scheduling infrastructure for absolutely everyone.\r\n\r\n# What's API Layer?\r\nIn the context of web applications, API layer means communicating with your server to get/mutate data.\r\nInspired by [Bulletproof React's API Layer](https://github.com/alan2207/bulletproof-react/blob/master/docs/api-layer.md)\r\nWe analyze the API Layer in the [Cal.com](https://github.com/calcom/cal.com). \r\n\r\n# Cal.com API Layer\r\nTo study the API Layer, we pick a page on https://app.cal.com/ and look at the source code except we are\r\nnarrowing down our expedition to focus on the API Layer.\r\n\r\n# Concepts you will learn:\r\nYou will be learning the API layer used in the Cal.com. \r\nRead through this guide to understand how Cal.com's API layer works.\r\n\r\n## Data fetched in Event Types page\r\n1. [pages/event-types]\r\n(https://github.com/calcom/cal.com/blob/main/apps/web/pages/event-types/index.tsx)\r\n2. [event-types-listing-view](https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx)\r\n\r\n## Data fetched in Bookings page\r\n1. [pages/bookings/status](https://github.com/calcom/cal.com/blob/main/apps/web/pages/bookings/%5Bstatus%5D.tsx)\r\n2. [bookings-listing-view.tsx](https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx)",
      "code": "var Component=(()=>{var d=Object.create;var i=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var y=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),w=(n,e)=>{for(var a in e)i(n,a,{get:e[a],enumerable:!0})},l=(n,e,a,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of u(e))!b.call(n,o)&&o!==a&&i(n,o,{get:()=>e[o],enumerable:!(c=m(e,o))||c.enumerable});return n};var f=(n,e,a)=>(a=n!=null?d(g(n)):{},l(e||!n||!n.__esModule?i(a,\"default\",{value:n,enumerable:!0}):a,n)),x=n=>l(i({},\"__esModule\",{value:!0}),n);var s=y((P,r)=>{r.exports=_jsx_runtime});var I={};w(I,{default:()=>p,frontmatter:()=>v});var t=f(s()),v={title:\"API Layer in Cal.com\"};function h(n){let e={a:\"a\",h1:\"h1\",h2:\"h2\",li:\"li\",ol:\"ol\",p:\"p\",...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"In this guide, you will learn the API layer used in \",(0,t.jsx)(e.a,{href:\"https://github.com/calcom/cal.com\",children:\"Cal.com\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Cal.com provides scheduling infrastructure for absolutely everyone.\"}),`\n`,(0,t.jsx)(e.h1,{id:\"whats-api-layer\",children:\"What's API Layer?\"}),`\n`,(0,t.jsxs)(e.p,{children:[`In the context of web applications, API layer means communicating with your server to get/mutate data.\\r\nInspired by `,(0,t.jsx)(e.a,{href:\"https://github.com/alan2207/bulletproof-react/blob/master/docs/api-layer.md\",children:\"Bulletproof React's API Layer\"}),`\\r\nWe analyze the API Layer in the `,(0,t.jsx)(e.a,{href:\"https://github.com/calcom/cal.com\",children:\"Cal.com\"}),\".\"]}),`\n`,(0,t.jsx)(e.h1,{id:\"calcom-api-layer\",children:\"Cal.com API Layer\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"To study the API Layer, we pick a page on \",(0,t.jsx)(e.a,{href:\"https://app.cal.com/\",children:\"https://app.cal.com/\"}),` and look at the source code except we are\\r\nnarrowing down our expedition to focus on the API Layer.`]}),`\n`,(0,t.jsx)(e.h1,{id:\"concepts-you-will-learn\",children:\"Concepts you will learn:\"}),`\n`,(0,t.jsx)(e.p,{children:`You will be learning the API layer used in the Cal.com.\\r\nRead through this guide to understand how Cal.com's API layer works.`}),`\n`,(0,t.jsx)(e.h2,{id:\"data-fetched-in-event-types-page\",children:\"Data fetched in Event Types page\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[`[pages/event-types]\\r\n(`,(0,t.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/pages/event-types/index.tsx\",children:\"https://github.com/calcom/cal.com/blob/main/apps/web/pages/event-types/index.tsx\"}),\")\"]}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx\",children:\"event-types-listing-view\"})}),`\n`]}),`\n`,(0,t.jsx)(e.h2,{id:\"data-fetched-in-bookings-page\",children:\"Data fetched in Bookings page\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/pages/bookings/%5Bstatus%5D.tsx\",children:\"pages/bookings/status\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx\",children:\"bookings-listing-view.tsx\"})}),`\n`]})]})}function p(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(h,{...n})}):h(n)}return x(I);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/cal-com/api-layer/introduction.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/cal-com/api-layer/introduction.mdx",
      "sourceFileName": "introduction.mdx",
      "sourceFileDir": "guide/codebase-architecture/cal-com/api-layer",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/cal-com/api-layer/introduction"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/cal-com/api-layer/introduction",
    "slugAsParams": "codebase-architecture/cal-com/api-layer/introduction"
  },
  {
    "title": "Error Handling in Cal.com\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\n[Alert component] is used to show errors:\r\n\r\nIn this guide, we analyze how errors are handled in a component in \r\n[cal.com](https://github.com/calcom/cal.com/blob/main/apps/web/pages/bookings/%5Bstatus%5D.tsx).\r\n\r\nHow to find out what error handling mechanisms are used in cal.com codebase? Pick a page on cal.com and\r\nfind the page route in its [source code](link-to-code)\r\n\r\nIn this guide, we choose the \r\n[bookings listing component](https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx).\r\n\r\n[Insert screenshots of bookings page]\r\n\r\nBookings component depends purely on the `query` result to decide what to render based on `query.status`.\r\n\r\n```\r\n// picked from https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L82C3-L95C5\r\nconst query = trpc.viewer.bookings.get.useInfiniteQuery(\r\n    {\r\n      limit: 10,\r\n      filters: {\r\n        ...filterQuery,\r\n        status: filterQuery.status ?? status,\r\n      },\r\n    },\r\n    {\r\n      // first render has status `undefined`\r\n      enabled: true,\r\n      getNextPageParam: (lastPage) => lastPage.nextCursor,\r\n    }\r\n  );\r\n``` \r\n\r\nIn this guide, our focus is only on how errors are handled in a component. So, if there's an error encountered,\r\nquery.status would be \"error\".\r\n\r\n```\r\n{\r\n    query.status === \"error\" && \r\n    (\r\n      <Alert severity=\"error\" title={t(\"something_went_wrong\")} message={query.error.message} />\r\n    )\r\n}\r\n```\r\n\r\n[Alert](https://github.com/calcom/cal.com/blob/main/packages/ui/components/alert/Alert.tsx) is imported from\r\n`packages/ui/components/alert/Alert.tsx`\r\n\r\nReferences:\r\n1. https://github.com/calcom/cal.com/blob/main/apps/web/pages/bookings/%5Bstatus%5D.tsx\r\n2. https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L165\r\n3. https://github.com/calcom/cal.com/blob/main/packages/ui/components/alert/Alert.tsx\r\n// In auth/login error handling:\r\n4. https://github.com/calcom/cal.com/blob/main/apps/web/modules/auth/login-view.tsx#L232C1-L233C80\r\n\r\n[Error tracking]:\r\nCal.com uses Sentry to track production errors. The below code snippet is from [cal.com/apps/web/intrumentation.ts](https://github.com/calcom/cal.com/blob/main/apps/web/instrumentation.ts)\r\n\r\n```\r\nimport * as Sentry from \"@sentry/nextjs\";\r\n\r\nexport function register() {\r\n  if (process.env.NEXT_RUNTIME === \"nodejs\") {\r\n    Sentry.init({\r\n      dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,\r\n    });\r\n  }\r\n\r\n  if (process.env.NEXT_RUNTIME === \"edge\") {\r\n    Sentry.init({\r\n      dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,\r\n    });\r\n  }\r\n}\r\n```\r\nRead this [official Sentry docs](https://docs.sentry.io/platforms/javascript/guides/nextjs/) that explains how to setup Sentry in a Next.js project.\r\n\r\nThis intrumentation file above is automatically generated as part of Sentry setup. \r\n`dsn`:\r\nThe DSN tells the SDK where to send the events. If this value is not provided, the SDK will try to read it from the SENTRY_DSN environment variable. If that variable also does not exist, the SDK will just not send any events.\r\n\r\nIn runtimes without a process environment (such as the browser) that fallback does not apply.\r\n\r\nLearn more about DSN utilization.\r\n  \r\nReferences:\r\n1. https://github.com/calcom/cal.com/blob/main/apps/web/instrumentation.ts\r\n2. https://github.com/calcom/cal.com/blob/main/apps/web/sentry.client.config.ts \r\n3. https://docs.sentry.io/platforms/javascript/guides/nextjs/\r\n\r\n[Error Boundary]\r\n\r\nBy default, if your application throws an error during rendering, React will remove its UI \r\nfrom the screen. To prevent this, you can wrap a part of your UI into an error boundary. \r\nAn error boundary is a special component that lets you display some fallback UI instead of \r\nthe part that crashed—for example, an error message.\r\n\r\nReact docs explains [how to write your own boundary](https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary)\r\n\r\n```\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    // Example \"componentStack\":\r\n    //   in ComponentThatThrows (created by App)\r\n    //   in ErrorBoundary (created by App)\r\n    //   in div (created by App)\r\n    //   in App\r\n    logErrorToMyService(error, info.componentStack);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // You can render any custom fallback UI\r\n      return this.props.fallback;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n```\r\n\r\nYou can write your own ErrorBoundary or use [react-error-boundary](https://github.com/bvaughn/react-error-boundary/tree/master), recommended by React.\r\n\r\nGuess the kind of [ErrorBoundary used in cal.com](https://github.com/calcom/cal.com/blob/5bbccad41d625250ac03a6683e751b8ed6650721/packages/ui/components/errorBoundary/ErrorBoundary.tsx#L4)?\r\n\r\n```\r\nimport type { ErrorInfo } from \"react\";\r\nimport React from \"react\";\r\n\r\nclass ErrorBoundary extends React.Component<\r\n  { children: React.ReactNode; message?: string },\r\n  { error: Error | null; errorInfo: ErrorInfo | null }\r\n> {\r\n  constructor(props: { children: React.ReactNode } | Readonly<{ children: React.ReactNode }>) {\r\n    super(props);\r\n    this.state = { error: null, errorInfo: null };\r\n  }\r\n\r\n  componentDidCatch?(error: Error, errorInfo: ErrorInfo) {\r\n    // Catch errors in any components below and re-render with error message\r\n    this.setState({ error, errorInfo });\r\n    // You can also log error messages to an error reporting service here\r\n  }\r\n\r\n  render() {\r\n    // do not intercept next-not-found error, allow displaying not-found.tsx page when notFound() is thrown on server side\r\n    if (\r\n      this.state.error !== null &&\r\n      \"digest\" in this.state.error &&\r\n      this.state.error.digest === \"NEXT_NOT_FOUND\"\r\n    ) {\r\n      return this.props.children;\r\n    }\r\n\r\n    if (this.state.errorInfo) {\r\n      // Error path\r\n      return (\r\n        <div>\r\n          <h2>{this.props.message || \"Something went wrong.\"}</h2>\r\n          <details style={{ whiteSpace: \"pre-wrap\" }}>\r\n            {this.state.error && this.state.error.toString()}\r\n          </details>\r\n        </div>\r\n      );\r\n    }\r\n    // Normally, just render children\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n```\r\ncal.com has its own ErrorBoundary class. It has `componentDidCatch` and `render` methods defined. Although, documentation\r\nprovides the example containing `getDerivedStateFromError`, it looks like this `getDerivedStateFromError` method is not\r\nused in cal.com ErrorBoundary class. \r\n\r\nReferences:\r\n1. https://github.com/search?q=repo%3Acalcom%2Fcal.com%20ErrorBoundary&type=code\r\n2. https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary\r\n3. https://github.com/bvaughn/react-error-boundary\r\n4. https://github.com/calcom/cal.com/blob/5bbccad41d625250ac03a6683e751b8ed6650721/packages/ui/components/errorBoundary/ErrorBoundary.tsx#L4",
      "code": "var Component=(()=>{var p=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(n,r)=>()=>(r||n((r={exports:{}}).exports,r),r.exports),y=(n,r)=>{for(var o in r)a(n,o,{get:r[o],enumerable:!0})},i=(n,r,o,c)=>{if(r&&typeof r==\"object\"||typeof r==\"function\")for(let t of u(r))!g.call(n,t)&&t!==o&&a(n,t,{get:()=>r[t],enumerable:!(c=m(r,t))||c.enumerable});return n};var w=(n,r,o)=>(o=n!=null?p(b(n)):{},i(r||!n||!n.__esModule?a(o,\"default\",{value:n,enumerable:!0}):o,n)),v=n=>i(a({},\"__esModule\",{value:!0}),n);var l=f((S,s)=>{s.exports=_jsx_runtime});var E={};y(E,{default:()=>d,frontmatter:()=>x});var e=w(l()),x={title:\"Error Handling in Cal.com\"};function h(n){let r={a:\"a\",code:\"code\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",...n.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(r.p,{children:\"[Alert component] is used to show errors:\"}),`\n`,(0,e.jsxs)(r.p,{children:[`In this guide, we analyze how errors are handled in a component in\\r\n`,(0,e.jsx)(r.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/pages/bookings/%5Bstatus%5D.tsx\",children:\"cal.com\"}),\".\"]}),`\n`,(0,e.jsxs)(r.p,{children:[`How to find out what error handling mechanisms are used in cal.com codebase? Pick a page on cal.com and\\r\nfind the page route in its `,(0,e.jsx)(r.a,{href:\"link-to-code\",children:\"source code\"})]}),`\n`,(0,e.jsxs)(r.p,{children:[`In this guide, we choose the\\r\n`,(0,e.jsx)(r.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx\",children:\"bookings listing component\"}),\".\"]}),`\n`,(0,e.jsx)(r.p,{children:\"[Insert screenshots of bookings page]\"}),`\n`,(0,e.jsxs)(r.p,{children:[\"Bookings component depends purely on the \",(0,e.jsx)(r.code,{children:\"query\"}),\" result to decide what to render based on \",(0,e.jsx)(r.code,{children:\"query.status\"}),\".\"]}),`\n`,(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{children:`// picked from https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L82C3-L95C5\\r\nconst query = trpc.viewer.bookings.get.useInfiniteQuery(\\r\n    {\\r\n      limit: 10,\\r\n      filters: {\\r\n        ...filterQuery,\\r\n        status: filterQuery.status ?? status,\\r\n      },\\r\n    },\\r\n    {\\r\n      // first render has status \\`undefined\\`\\r\n      enabled: true,\\r\n      getNextPageParam: (lastPage) => lastPage.nextCursor,\\r\n    }\\r\n  );\n`})}),`\n`,(0,e.jsx)(r.p,{children:`In this guide, our focus is only on how errors are handled in a component. So, if there's an error encountered,\\r\nquery.status would be \"error\".`}),`\n`,(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{children:`{\\r\n    query.status === \"error\" && \\r\n    (\\r\n      <Alert severity=\"error\" title={t(\"something_went_wrong\")} message={query.error.message} />\\r\n    )\\r\n}\n`})}),`\n`,(0,e.jsxs)(r.p,{children:[(0,e.jsx)(r.a,{href:\"https://github.com/calcom/cal.com/blob/main/packages/ui/components/alert/Alert.tsx\",children:\"Alert\"}),` is imported from\\r\n`,(0,e.jsx)(r.code,{children:\"packages/ui/components/alert/Alert.tsx\"})]}),`\n`,(0,e.jsx)(r.p,{children:\"References:\"}),`\n`,(0,e.jsxs)(r.ol,{children:[`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/pages/bookings/%5Bstatus%5D.tsx\",children:\"https://github.com/calcom/cal.com/blob/main/apps/web/pages/bookings/%5Bstatus%5D.tsx\"})}),`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L165\",children:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L165\"})}),`\n`,(0,e.jsxs)(r.li,{children:[(0,e.jsx)(r.a,{href:\"https://github.com/calcom/cal.com/blob/main/packages/ui/components/alert/Alert.tsx\",children:\"https://github.com/calcom/cal.com/blob/main/packages/ui/components/alert/Alert.tsx\"}),`\\r\n// In auth/login error handling:`]}),`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/auth/login-view.tsx#L232C1-L233C80\",children:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/auth/login-view.tsx#L232C1-L233C80\"})}),`\n`]}),`\n`,(0,e.jsxs)(r.p,{children:[`[Error tracking]:\\r\nCal.com uses Sentry to track production errors. The below code snippet is from `,(0,e.jsx)(r.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/instrumentation.ts\",children:\"cal.com/apps/web/intrumentation.ts\"})]}),`\n`,(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{children:`import * as Sentry from \"@sentry/nextjs\";\\r\n\\r\nexport function register() {\\r\n  if (process.env.NEXT_RUNTIME === \"nodejs\") {\\r\n    Sentry.init({\\r\n      dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,\\r\n    });\\r\n  }\\r\n\\r\n  if (process.env.NEXT_RUNTIME === \"edge\") {\\r\n    Sentry.init({\\r\n      dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,\\r\n    });\\r\n  }\\r\n}\n`})}),`\n`,(0,e.jsxs)(r.p,{children:[\"Read this \",(0,e.jsx)(r.a,{href:\"https://docs.sentry.io/platforms/javascript/guides/nextjs/\",children:\"official Sentry docs\"}),\" that explains how to setup Sentry in a Next.js project.\"]}),`\n`,(0,e.jsxs)(r.p,{children:[`This intrumentation file above is automatically generated as part of Sentry setup.\\r\n`,(0,e.jsx)(r.code,{children:\"dsn\"}),`:\\r\nThe DSN tells the SDK where to send the events. If this value is not provided, the SDK will try to read it from the SENTRY_DSN environment variable. If that variable also does not exist, the SDK will just not send any events.`]}),`\n`,(0,e.jsx)(r.p,{children:\"In runtimes without a process environment (such as the browser) that fallback does not apply.\"}),`\n`,(0,e.jsx)(r.p,{children:\"Learn more about DSN utilization.\"}),`\n`,(0,e.jsx)(r.p,{children:\"References:\"}),`\n`,(0,e.jsxs)(r.ol,{children:[`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/instrumentation.ts\",children:\"https://github.com/calcom/cal.com/blob/main/apps/web/instrumentation.ts\"})}),`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/sentry.client.config.ts\",children:\"https://github.com/calcom/cal.com/blob/main/apps/web/sentry.client.config.ts\"})}),`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.a,{href:\"https://docs.sentry.io/platforms/javascript/guides/nextjs/\",children:\"https://docs.sentry.io/platforms/javascript/guides/nextjs/\"})}),`\n`]}),`\n`,(0,e.jsx)(r.p,{children:\"[Error Boundary]\"}),`\n`,(0,e.jsx)(r.p,{children:`By default, if your application throws an error during rendering, React will remove its UI\\r\nfrom the screen. To prevent this, you can wrap a part of your UI into an error boundary.\\r\nAn error boundary is a special component that lets you display some fallback UI instead of\\r\nthe part that crashed\\u2014for example, an error message.`}),`\n`,(0,e.jsxs)(r.p,{children:[\"React docs explains \",(0,e.jsx)(r.a,{href:\"https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary\",children:\"how to write your own boundary\"})]}),`\n`,(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{children:`class ErrorBoundary extends React.Component {\\r\n  constructor(props) {\\r\n    super(props);\\r\n    this.state = { hasError: false };\\r\n  }\\r\n\\r\n  static getDerivedStateFromError(error) {\\r\n    // Update state so the next render will show the fallback UI.\\r\n    return { hasError: true };\\r\n  }\\r\n\\r\n  componentDidCatch(error, info) {\\r\n    // Example \"componentStack\":\\r\n    //   in ComponentThatThrows (created by App)\\r\n    //   in ErrorBoundary (created by App)\\r\n    //   in div (created by App)\\r\n    //   in App\\r\n    logErrorToMyService(error, info.componentStack);\\r\n  }\\r\n\\r\n  render() {\\r\n    if (this.state.hasError) {\\r\n      // You can render any custom fallback UI\\r\n      return this.props.fallback;\\r\n    }\\r\n\\r\n    return this.props.children;\\r\n  }\\r\n}\n`})}),`\n`,(0,e.jsxs)(r.p,{children:[\"You can write your own ErrorBoundary or use \",(0,e.jsx)(r.a,{href:\"https://github.com/bvaughn/react-error-boundary/tree/master\",children:\"react-error-boundary\"}),\", recommended by React.\"]}),`\n`,(0,e.jsxs)(r.p,{children:[\"Guess the kind of \",(0,e.jsx)(r.a,{href:\"https://github.com/calcom/cal.com/blob/5bbccad41d625250ac03a6683e751b8ed6650721/packages/ui/components/errorBoundary/ErrorBoundary.tsx#L4\",children:\"ErrorBoundary used in cal.com\"}),\"?\"]}),`\n`,(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{children:`import type { ErrorInfo } from \"react\";\\r\nimport React from \"react\";\\r\n\\r\nclass ErrorBoundary extends React.Component<\\r\n  { children: React.ReactNode; message?: string },\\r\n  { error: Error | null; errorInfo: ErrorInfo | null }\\r\n> {\\r\n  constructor(props: { children: React.ReactNode } | Readonly<{ children: React.ReactNode }>) {\\r\n    super(props);\\r\n    this.state = { error: null, errorInfo: null };\\r\n  }\\r\n\\r\n  componentDidCatch?(error: Error, errorInfo: ErrorInfo) {\\r\n    // Catch errors in any components below and re-render with error message\\r\n    this.setState({ error, errorInfo });\\r\n    // You can also log error messages to an error reporting service here\\r\n  }\\r\n\\r\n  render() {\\r\n    // do not intercept next-not-found error, allow displaying not-found.tsx page when notFound() is thrown on server side\\r\n    if (\\r\n      this.state.error !== null &&\\r\n      \"digest\" in this.state.error &&\\r\n      this.state.error.digest === \"NEXT_NOT_FOUND\"\\r\n    ) {\\r\n      return this.props.children;\\r\n    }\\r\n\\r\n    if (this.state.errorInfo) {\\r\n      // Error path\\r\n      return (\\r\n        <div>\\r\n          <h2>{this.props.message || \"Something went wrong.\"}</h2>\\r\n          <details style={{ whiteSpace: \"pre-wrap\" }}>\\r\n            {this.state.error && this.state.error.toString()}\\r\n          </details>\\r\n        </div>\\r\n      );\\r\n    }\\r\n    // Normally, just render children\\r\n    return this.props.children;\\r\n  }\\r\n}\\r\n\\r\nexport default ErrorBoundary;\n`})}),`\n`,(0,e.jsxs)(r.p,{children:[\"cal.com has its own ErrorBoundary class. It has \",(0,e.jsx)(r.code,{children:\"componentDidCatch\"}),\" and \",(0,e.jsx)(r.code,{children:\"render\"}),` methods defined. Although, documentation\\r\nprovides the example containing `,(0,e.jsx)(r.code,{children:\"getDerivedStateFromError\"}),\", it looks like this \",(0,e.jsx)(r.code,{children:\"getDerivedStateFromError\"}),` method is not\\r\nused in cal.com ErrorBoundary class.`]}),`\n`,(0,e.jsx)(r.p,{children:\"References:\"}),`\n`,(0,e.jsxs)(r.ol,{children:[`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.a,{href:\"https://github.com/search?q=repo%3Acalcom%2Fcal.com%20ErrorBoundary&type=code\",children:\"https://github.com/search?q=repo%3Acalcom%2Fcal.com%20ErrorBoundary&type=code\"})}),`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.a,{href:\"https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary\",children:\"https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary\"})}),`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.a,{href:\"https://github.com/bvaughn/react-error-boundary\",children:\"https://github.com/bvaughn/react-error-boundary\"})}),`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.a,{href:\"https://github.com/calcom/cal.com/blob/5bbccad41d625250ac03a6683e751b8ed6650721/packages/ui/components/errorBoundary/ErrorBoundary.tsx#L4\",children:\"https://github.com/calcom/cal.com/blob/5bbccad41d625250ac03a6683e751b8ed6650721/packages/ui/components/errorBoundary/ErrorBoundary.tsx#L4\"})}),`\n`]})]})}function d(n={}){let{wrapper:r}=n.components||{};return r?(0,e.jsx)(r,{...n,children:(0,e.jsx)(h,{...n})}):h(n)}return v(E);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/cal-com/error-handling/introduction.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/cal-com/error-handling/introduction.mdx",
      "sourceFileName": "introduction.mdx",
      "sourceFileDir": "guide/codebase-architecture/cal-com/error-handling",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/cal-com/error-handling/introduction"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/cal-com/error-handling/introduction",
    "slugAsParams": "codebase-architecture/cal-com/error-handling/introduction"
  },
  {
    "title": "project-structure in cal.com\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\n[C: Lobechat]\r\n[L: Discover Page]\r\n\r\nDiscover page has a lot of sub-routes, we will select some routes as shown in the following and discuss \r\nthe components structure used.\r\n\r\n1. Root level file structure\r\n2. Discover/(list) route group file structure\r\n  a. Home sub-route\r\n  b. Assistants sub-route\r\n  c. Models sub-route\r\n3. Chat \r\n\r\n\r\n# Root level file structure:\r\n\r\nIn the [discover folder](https://github.com/lobehub/lobe-chat/tree/main/src/app/(main)/discover), we find the below \r\nfiles and folder:\r\n\r\n```\r\ndiscover/\r\n├── (detail)/            Route group\r\n├── (list)/              Route group\r\n├── _layout/             Layout folder\r\n├── components/          Commonly used components across Discover list and detail pages\r\n|                        For example, CardBanner in [discover/components/CardBanner.ts](https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/discover/components/CardBanner.tsx)\r\n|                        are found to be used in [detail page and list page](https://github.com/search?q=repo%3Alobehub%2Flobe-chat%20CardBanner&type=code).\r\n├── features/            features components are found to be in Layout\r\n|                        Example 1: [CreateButton.tsx](https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/discover/features/CreateButton/index.tsx) \r\n|                        usage in Layout.ts in this [search results](https://github.com/search?q=repo%3Alobehub%2Flobe-chat%20CreateButton%20&type=code)\r\n|                        Example 2: [useNav.tsx](https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/discover/features/useNav.tsx)\r\n|                        usage shown in this [search results](https://github.com/search?q=repo%3Alobehub%2Flobe-chat%20useNav&type=code) \r\n|                        From this example, you will notice that components or hooks in features are only used in layout\r\n|                        and other features folders found in route group.\r\n|                        Example 3: [StoreSearchBar.tsx](https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/discover/features/StoreSearchBar.tsx)\r\n|                        usage is shown in this [search results](https://github.com/search?q=repo%3Alobehub%2Flobe-chat%20StoreSearchBar&type=code)\r\n|                        This example demonstrates feature usage in Layout only, you can also conclude that features\r\n|                        cannot be used in components but components can be used in features. This observation is made\r\n├── search/              a search page\r\n├── error.tsx            Error page for Discover layout. Read more about [error handling](https://nextjs.org/docs/app/building-your-application/routing/error-handling#uncaught-exceptions)\r\n├── layout.tsx           Discover layout. Read more about [layout](https://nextjs.org/docs/app/api-reference/file-conventions/layout)\r\n├── loading.tsx          Loading page for Discover route. Read more about [loading](https://nextjs.org/docs/app/api-reference/file-conventions/loading)\r\n└── not-found.tsx        Not found page for Discover route. Read more about [not found page](https://nextjs.org/docs/app/api-reference/file-conventions/not-found)\r\n```\r\n\r\n# (list) route group\r\nNext, let's look at (list) route group. Below is the file structure.\r\n\r\n```\r\ndiscover/(list)/\r\n├── (home)/              Home route group, that shows the page when you visit https://lobechat.com/discover\r\n├── _layout/             contains Desktop, Mobile folders that are used in layout.tsx\r\n├── assistants/          Assistants page that you see when you visit https://lobechat.com/discover/assistants.\r\n├── models/              Models page that you see when you visit https://lobechat.com/discover/models. \r\n├── plugins/             Plugins page that you see when you visit https://lobechat.com/discover/plugins.\r\n├── providers/           Providers page that you see when you visit https://lobechat.com/discover/providers\r\n├── error.tsx            Error page for discover/(list) layout. Read more about [error handling](https://nextjs.org/docs/app/building-your-application/routing/error-handling#uncaught-exceptions)\r\n├── layout.tsx           discover/(list) layout. Read more about [layout](https://nextjs.org/docs/app/api-reference/file-conventions/layout)\r\n├── loading.tsx          Loading page for discover/(list) route. Read more about [loading](https://nextjs.org/docs/app/api-reference/file-conventions/loading)\r\n└── not-found.tsx        Not found page for discover/(list) route. Read more about [not found page](https://nextjs.org/docs/app/api-reference/file-conventions/not-found)\r\n```\r\n",
      "code": "var Component=(()=>{var p=Object.create;var s=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var f=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),v=(o,e)=>{for(var r in e)s(o,r,{get:e[r],enumerable:!0})},i=(o,e,r,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let n of b(e))!m.call(o,n)&&n!==r&&s(o,n,{get:()=>e[n],enumerable:!(a=d(e,n))||a.enumerable});return o};var x=(o,e,r)=>(r=o!=null?p(g(o)):{},i(e||!o||!o.__esModule?s(r,\"default\",{value:o,enumerable:!0}):r,o)),y=o=>i(s({},\"__esModule\",{value:!0}),o);var u=f((R,c)=>{c.exports=_jsx_runtime});var j={};v(j,{default:()=>h,frontmatter:()=>w});var t=x(u()),w={title:\"project-structure in cal.com\"};function l(o){let e={a:\"a\",code:\"code\",h1:\"h1\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",...o.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:`[C: Lobechat]\\r\n[L: Discover Page]`}),`\n`,(0,t.jsx)(e.p,{children:`Discover page has a lot of sub-routes, we will select some routes as shown in the following and discuss\\r\nthe components structure used.`}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Root level file structure\"}),`\n`,(0,t.jsx)(e.li,{children:`Discover/(list) route group file structure\\r\na. Home sub-route\\r\nb. Assistants sub-route\\r\nc. Models sub-route`}),`\n`,(0,t.jsx)(e.li,{children:\"Chat\"}),`\n`]}),`\n`,(0,t.jsx)(e.h1,{id:\"root-level-file-structure\",children:\"Root level file structure:\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"In the \",(0,t.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/tree/main/src/app/(main)/discover\",children:\"discover folder\"}),`, we find the below\\r\nfiles and folder:`]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`discover/\\r\n\\u251C\\u2500\\u2500 (detail)/            Route group\\r\n\\u251C\\u2500\\u2500 (list)/              Route group\\r\n\\u251C\\u2500\\u2500 _layout/             Layout folder\\r\n\\u251C\\u2500\\u2500 components/          Commonly used components across Discover list and detail pages\\r\n|                        For example, CardBanner in [discover/components/CardBanner.ts](https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/discover/components/CardBanner.tsx)\\r\n|                        are found to be used in [detail page and list page](https://github.com/search?q=repo%3Alobehub%2Flobe-chat%20CardBanner&type=code).\\r\n\\u251C\\u2500\\u2500 features/            features components are found to be in Layout\\r\n|                        Example 1: [CreateButton.tsx](https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/discover/features/CreateButton/index.tsx) \\r\n|                        usage in Layout.ts in this [search results](https://github.com/search?q=repo%3Alobehub%2Flobe-chat%20CreateButton%20&type=code)\\r\n|                        Example 2: [useNav.tsx](https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/discover/features/useNav.tsx)\\r\n|                        usage shown in this [search results](https://github.com/search?q=repo%3Alobehub%2Flobe-chat%20useNav&type=code) \\r\n|                        From this example, you will notice that components or hooks in features are only used in layout\\r\n|                        and other features folders found in route group.\\r\n|                        Example 3: [StoreSearchBar.tsx](https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/discover/features/StoreSearchBar.tsx)\\r\n|                        usage is shown in this [search results](https://github.com/search?q=repo%3Alobehub%2Flobe-chat%20StoreSearchBar&type=code)\\r\n|                        This example demonstrates feature usage in Layout only, you can also conclude that features\\r\n|                        cannot be used in components but components can be used in features. This observation is made\\r\n\\u251C\\u2500\\u2500 search/              a search page\\r\n\\u251C\\u2500\\u2500 error.tsx            Error page for Discover layout. Read more about [error handling](https://nextjs.org/docs/app/building-your-application/routing/error-handling#uncaught-exceptions)\\r\n\\u251C\\u2500\\u2500 layout.tsx           Discover layout. Read more about [layout](https://nextjs.org/docs/app/api-reference/file-conventions/layout)\\r\n\\u251C\\u2500\\u2500 loading.tsx          Loading page for Discover route. Read more about [loading](https://nextjs.org/docs/app/api-reference/file-conventions/loading)\\r\n\\u2514\\u2500\\u2500 not-found.tsx        Not found page for Discover route. Read more about [not found page](https://nextjs.org/docs/app/api-reference/file-conventions/not-found)\n`})}),`\n`,(0,t.jsx)(e.h1,{id:\"list-route-group\",children:\"(list) route group\"}),`\n`,(0,t.jsx)(e.p,{children:\"Next, let's look at (list) route group. Below is the file structure.\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`discover/(list)/\\r\n\\u251C\\u2500\\u2500 (home)/              Home route group, that shows the page when you visit https://lobechat.com/discover\\r\n\\u251C\\u2500\\u2500 _layout/             contains Desktop, Mobile folders that are used in layout.tsx\\r\n\\u251C\\u2500\\u2500 assistants/          Assistants page that you see when you visit https://lobechat.com/discover/assistants.\\r\n\\u251C\\u2500\\u2500 models/              Models page that you see when you visit https://lobechat.com/discover/models. \\r\n\\u251C\\u2500\\u2500 plugins/             Plugins page that you see when you visit https://lobechat.com/discover/plugins.\\r\n\\u251C\\u2500\\u2500 providers/           Providers page that you see when you visit https://lobechat.com/discover/providers\\r\n\\u251C\\u2500\\u2500 error.tsx            Error page for discover/(list) layout. Read more about [error handling](https://nextjs.org/docs/app/building-your-application/routing/error-handling#uncaught-exceptions)\\r\n\\u251C\\u2500\\u2500 layout.tsx           discover/(list) layout. Read more about [layout](https://nextjs.org/docs/app/api-reference/file-conventions/layout)\\r\n\\u251C\\u2500\\u2500 loading.tsx          Loading page for discover/(list) route. Read more about [loading](https://nextjs.org/docs/app/api-reference/file-conventions/loading)\\r\n\\u2514\\u2500\\u2500 not-found.tsx        Not found page for discover/(list) route. Read more about [not found page](https://nextjs.org/docs/app/api-reference/file-conventions/not-found)\n`})})]})}function h(o={}){let{wrapper:e}=o.components||{};return e?(0,t.jsx)(e,{...o,children:(0,t.jsx)(l,{...o})}):l(o)}return y(j);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/cal-com/project-structure/introduction.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/cal-com/project-structure/introduction.mdx",
      "sourceFileName": "introduction.mdx",
      "sourceFileDir": "guide/codebase-architecture/cal-com/project-structure",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/cal-com/project-structure/introduction"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/cal-com/project-structure/introduction",
    "slugAsParams": "codebase-architecture/cal-com/project-structure/introduction"
  },
  {
    "title": "Tooling in Cal.com\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\nIn this guide, you will learn the tooling used in [Cal.com](https://github.com/calcom/cal.com).\r\n\r\n# What's tooling?\r\nYou might be wondering what tooling means. If you check out [Bulletproof React's Project Standards](https://github.com/alan2207/bulletproof-react/blob/master/docs/project-standards.md),\r\nit describes tools such as ESLint, Prettier, Husky etc.,\r\n\r\nSimilarly, in this guide, we provide an in-depth Cal.com tooling analysis.\r\n\r\n# Cal.com tooling:\r\n\r\nCal.com is a monorepo, you will find more information about monorepo in Cal.com's Project Structure. We provide \r\nanalysis of the tooling used:\r\n1. [At root level](https://github.com/calcom/cal.com)\r\n2. [In apps workspace](https://github.com/calcom/cal.com/tree/main/apps)\r\n3. [In packages workspace](https://github.com/calcom/cal.com/tree/main/packages)\r\n\r\nTooling might vary based on an app or packages.\r\n\r\n## Tools used at root level:\r\n- [.changesets](https://github.com/calcom/cal.com/tree/main/.changeset)\r\n- [.github](https://github.com/calcom/cal.com/tree/main/.github)\r\n- [.husky](https://github.com/calcom/cal.com/tree/main/.husky)\r\n- [.snaplet](https://github.com/calcom/cal.com/tree/main/.snaplet)\r\n- [.vscode](https://github.com/calcom/cal.com/tree/main/.vscode)\r\n- [.well-known](https://github.com/calcom/cal.com/tree/main/.well-known)\r\n- [.yarn](https://github.com/calcom/cal.com/tree/main/.yarn)\r\n- [__checks__](https://github.com/calcom/cal.com/tree/main/__checks__)\r\n- [.editorconfig](https://github.com/calcom/cal.com/blob/main/.editorconfig)\r\n- [.eslintignore](https://github.com/calcom/cal.com/blob/main/.eslintignore)\r\n- [.eslintrc.js](https://github.com/calcom/cal.com/blob/main/.eslintrc.js)\r\n- [.gitignore](https://github.com/calcom/cal.com/blob/main/.gitignore)\r\n- [.gitpod.yml](https://github.com/calcom/cal.com/blob/main/.gitpod.yml)\r\n- [.kodiak.toml](https://github.com/calcom/cal.com/blob/main/.kodiak.toml)\r\n- [.npmrc](https://github.com/calcom/cal.com/blob/main/.npmrc)\r\n- [.nvmrc](https://github.com/calcom/cal.com/blob/main/.nvmrc)\r\n- [.prettierignore](https://github.com/calcom/cal.com/blob/main/.prettierignore)\r\n- [.prettierrc.js](https://github.com/calcom/cal.com/blob/main/.prettierrc.js)\r\n- [.yarnrc.yml](https://github.com/calcom/cal.com/blob/main/.yarnrc.yml)\r\n- [Procfile](https://github.com/calcom/cal.com/blob/main/Procfile)\r\n- [app.json](https://github.com/calcom/cal.com/blob/main/app.json)\r\n- [checkly.config.ts](https://github.com/calcom/cal.com/blob/main/checkly.config.ts)\r\n- [gh.env](https://github.com/calcom/cal.com/blob/main/gh.env)\r\n- [git-init.sh](https://github.com/calcom/cal.com/blob/main/git-init.sh)\r\n- [git-setup.sh](https://github.com/calcom/cal.com/blob/main/git-setup.sh)\r\n- [i18n-unused.config.js](https://github.com/calcom/cal.com/blob/main/i18n-unused.config.js)\r\n- [i18n.json](https://github.com/calcom/cal.com/blob/main/i18n.json)\r\n- [i18n.lock](https://github.com/calcom/cal.com/blob/main/i18n.lock)\r\n- [playwright.config.ts](https://github.com/calcom/cal.com/blob/main/playwright.config.ts)\r\n- [setupVitest.ts](https://github.com/calcom/cal.com/blob/main/setupVitest.ts)\r\n- [turbo.json](https://github.com/calcom/cal.com/blob/main/turbo.json)\r\n- [vitest.config.ts](https://github.com/calcom/cal.com/blob/main/vitest.config.ts)\r\n- [vitest.workspace.ts](https://github.com/calcom/cal.com/blob/main/vitest.workspace.ts)\r\n- [yarn.lock](https://github.com/calcom/cal.com/blob/main/yarn.lock)\r\n\r\n## apps/web workspace tooling\r\n\r\n- [.eslintignore](https://github.com/calcom/cal.com/blob/main/apps/web/.eslintignore)\r\n- [.nvmrc](https://github.com/calcom/cal.com/blob/main/apps/web/.nvmrc)\r\n- [.prettierignore](https://github.com/calcom/cal.com/blob/main/apps/web/.prettierignore)\r\n- [calendso.yaml](https://github.com/calcom/cal.com/blob/main/apps/web/calendso.yaml)\r\n- [cron-tester.ts](https://github.com/calcom/cal.com/blob/main/apps/web/cron-tester.ts)\r\n- [instrumentation.ts](https://github.com/calcom/cal.com/blob/main/apps/web/instrumentation.ts)\r\n- [middleware.ts](https://github.com/calcom/cal.com/blob/main/apps/web/middleware.ts#L2) with [next-collect](https://www.npmjs.com/package/next-collect)\r\n- [next-i18next.config.js](https://github.com/calcom/cal.com/blob/main/apps/web/next-i18next.config.js)\r\n- [postcss.config.js](https://github.com/calcom/cal.com/blob/main/apps/web/postcss.config.js)\r\n- [project.toml](https://github.com/calcom/cal.com/blob/main/apps/web/project.toml)\r\n- [sentry.client.config.ts](https://github.com/calcom/cal.com/blob/main/apps/web/sentry.client.config.ts)\r\n- [sentry.edge.config.ts](https://github.com/calcom/cal.com/blob/main/apps/web/sentry.edge.config.ts)\r\n- [sentry.edge.config.ts](https://github.com/calcom/cal.com/blob/main/apps/web/sentry.edge.config.ts)\r\n- [sentry.server.config.ts](https://github.com/calcom/cal.com/blob/main/apps/web/sentry.server.config.ts)\r\n- [tailwind.config.js](https://github.com/calcom/cal.com/blob/main/apps/web/tailwind.config.js)\r\n- [tsconfig.json](https://github.com/calcom/cal.com/blob/main/apps/web/tsconfig.json)\r\n- [vercel.json](https://github.com/calcom/cal.com/blob/main/apps/web/vercel.json)",
      "code": "var Component=(()=>{var d=Object.create;var o=Object.defineProperty;var b=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var f=(l,c)=>()=>(c||l((c={exports:{}}).exports,c),c.exports),w=(l,c)=>{for(var n in c)o(l,n,{get:c[n],enumerable:!0})},h=(l,c,n,t)=>{if(c&&typeof c==\"object\"||typeof c==\"function\")for(let e of p(c))!u.call(l,e)&&e!==n&&o(l,e,{get:()=>c[e],enumerable:!(t=b(c,e))||t.enumerable});return l};var y=(l,c,n)=>(n=l!=null?d(g(l)):{},h(c||!l||!l.__esModule?o(n,\"default\",{value:l,enumerable:!0}):n,l)),j=l=>h(o({},\"__esModule\",{value:!0}),l);var r=f((_,a)=>{a.exports=_jsx_runtime});var v={};w(v,{default:()=>s,frontmatter:()=>k});var i=y(r()),k={title:\"Tooling in Cal.com\"};function m(l){let c={a:\"a\",h1:\"h1\",h2:\"h2\",li:\"li\",ol:\"ol\",p:\"p\",strong:\"strong\",ul:\"ul\",...l.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(c.p,{children:[\"In this guide, you will learn the tooling used in \",(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com\",children:\"Cal.com\"}),\".\"]}),`\n`,(0,i.jsx)(c.h1,{id:\"whats-tooling\",children:\"What's tooling?\"}),`\n`,(0,i.jsxs)(c.p,{children:[\"You might be wondering what tooling means. If you check out \",(0,i.jsx)(c.a,{href:\"https://github.com/alan2207/bulletproof-react/blob/master/docs/project-standards.md\",children:\"Bulletproof React's Project Standards\"}),`,\\r\nit describes tools such as ESLint, Prettier, Husky etc.,`]}),`\n`,(0,i.jsx)(c.p,{children:\"Similarly, in this guide, we provide an in-depth Cal.com tooling analysis.\"}),`\n`,(0,i.jsx)(c.h1,{id:\"calcom-tooling\",children:\"Cal.com tooling:\"}),`\n`,(0,i.jsx)(c.p,{children:`Cal.com is a monorepo, you will find more information about monorepo in Cal.com's Project Structure. We provide\\r\nanalysis of the tooling used:`}),`\n`,(0,i.jsxs)(c.ol,{children:[`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com\",children:\"At root level\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/tree/main/apps\",children:\"In apps workspace\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/tree/main/packages\",children:\"In packages workspace\"})}),`\n`]}),`\n`,(0,i.jsx)(c.p,{children:\"Tooling might vary based on an app or packages.\"}),`\n`,(0,i.jsx)(c.h2,{id:\"tools-used-at-root-level\",children:\"Tools used at root level:\"}),`\n`,(0,i.jsxs)(c.ul,{children:[`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/tree/main/.changeset\",children:\".changesets\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/tree/main/.github\",children:\".github\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/tree/main/.husky\",children:\".husky\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/tree/main/.snaplet\",children:\".snaplet\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/tree/main/.vscode\",children:\".vscode\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/tree/main/.well-known\",children:\".well-known\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/tree/main/.yarn\",children:\".yarn\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/tree/main/__checks__\",children:(0,i.jsx)(c.strong,{children:\"checks\"})})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/.editorconfig\",children:\".editorconfig\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/.eslintignore\",children:\".eslintignore\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/.eslintrc.js\",children:\".eslintrc.js\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/.gitignore\",children:\".gitignore\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/.gitpod.yml\",children:\".gitpod.yml\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/.kodiak.toml\",children:\".kodiak.toml\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/.npmrc\",children:\".npmrc\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/.nvmrc\",children:\".nvmrc\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/.prettierignore\",children:\".prettierignore\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/.prettierrc.js\",children:\".prettierrc.js\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/.yarnrc.yml\",children:\".yarnrc.yml\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/Procfile\",children:\"Procfile\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/app.json\",children:\"app.json\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/checkly.config.ts\",children:\"checkly.config.ts\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/gh.env\",children:\"gh.env\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/git-init.sh\",children:\"git-init.sh\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/git-setup.sh\",children:\"git-setup.sh\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/i18n-unused.config.js\",children:\"i18n-unused.config.js\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/i18n.json\",children:\"i18n.json\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/i18n.lock\",children:\"i18n.lock\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/playwright.config.ts\",children:\"playwright.config.ts\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/setupVitest.ts\",children:\"setupVitest.ts\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/turbo.json\",children:\"turbo.json\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/vitest.config.ts\",children:\"vitest.config.ts\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/vitest.workspace.ts\",children:\"vitest.workspace.ts\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/yarn.lock\",children:\"yarn.lock\"})}),`\n`]}),`\n`,(0,i.jsx)(c.h2,{id:\"appsweb-workspace-tooling\",children:\"apps/web workspace tooling\"}),`\n`,(0,i.jsxs)(c.ul,{children:[`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/.eslintignore\",children:\".eslintignore\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/.nvmrc\",children:\".nvmrc\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/.prettierignore\",children:\".prettierignore\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/calendso.yaml\",children:\"calendso.yaml\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/cron-tester.ts\",children:\"cron-tester.ts\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/instrumentation.ts\",children:\"instrumentation.ts\"})}),`\n`,(0,i.jsxs)(c.li,{children:[(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/middleware.ts#L2\",children:\"middleware.ts\"}),\" with \",(0,i.jsx)(c.a,{href:\"https://www.npmjs.com/package/next-collect\",children:\"next-collect\"})]}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/next-i18next.config.js\",children:\"next-i18next.config.js\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/postcss.config.js\",children:\"postcss.config.js\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/project.toml\",children:\"project.toml\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/sentry.client.config.ts\",children:\"sentry.client.config.ts\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/sentry.edge.config.ts\",children:\"sentry.edge.config.ts\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/sentry.edge.config.ts\",children:\"sentry.edge.config.ts\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/sentry.server.config.ts\",children:\"sentry.server.config.ts\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/tailwind.config.js\",children:\"tailwind.config.js\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/tsconfig.json\",children:\"tsconfig.json\"})}),`\n`,(0,i.jsx)(c.li,{children:(0,i.jsx)(c.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/vercel.json\",children:\"vercel.json\"})}),`\n`]})]})}function s(l={}){let{wrapper:c}=l.components||{};return c?(0,i.jsx)(c,{...l,children:(0,i.jsx)(m,{...l})}):m(l)}return j(v);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/cal-com/tooling/introduction.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/cal-com/tooling/introduction.mdx",
      "sourceFileName": "introduction.mdx",
      "sourceFileDir": "guide/codebase-architecture/cal-com/tooling",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/cal-com/tooling/introduction"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/cal-com/tooling/introduction",
    "slugAsParams": "codebase-architecture/cal-com/tooling/introduction"
  },
  {
    "title": "state-management in cal.com\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\n[C: Bookings listing page]\r\n\r\n[Insert screenshot of bookings page]\r\n\r\nCal.com uses Next.js pages router, there a folder named bookings inside [pages folder](https://github.com/calcom/cal.com/tree/main/apps/web/pages/bookings)\r\nand in the [status.tsx](https://github.com/calcom/cal.com/blob/main/apps/web/pages/bookings/%5Bstatus%5D.tsx)\r\n, you will find the below code:\r\n\r\n```\r\nimport type { GetStaticPaths } from \"next\";\r\n\r\nimport PageWrapper from \"@components/PageWrapper\";\r\n\r\nimport { validStatuses } from \"~/bookings/lib/validStatuses\";\r\nimport BookingsListingView from \"~/bookings/views/bookings-listing-view\";\r\n\r\nexport { getStaticProps } from \"~/bookings/views/bookings-listing-view.getStaticProps\";\r\n\r\nconst BookingsListingPage = new Proxy<{\r\n  (): JSX.Element;\r\n  PageWrapper?: typeof PageWrapper;\r\n}>(BookingsListingView, {});\r\n\r\nBookingsListingPage.PageWrapper = PageWrapper;\r\n\r\nexport const getStaticPaths: GetStaticPaths = () => {\r\n  return {\r\n    paths: validStatuses.map((status) => ({\r\n      params: { status },\r\n      locale: \"en\",\r\n    })),\r\n    fallback: \"blocking\",\r\n  };\r\n};\r\n\r\nexport default BookingsListingPage;\r\n```\r\n\r\nPay attention to the imports at the top of this code snippet. Listing view component is imported from\r\n`/bookings/views/bookings-listing-view`\r\n\r\nThere's a dedicated components structure chapter in this guide to help you understand more about \r\ncal.com's component structures.\r\n\r\n# Bookings-listinig-view\r\n\r\nYou will find Bookings listing view component in [modules folder](https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx)\r\n\r\n[Insert a screenshot of - https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx]\r\n\r\nAt this point, it is important to ask yourself the right questions.\r\n\r\n1. How is the data fetched?\r\n2. Is there any state updated based on fetch response?\r\n3. Does the rendered JSX have any conditions inside the html code? if so, what are those conditions?\r\n\r\n## 1. How is the data fetched?\r\n\r\nThe below code is responsible to fetch the data. cal.com uses tRPC to fetch the data. There's a \r\ndedicated chapter about API layer in this guide, let's focus on the state management.\r\n\r\n```\r\n const query = trpc.viewer.bookings.get.useInfiniteQuery(\r\n    {\r\n      limit: 10,\r\n      filters: {\r\n        ...filterQuery,\r\n        status: filterQuery.status ?? status,\r\n      },\r\n    },\r\n    {\r\n      enabled: true,\r\n      getNextPageParam: (lastPage) => lastPage.nextCursor,\r\n    }\r\n  );\r\n``` \r\n## 2. Is there any state updated based on fetch response?\r\n\r\nThere are no state variables updated based on the query but the query response is processed differently.\r\n\r\n### Example 1:\r\nAt [Line 130 in bookings-listing-view](https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L130C3-L142C16)\r\nyou will find the below code:\r\n\r\n```\r\nconst bookingsToday =\r\n  query.data?.pages.map((page) =>\r\n    page.bookings.filter((booking: BookingOutput) => {\r\n      recurringInfoToday = page.recurringInfo.find(\r\n        (info) => info.recurringEventId === booking.recurringEventId\r\n      );\r\n\r\n      return (\r\n        dayjs(booking.startTime).tz(user?.timeZone).format(\"YYYY-MM-DD\") ===\r\n        dayjs().tz(user?.timeZone).format(\"YYYY-MM-DD\")\r\n      );\r\n    })\r\n)[0] || [];\r\n```\r\n\r\n`bookingsToday` here is updated based on `query.data`.\r\n\r\n### Example 2:\r\n\r\nSimilarly, `isEmpty` is computed based on `query.data`. Below code is picked from [line 103](https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L103C3-L103C58)\r\n\r\n```\r\nconst isEmpty = !query.data?.pages[0]?.bookings.length;\r\n```\r\n\r\nYou could make a tRPC call and process the response further to update variables with required response values,\r\nwithout using any `setState` methods. We can also observe that this component is on client side as it has \r\n\"use client\" at the top of the file. tRPC call did not happen inside a useEffect with an empty array dependency.\r\n\r\n## Does the rendered JSX have any conditions inside the html code? if so, what are those conditions?\r\nIn the [bookings-listing-view.tsx](https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L159),\r\nbased on the query status, certain components are rendered. \r\n\r\nQuery status can be:\r\n- error\r\n- pending\r\n- success  \r\n\r\n### Error condition\r\nBelow code is picked from [bookings-listing-view.tsx](https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L151C11-L153C13)\r\n\r\n```\r\n{query.status === \"error\" && (\r\n  <Alert severity=\"error\" title={t(\"something_went_wrong\")} message={query.error.message} />\r\n)}\r\n```\r\n\r\n### Pending condition\r\nBelow code can be found at line 151.\r\n\r\n```\r\n{(query.status === \"pending\" || query.isPaused) && <SkeletonLoader />}\r\n```\r\n\r\n### Success condition\r\nIf the query status is successful, this condition is associated with `isEmpty` variable. If there's no bookings\r\navailable, the below code handles success + isEmpty condition, picked from [line 227](https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L227C11-L238C13):\r\n\r\n```\r\n{query.status === \"success\" && isEmpty && (\r\n  <div className=\"flex items-center justify-center pt-2 xl:pt-0\">\r\n    <EmptyScreen\r\n      Icon=\"calendar\"\r\n      headline={t(\"no_status_bookings_yet\", { status: t(status).toLowerCase() })}\r\n      description={t(\"no_status_bookings_yet_description\", {\r\n        status: t(status).toLowerCase(),\r\n        description: t(descriptionByStatus[status]),\r\n      })}\r\n    />\r\n  </div>\r\n)}\r\n```\r\n\r\nIf there's bookings available, the below code handles success + !isEmpty condition, picked from [line 155](https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L155C11-L226C13):\r\n\r\n```\r\n{query.status === \"success\" && !isEmpty && (\r\n<>\r\n    {!!bookingsToday.length && status === \"upcoming\" && (\r\n      <div className=\"mb-6 pt-2 xl:pt-0\">\r\n        <WipeMyCalActionButton bookingStatus={status} bookingsEmpty={isEmpty} />\r\n        <p className=\"text-subtle mb-2 text-xs font-medium uppercase leading-4\">{t(\"today\")}</p>\r\n        <div className=\"border-subtle overflow-hidden rounded-md border\">\r\n          <table className=\"w-full max-w-full table-fixed\">\r\n            <tbody className=\"bg-default divide-subtle divide-y\" data-testid=\"today-bookings\">\r\n              <Fragment>\r\n                {bookingsToday.map((booking: BookingOutput) => (\r\n                  <BookingListItem\r\n                    key={booking.id}\r\n                    loggedInUser={{\r\n                      userId: user?.id,\r\n                      userTimeZone: user?.timeZone,\r\n                      userTimeFormat: user?.timeFormat,\r\n                      userEmail: user?.email,\r\n                    }}\r\n                    listingStatus={status}\r\n                    recurringInfo={recurringInfoToday}\r\n                    {...booking}\r\n                  />\r\n                ))}\r\n              </Fragment>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    )}\r\n    <div className=\"pt-2 xl:pt-0\">\r\n      <div className=\"border-subtle overflow-hidden rounded-md border\">\r\n        <table data-testid={`${status}-bookings`} className=\"w-full max-w-full table-fixed\">\r\n          <tbody className=\"bg-default divide-subtle divide-y\" data-testid=\"bookings\">\r\n            {query.data.pages.map((page, index) => (\r\n              <Fragment key={index}>\r\n                {page.bookings.filter(filterBookings).map((booking: BookingOutput) => {\r\n                  const recurringInfo = page.recurringInfo.find(\r\n                    (info) => info.recurringEventId === booking.recurringEventId\r\n                  );\r\n                  return (\r\n                    <BookingListItem\r\n                      key={booking.id}\r\n                      loggedInUser={{\r\n                        userId: user?.id,\r\n                        userTimeZone: user?.timeZone,\r\n                        userTimeFormat: user?.timeFormat,\r\n                        userEmail: user?.email,\r\n                      }}\r\n                      listingStatus={status}\r\n                      recurringInfo={recurringInfo}\r\n                      {...booking}\r\n                    />\r\n                  );\r\n                })}\r\n              </Fragment>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      <div className=\"text-default p-4 text-center\" ref={buttonInView.ref}>\r\n        <Button\r\n          color=\"minimal\"\r\n          loading={query.isFetchingNextPage}\r\n          disabled={!query.hasNextPage}\r\n          onClick={() => query.fetchNextPage()}>\r\n          {query.hasNextPage ? t(\"load_more_results\") : t(\"no_more_results\")}\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  </>\r\n)}\r\n```\r\n\r\n# References:\r\n1. https://github.com/calcom/cal.com/tree/main/apps/web/pages/bookings\r\n",
      "code": "var Component=(()=>{var u=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),k=(t,e)=>{for(var i in e)o(t,i,{get:e[i],enumerable:!0})},a=(t,e,i,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of g(e))!b.call(t,r)&&r!==i&&o(t,r,{get:()=>e[r],enumerable:!(s=p(e,r))||s.enumerable});return t};var w=(t,e,i)=>(i=t!=null?u(m(t)):{},a(e||!t||!t.__esModule?o(i,\"default\",{value:t,enumerable:!0}):i,t)),y=t=>a(o({},\"__esModule\",{value:!0}),t);var c=f((P,d)=>{d.exports=_jsx_runtime});var x={};k(x,{default:()=>h,frontmatter:()=>v});var n=w(c()),v={title:\"state-management in cal.com\"};function l(t){let e={a:\"a\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"[C: Bookings listing page]\"}),`\n`,(0,n.jsx)(e.p,{children:\"[Insert screenshot of bookings page]\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Cal.com uses Next.js pages router, there a folder named bookings inside \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/tree/main/apps/web/pages/bookings\",children:\"pages folder\"}),`\\r\nand in the `,(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/pages/bookings/%5Bstatus%5D.tsx\",children:\"status.tsx\"}),`\\r\n, you will find the below code:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import type { GetStaticPaths } from \"next\";\\r\n\\r\nimport PageWrapper from \"@components/PageWrapper\";\\r\n\\r\nimport { validStatuses } from \"~/bookings/lib/validStatuses\";\\r\nimport BookingsListingView from \"~/bookings/views/bookings-listing-view\";\\r\n\\r\nexport { getStaticProps } from \"~/bookings/views/bookings-listing-view.getStaticProps\";\\r\n\\r\nconst BookingsListingPage = new Proxy<{\\r\n  (): JSX.Element;\\r\n  PageWrapper?: typeof PageWrapper;\\r\n}>(BookingsListingView, {});\\r\n\\r\nBookingsListingPage.PageWrapper = PageWrapper;\\r\n\\r\nexport const getStaticPaths: GetStaticPaths = () => {\\r\n  return {\\r\n    paths: validStatuses.map((status) => ({\\r\n      params: { status },\\r\n      locale: \"en\",\\r\n    })),\\r\n    fallback: \"blocking\",\\r\n  };\\r\n};\\r\n\\r\nexport default BookingsListingPage;\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[`Pay attention to the imports at the top of this code snippet. Listing view component is imported from\\r\n`,(0,n.jsx)(e.code,{children:\"/bookings/views/bookings-listing-view\"})]}),`\n`,(0,n.jsx)(e.p,{children:`There's a dedicated components structure chapter in this guide to help you understand more about\\r\ncal.com's component structures.`}),`\n`,(0,n.jsx)(e.h1,{id:\"bookings-listinig-view\",children:\"Bookings-listinig-view\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"You will find Bookings listing view component in \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx\",children:\"modules folder\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert a screenshot of - \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx\",children:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx\"}),\"]\"]}),`\n`,(0,n.jsx)(e.p,{children:\"At this point, it is important to ask yourself the right questions.\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"How is the data fetched?\"}),`\n`,(0,n.jsx)(e.li,{children:\"Is there any state updated based on fetch response?\"}),`\n`,(0,n.jsx)(e.li,{children:\"Does the rendered JSX have any conditions inside the html code? if so, what are those conditions?\"}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"1-how-is-the-data-fetched\",children:\"1. How is the data fetched?\"}),`\n`,(0,n.jsx)(e.p,{children:`The below code is responsible to fetch the data. cal.com uses tRPC to fetch the data. There's a\\r\ndedicated chapter about API layer in this guide, let's focus on the state management.`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:` const query = trpc.viewer.bookings.get.useInfiniteQuery(\\r\n    {\\r\n      limit: 10,\\r\n      filters: {\\r\n        ...filterQuery,\\r\n        status: filterQuery.status ?? status,\\r\n      },\\r\n    },\\r\n    {\\r\n      enabled: true,\\r\n      getNextPageParam: (lastPage) => lastPage.nextCursor,\\r\n    }\\r\n  );\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"2-is-there-any-state-updated-based-on-fetch-response\",children:\"2. Is there any state updated based on fetch response?\"}),`\n`,(0,n.jsx)(e.p,{children:\"There are no state variables updated based on the query but the query response is processed differently.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"example-1\",children:\"Example 1:\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"At \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L130C3-L142C16\",children:\"Line 130 in bookings-listing-view\"}),`\\r\nyou will find the below code:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const bookingsToday =\\r\n  query.data?.pages.map((page) =>\\r\n    page.bookings.filter((booking: BookingOutput) => {\\r\n      recurringInfoToday = page.recurringInfo.find(\\r\n        (info) => info.recurringEventId === booking.recurringEventId\\r\n      );\\r\n\\r\n      return (\\r\n        dayjs(booking.startTime).tz(user?.timeZone).format(\"YYYY-MM-DD\") ===\\r\n        dayjs().tz(user?.timeZone).format(\"YYYY-MM-DD\")\\r\n      );\\r\n    })\\r\n)[0] || [];\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"bookingsToday\"}),\" here is updated based on \",(0,n.jsx)(e.code,{children:\"query.data\"}),\".\"]}),`\n`,(0,n.jsx)(e.h3,{id:\"example-2\",children:\"Example 2:\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Similarly, \",(0,n.jsx)(e.code,{children:\"isEmpty\"}),\" is computed based on \",(0,n.jsx)(e.code,{children:\"query.data\"}),\". Below code is picked from \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L103C3-L103C58\",children:\"line 103\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const isEmpty = !query.data?.pages[0]?.bookings.length;\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[`You could make a tRPC call and process the response further to update variables with required response values,\\r\nwithout using any `,(0,n.jsx)(e.code,{children:\"setState\"}),` methods. We can also observe that this component is on client side as it has\\r\n\"use client\" at the top of the file. tRPC call did not happen inside a useEffect with an empty array dependency.`]}),`\n`,(0,n.jsx)(e.h2,{id:\"does-the-rendered-jsx-have-any-conditions-inside-the-html-code-if-so-what-are-those-conditions\",children:\"Does the rendered JSX have any conditions inside the html code? if so, what are those conditions?\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In the \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L159\",children:\"bookings-listing-view.tsx\"}),`,\\r\nbased on the query status, certain components are rendered.`]}),`\n`,(0,n.jsx)(e.p,{children:\"Query status can be:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"error\"}),`\n`,(0,n.jsx)(e.li,{children:\"pending\"}),`\n`,(0,n.jsx)(e.li,{children:\"success\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"error-condition\",children:\"Error condition\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Below code is picked from \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L151C11-L153C13\",children:\"bookings-listing-view.tsx\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`{query.status === \"error\" && (\\r\n  <Alert severity=\"error\" title={t(\"something_went_wrong\")} message={query.error.message} />\\r\n)}\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"pending-condition\",children:\"Pending condition\"}),`\n`,(0,n.jsx)(e.p,{children:\"Below code can be found at line 151.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`{(query.status === \"pending\" || query.isPaused) && <SkeletonLoader />}\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"success-condition\",children:\"Success condition\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"If the query status is successful, this condition is associated with \",(0,n.jsx)(e.code,{children:\"isEmpty\"}),` variable. If there's no bookings\\r\navailable, the below code handles success + isEmpty condition, picked from `,(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L227C11-L238C13\",children:\"line 227\"}),\":\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`{query.status === \"success\" && isEmpty && (\\r\n  <div className=\"flex items-center justify-center pt-2 xl:pt-0\">\\r\n    <EmptyScreen\\r\n      Icon=\"calendar\"\\r\n      headline={t(\"no_status_bookings_yet\", { status: t(status).toLowerCase() })}\\r\n      description={t(\"no_status_bookings_yet_description\", {\\r\n        status: t(status).toLowerCase(),\\r\n        description: t(descriptionByStatus[status]),\\r\n      })}\\r\n    />\\r\n  </div>\\r\n)}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"If there's bookings available, the below code handles success + !isEmpty condition, picked from \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L155C11-L226C13\",children:\"line 155\"}),\":\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`{query.status === \"success\" && !isEmpty && (\\r\n<>\\r\n    {!!bookingsToday.length && status === \"upcoming\" && (\\r\n      <div className=\"mb-6 pt-2 xl:pt-0\">\\r\n        <WipeMyCalActionButton bookingStatus={status} bookingsEmpty={isEmpty} />\\r\n        <p className=\"text-subtle mb-2 text-xs font-medium uppercase leading-4\">{t(\"today\")}</p>\\r\n        <div className=\"border-subtle overflow-hidden rounded-md border\">\\r\n          <table className=\"w-full max-w-full table-fixed\">\\r\n            <tbody className=\"bg-default divide-subtle divide-y\" data-testid=\"today-bookings\">\\r\n              <Fragment>\\r\n                {bookingsToday.map((booking: BookingOutput) => (\\r\n                  <BookingListItem\\r\n                    key={booking.id}\\r\n                    loggedInUser={{\\r\n                      userId: user?.id,\\r\n                      userTimeZone: user?.timeZone,\\r\n                      userTimeFormat: user?.timeFormat,\\r\n                      userEmail: user?.email,\\r\n                    }}\\r\n                    listingStatus={status}\\r\n                    recurringInfo={recurringInfoToday}\\r\n                    {...booking}\\r\n                  />\\r\n                ))}\\r\n              </Fragment>\\r\n            </tbody>\\r\n          </table>\\r\n        </div>\\r\n      </div>\\r\n    )}\\r\n    <div className=\"pt-2 xl:pt-0\">\\r\n      <div className=\"border-subtle overflow-hidden rounded-md border\">\\r\n        <table data-testid={\\`\\${status}-bookings\\`} className=\"w-full max-w-full table-fixed\">\\r\n          <tbody className=\"bg-default divide-subtle divide-y\" data-testid=\"bookings\">\\r\n            {query.data.pages.map((page, index) => (\\r\n              <Fragment key={index}>\\r\n                {page.bookings.filter(filterBookings).map((booking: BookingOutput) => {\\r\n                  const recurringInfo = page.recurringInfo.find(\\r\n                    (info) => info.recurringEventId === booking.recurringEventId\\r\n                  );\\r\n                  return (\\r\n                    <BookingListItem\\r\n                      key={booking.id}\\r\n                      loggedInUser={{\\r\n                        userId: user?.id,\\r\n                        userTimeZone: user?.timeZone,\\r\n                        userTimeFormat: user?.timeFormat,\\r\n                        userEmail: user?.email,\\r\n                      }}\\r\n                      listingStatus={status}\\r\n                      recurringInfo={recurringInfo}\\r\n                      {...booking}\\r\n                    />\\r\n                  );\\r\n                })}\\r\n              </Fragment>\\r\n            ))}\\r\n          </tbody>\\r\n        </table>\\r\n      </div>\\r\n      <div className=\"text-default p-4 text-center\" ref={buttonInView.ref}>\\r\n        <Button\\r\n          color=\"minimal\"\\r\n          loading={query.isFetchingNextPage}\\r\n          disabled={!query.hasNextPage}\\r\n          onClick={() => query.fetchNextPage()}>\\r\n          {query.hasNextPage ? t(\"load_more_results\") : t(\"no_more_results\")}\\r\n        </Button>\\r\n      </div>\\r\n    </div>\\r\n  </>\\r\n)}\n`})}),`\n`,(0,n.jsx)(e.h1,{id:\"references\",children:\"References:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/tree/main/apps/web/pages/bookings\",children:\"https://github.com/calcom/cal.com/tree/main/apps/web/pages/bookings\"})}),`\n`]})]})}function h(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(l,{...t})}):l(t)}return y(x);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/cal-com/state-management/1-bookings-listening.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/cal-com/state-management/1-bookings-listening.mdx",
      "sourceFileName": "1-bookings-listening.mdx",
      "sourceFileDir": "guide/codebase-architecture/cal-com/state-management",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/cal-com/state-management/1-bookings-listening"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/cal-com/state-management/1-bookings-listening",
    "slugAsParams": "codebase-architecture/cal-com/state-management/1-bookings-listening"
  },
  {
    "title": "state-management in cal.com\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\n[State management in Event types listing]\r\n\r\nIn this guide, we will review the state management mechanism in Event Types listing page. For better \r\nunderstanding, this guide has been structure this way:\r\n\r\n1. Locating the event-types page\r\n2. Error status handling\r\n3. Pending status handling\r\n4. Success status handling\r\n\r\n[Insert screenshot of https://app.cal.com/event-types]\r\n\r\n# Locating the event-types page\r\n\r\nYou will find the [events-types folder](https://github.com/calcom/cal.com/blob/main/apps/web/app/event-types/page.tsx)\r\nin app folder. event-types/page.tsx has the below code:\r\n\r\n```\r\nimport { withAppDirSsr } from \"app/WithAppDirSsr\";\r\nimport { _generateMetadata } from \"app/_utils\";\r\nimport { WithLayout } from \"app/layoutHOC\";\r\n\r\nimport { getServerSideProps } from \"@lib/event-types/getServerSideProps\";\r\n\r\nimport EventTypes from \"~/event-types/views/event-types-listing-view\";\r\n\r\nexport const generateMetadata = async () =>\r\n  await _generateMetadata(\r\n    (t) => t(\"event_types_page_title\"),\r\n    (t) => t(\"event_types_page_subtitle\")\r\n  );\r\n\r\nconst getData = withAppDirSsr(getServerSideProps);\r\n\r\nexport default WithLayout({ getLayout: null, getData, Page: EventTypes })<\"P\">;\r\n```\r\n \r\nThe most important import here is the EventTypes imported from `~/event-types/views/event-types-listing-view`\r\n\"~\"(tilda) is not helping us much in telling us where to look for this file, in this case, you should look\r\nat tsconfig.json to understand the default imports set.\r\n\r\nIn [web/tsconfig.json](https://github.com/calcom/cal.com/blob/main/apps/web/tsconfig.json#L6), you will find\r\nthe below configuration for default imports:\r\n\r\n```\r\n{\r\n  \"extends\": \"@calcom/tsconfig/nextjs.json\",\r\n  \"compilerOptions\": {\r\n    \"baseUrl\": \".\",\r\n    \"paths\": {\r\n      \"~/*\": [\"modules/*\"],\r\n      \"@components/*\": [\"components/*\"],\r\n```\r\n\r\n~ is an alias for modules folder, so the import translates to `modules/event-types/views/event-types-listing-view`\r\n[event-types-listing-view.tsx](https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L886)\r\nrenders the event types listing page. This is where we should look closely to understand how the state is \r\nmanaged in this component.\r\n\r\n[Insert screenshot of https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L886]\r\n\r\n# Error status handling\r\n\r\nIn the [EventsTypePage component](https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L945), \r\nthere was no specific code handling error status.\r\n\r\n```\r\nconst EventTypesPage: React.FC = () => {\r\n  \r\n  ...\r\n\r\n  // TODO: Maybe useSuspenseQuery to focus on success case only? Remember that it would crash the page when there is an error in query. Also, it won't support skeleton\r\n  const {\r\n    data: getUserEventGroupsData,\r\n    status: getUserEventGroupsStatus,\r\n    error: getUserEventGroupsStatusError,\r\n  } = trpc.viewer.eventTypes.getUserEventGroups.useQuery(filters && { filters }, {\r\n    refetchOnWindowFocus: false,\r\n    gcTime: 1 * 60 * 60 * 1000,\r\n    staleTime: 1 * 60 * 60 * 1000,\r\n  });\r\n\r\n  ...\r\n\r\n  return (\r\n    <Shell\r\n      ...\r\n      <InfiniteScrollMain\r\n        profiles={getUserEventGroupsData?.profiles}\r\n        eventTypeGroups={getUserEventGroupsData?.eventTypeGroups}\r\n        status={getUserEventGroupsStatus}\r\n        errorMessage={getUserEventGroupsStatusError?.message}\r\n      />\r\n    </Shell>\r\n  );\r\n};\r\n```\r\n\r\nInstead in [InfiniteScrollMain component](https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L886),\r\nyou have the error status handler as shown below:\r\n\r\n```\r\nconst InfiniteScrollMain = ({\r\n  status,\r\n  errorMessage,\r\n  eventTypeGroups,\r\n  profiles,\r\n}: {\r\n  status: string;\r\n  errorMessage?: string;\r\n  eventTypeGroups: GetUserEventGroupsResponse[\"eventTypeGroups\"] | undefined;\r\n  profiles: GetUserEventGroupsResponse[\"profiles\"] | undefined;\r\n}) => {\r\n  ...\r\n   if (status === \"error\") {\r\n    return <Alert severity=\"error\" title=\"Something went wrong\" message={errorMessage} />;\r\n   }\r\n  ...\r\n}\r\n```\r\n\r\n# Pending status handling\r\n\r\nJust below the error status handler, you will find the pending status related code:\r\n\r\n```\r\nif (!eventTypeGroups || !profiles || status === \"pending\") {\r\n    return <InfiniteSkeletonLoader />;\r\n}\r\n```\r\n\r\nWhat this means is, when the status is pending, `InfiniteSkeletonLoader` is displayed.\r\n\r\n# Success status handling\r\n\r\nDepending on `eventTypeGroups` length, either `CreateFirstEventTypeView` (length = 0) or \r\n`InfiniteTeamsTab` (length >= 1) gets displayed.\r\n\r\n```\r\n{eventTypeGroups.length >= 1 && (\r\n  <>\r\n    <HorizontalTabs tabs={tabs} />\r\n    <InfiniteTeamsTab activeEventTypeGroup={activeEventTypeGroup[0]} />\r\n  </>\r\n)}\r\n{eventTypeGroups.length === 0 && <CreateFirstEventTypeView slug={profiles[0].slug ?? \"\"} />}\r\n```\r\n\r\n\r\n\r\nReferences:\r\n1. https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L886\r\n2. https://github.com/calcom/cal.com/blob/main/apps/web/app/event-types/page.tsx\r\n",
      "code": "var Component=(()=>{var d=Object.create;var i=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var r in e)i(t,r,{get:e[r],enumerable:!0})},a=(t,e,r,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of g(e))!v.call(t,s)&&s!==r&&i(t,s,{get:()=>e[s],enumerable:!(o=u(e,s))||o.enumerable});return t};var w=(t,e,r)=>(r=t!=null?d(m(t)):{},a(e||!t||!t.__esModule?i(r,\"default\",{value:t,enumerable:!0}):r,t)),b=t=>a(i({},\"__esModule\",{value:!0}),t);var p=y((S,l)=>{l.exports=_jsx_runtime});var x={};f(x,{default:()=>h,frontmatter:()=>T});var n=w(p()),T={title:\"state-management in cal.com\"};function c(t){let e={a:\"a\",code:\"code\",h1:\"h1\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"[State management in Event types listing]\"}),`\n`,(0,n.jsx)(e.p,{children:`In this guide, we will review the state management mechanism in Event Types listing page. For better\\r\nunderstanding, this guide has been structure this way:`}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Locating the event-types page\"}),`\n`,(0,n.jsx)(e.li,{children:\"Error status handling\"}),`\n`,(0,n.jsx)(e.li,{children:\"Pending status handling\"}),`\n`,(0,n.jsx)(e.li,{children:\"Success status handling\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert screenshot of \",(0,n.jsx)(e.a,{href:\"https://app.cal.com/event-types\",children:\"https://app.cal.com/event-types\"}),\"]\"]}),`\n`,(0,n.jsx)(e.h1,{id:\"locating-the-event-types-page\",children:\"Locating the event-types page\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"You will find the \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/app/event-types/page.tsx\",children:\"events-types folder\"}),`\\r\nin app folder. event-types/page.tsx has the below code:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import { withAppDirSsr } from \"app/WithAppDirSsr\";\\r\nimport { _generateMetadata } from \"app/_utils\";\\r\nimport { WithLayout } from \"app/layoutHOC\";\\r\n\\r\nimport { getServerSideProps } from \"@lib/event-types/getServerSideProps\";\\r\n\\r\nimport EventTypes from \"~/event-types/views/event-types-listing-view\";\\r\n\\r\nexport const generateMetadata = async () =>\\r\n  await _generateMetadata(\\r\n    (t) => t(\"event_types_page_title\"),\\r\n    (t) => t(\"event_types_page_subtitle\")\\r\n  );\\r\n\\r\nconst getData = withAppDirSsr(getServerSideProps);\\r\n\\r\nexport default WithLayout({ getLayout: null, getData, Page: EventTypes })<\"P\">;\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The most important import here is the EventTypes imported from \",(0,n.jsx)(e.code,{children:\"~/event-types/views/event-types-listing-view\"}),`\\r\n\"~\"(tilda) is not helping us much in telling us where to look for this file, in this case, you should look\\r\nat tsconfig.json to understand the default imports set.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/tsconfig.json#L6\",children:\"web/tsconfig.json\"}),`, you will find\\r\nthe below configuration for default imports:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`{\\r\n  \"extends\": \"@calcom/tsconfig/nextjs.json\",\\r\n  \"compilerOptions\": {\\r\n    \"baseUrl\": \".\",\\r\n    \"paths\": {\\r\n      \"~/*\": [\"modules/*\"],\\r\n      \"@components/*\": [\"components/*\"],\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"~ is an alias for modules folder, so the import translates to \",(0,n.jsx)(e.code,{children:\"modules/event-types/views/event-types-listing-view\"}),`\\r\n`,(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L886\",children:\"event-types-listing-view.tsx\"}),`\\r\nrenders the event types listing page. This is where we should look closely to understand how the state is\\r\nmanaged in this component.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert screenshot of \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L886\",children:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L886\"}),\"]\"]}),`\n`,(0,n.jsx)(e.h1,{id:\"error-status-handling\",children:\"Error status handling\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In the \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L945\",children:\"EventsTypePage component\"}),`,\\r\nthere was no specific code handling error status.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const EventTypesPage: React.FC = () => {\\r\n  \\r\n  ...\\r\n\\r\n  // TODO: Maybe useSuspenseQuery to focus on success case only? Remember that it would crash the page when there is an error in query. Also, it won't support skeleton\\r\n  const {\\r\n    data: getUserEventGroupsData,\\r\n    status: getUserEventGroupsStatus,\\r\n    error: getUserEventGroupsStatusError,\\r\n  } = trpc.viewer.eventTypes.getUserEventGroups.useQuery(filters && { filters }, {\\r\n    refetchOnWindowFocus: false,\\r\n    gcTime: 1 * 60 * 60 * 1000,\\r\n    staleTime: 1 * 60 * 60 * 1000,\\r\n  });\\r\n\\r\n  ...\\r\n\\r\n  return (\\r\n    <Shell\\r\n      ...\\r\n      <InfiniteScrollMain\\r\n        profiles={getUserEventGroupsData?.profiles}\\r\n        eventTypeGroups={getUserEventGroupsData?.eventTypeGroups}\\r\n        status={getUserEventGroupsStatus}\\r\n        errorMessage={getUserEventGroupsStatusError?.message}\\r\n      />\\r\n    </Shell>\\r\n  );\\r\n};\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Instead in \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L886\",children:\"InfiniteScrollMain component\"}),`,\\r\nyou have the error status handler as shown below:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const InfiniteScrollMain = ({\\r\n  status,\\r\n  errorMessage,\\r\n  eventTypeGroups,\\r\n  profiles,\\r\n}: {\\r\n  status: string;\\r\n  errorMessage?: string;\\r\n  eventTypeGroups: GetUserEventGroupsResponse[\"eventTypeGroups\"] | undefined;\\r\n  profiles: GetUserEventGroupsResponse[\"profiles\"] | undefined;\\r\n}) => {\\r\n  ...\\r\n   if (status === \"error\") {\\r\n    return <Alert severity=\"error\" title=\"Something went wrong\" message={errorMessage} />;\\r\n   }\\r\n  ...\\r\n}\n`})}),`\n`,(0,n.jsx)(e.h1,{id:\"pending-status-handling\",children:\"Pending status handling\"}),`\n`,(0,n.jsx)(e.p,{children:\"Just below the error status handler, you will find the pending status related code:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`if (!eventTypeGroups || !profiles || status === \"pending\") {\\r\n    return <InfiniteSkeletonLoader />;\\r\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"What this means is, when the status is pending, \",(0,n.jsx)(e.code,{children:\"InfiniteSkeletonLoader\"}),\" is displayed.\"]}),`\n`,(0,n.jsx)(e.h1,{id:\"success-status-handling\",children:\"Success status handling\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Depending on \",(0,n.jsx)(e.code,{children:\"eventTypeGroups\"}),\" length, either \",(0,n.jsx)(e.code,{children:\"CreateFirstEventTypeView\"}),` (length = 0) or\\r\n`,(0,n.jsx)(e.code,{children:\"InfiniteTeamsTab\"}),\" (length >= 1) gets displayed.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`{eventTypeGroups.length >= 1 && (\\r\n  <>\\r\n    <HorizontalTabs tabs={tabs} />\\r\n    <InfiniteTeamsTab activeEventTypeGroup={activeEventTypeGroup[0]} />\\r\n  </>\\r\n)}\\r\n{eventTypeGroups.length === 0 && <CreateFirstEventTypeView slug={profiles[0].slug ?? \"\"} />}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"References:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L886\",children:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L886\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/app/event-types/page.tsx\",children:\"https://github.com/calcom/cal.com/blob/main/apps/web/app/event-types/page.tsx\"})}),`\n`]})]})}function h(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(c,{...t})}):c(t)}return b(x);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/cal-com/state-management/2-event-types-listing.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/cal-com/state-management/2-event-types-listing.mdx",
      "sourceFileName": "2-event-types-listing.mdx",
      "sourceFileDir": "guide/codebase-architecture/cal-com/state-management",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/cal-com/state-management/2-event-types-listing"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/cal-com/state-management/2-event-types-listing",
    "slugAsParams": "codebase-architecture/cal-com/state-management/2-event-types-listing"
  },
  {
    "title": "state-management in cal.com\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\n[State management in add/edit event type]\r\n\r\nIn this guide, we will review the state management in the following actions in Event Types page:\r\n1. Add new event type\r\n2. Edit existing event type\r\n\r\n# Add new event type\r\n\r\nIn the [event types page](https://app.cal.com/event-types), when you click on \"+ New\" button in the top right,\r\n\r\n[Insert screenshot of New button]\r\n\r\nyou will see this below dialog\r\n\r\n[Insert screenshot of dialog]\r\n\r\nLet's find out how the code behind this works.\r\n\r\n## New button\r\n\r\nI had to open dev tools and find a unique identifier that helped me locate this button in the cal.com codebase.\r\n\r\n```\r\n<div class=\"pwa:bottom-[max(7rem,_calc(5rem_+_env(safe-area-inset-bottom)))] fixed bottom-20 z-40 ltr:right-4 rtl:left-4 md:z-auto md:ltr:right-0 md:rtl:left-0 flex-shrink-0 [-webkit-app-region:no-drag] md:relative md:bottom-auto md:right-auto\">\r\n  <button data-testid=\"new-event-type\" type=\"button\" class=\"whitespace-nowrap inline-flex items-center text-sm font-medium relative transition disabled:cursor-not-allowed rounded-full justify-center md:rounded-md radix-state-open:rotate-45 md:radix-state-open:rotate-0 radix-state-open:shadown-none radix-state-open:ring-0 !shadow-none bg-brand-default hover:bg-brand-emphasis focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-brand-default text-brand disabled:bg-brand-subtle disabled:text-brand-subtle disabled:opacity-40 disabled:hover:bg-brand-subtle disabled:hover:text-brand-default disabled:hover:opacity-40 px-4 py-2.5 h-14 md:h-9 md:w-auto md:px-4 md:py-2.5\"><svg height=\"16\" width=\"16\" class=\"fill-transparent hidden h-4 w-4 stroke-[1.5px] ltr:-ml-1 ltr:mr-2 rtl:-mr-1 rtl:ml-2 md:inline-flex\" aria-hidden=\"true\"><use href=\"#plus\"></use></svg><svg height=\"16\" width=\"16\" class=\"fill-transparent inline h-6 w-6 md:hidden\" data-testid=\"plus\" aria-hidden=\"true\"><use href=\"#plus\"></use></svg><span class=\"hidden md:inline\">New</span></button></div>\r\n``` \r\n\r\nI searched for `pwa:bottom-[max` in the cal.com codebase and found it in [Shell.tsx](https://github.com/calcom/cal.com/blob/bfeafaa21f7dc70e02cbd26ab6670459678b4bcc/packages/features/shell/Shell.tsx#L192)\r\nat line 187 in ShellMain component.\r\n\r\n```\r\n{props.CTA && (\r\n  <div\r\n    className={classNames(\r\n      props.backPath\r\n        ? \"relative\"\r\n        : \"pwa:bottom-[max(7rem,_calc(5rem_+_env(safe-area-inset-bottom)))] fixed bottom-20 z-40 ltr:right-4 rtl:left-4 md:z-auto md:ltr:right-0 md:rtl:left-0\",\r\n      \"flex-shrink-0 [-webkit-app-region:no-drag] md:relative md:bottom-auto md:right-auto\"\r\n    )}>\r\n    {isLocaleReady && props.CTA}\r\n  </div>\r\n)}\r\n```\r\n\r\nIn [event-types-listing-view.tsx](https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx),\r\nShell component is used as shown below:\r\n\r\n```\r\nreturn (\r\n    <Shell\r\n      withoutMain={false}\r\n      title={t(\"event_types_page_title\")}\r\n      description={t(\"event_types_page_subtitle\")}\r\n      withoutSeo\r\n      heading={t(\"event_types_page_title\")}\r\n      hideHeadingOnMobile\r\n      subtitle={t(\"event_types_page_subtitle\")}\r\n      CTA={<CTA profileOptions={profileOptions} isOrganization={!!user?.organizationId} />}>\r\n``` \r\n\r\nBut when we searched for this New button in the cal.com codebase, we found it in ShellMain component. So how's Shell and ShellMain\r\nrelated?\r\n\r\n## Shell\r\n\r\nBelow code is picked from [Shell.tsx at line 120](https://github.com/calcom/cal.com/blob/main/packages/features/shell/Shell.tsx#L120).\r\n\r\n```\r\nexport default function Shell(props: LayoutProps) {\r\n  // if a page is unauthed and isPublic is true, the redirect does not happen.\r\n  useRedirectToLoginIfUnauthenticated(props.isPublic);\r\n  useRedirectToOnboardingIfNeeded();\r\n  useAppTheme();\r\n\r\n  return !props.isPublic ? (\r\n    <KBarWrapper withKBar>\r\n      <Layout {...props} />\r\n    </KBarWrapper>\r\n  ) : (\r\n    <PublicShell {...props} />\r\n  );\r\n}\r\n```\r\n\r\nTo understand how Shell and ShellMain are related, we need to follow the Layout component. Below is the Layout code picked from\r\n[line 25 in Shell.tsx](https://github.com/calcom/cal.com/blob/main/packages/features/shell/Shell.tsx#L25).\r\n\r\n```\r\nconst Layout = (props: LayoutProps) => {\r\n  const { banners, bannersHeight } = useBanners();\r\n  const pathname = usePathname();\r\n  const isFullPageWithoutSidebar = pathname?.startsWith(\"/apps/routing-forms/reporting/\");\r\n  const pageTitle = typeof props.heading === \"string\" && !props.title ? props.heading : props.title;\r\n  const withoutSeo = props.withoutSeo ?? props.withoutMain ?? false;\r\n\r\n  useFormbricks();\r\n\r\n  return (\r\n    <>\r\n      {!withoutSeo && (\r\n        <HeadSeo\r\n          title={pageTitle ?? APP_NAME}\r\n          description={props.description ?? props.subtitle?.toString() ?? \"\"}\r\n        />\r\n      )}\r\n      <div>\r\n        <Toaster position=\"bottom-right\" />\r\n      </div>\r\n\r\n      <TimezoneChangeDialog />\r\n\r\n      <div className=\"flex min-h-screen flex-col\">\r\n        {banners && !props.isPlatformUser && !isFullPageWithoutSidebar && (\r\n          <BannerContainer banners={banners} />\r\n        )}\r\n\r\n        <div className=\"flex flex-1\" data-testid=\"dashboard-shell\">\r\n          {props.SidebarContainer ? (\r\n            cloneElement(props.SidebarContainer, { bannersHeight })\r\n          ) : (\r\n            <SideBarContainer isPlatformUser={props.isPlatformUser} bannersHeight={bannersHeight} />\r\n          )}\r\n          <div className=\"flex w-0 flex-1 flex-col\">\r\n            <MainContainer {...props} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n```\r\n\r\n## MainContainer\r\n\r\nMainContainer component above has the below code picked from Shell.tsx\r\n\r\n```\r\nfunction MainContainer({\r\n  isPlatformUser,\r\n  MobileNavigationContainer: MobileNavigationContainerProp = (\r\n    <MobileNavigationContainer isPlatformNavigation={isPlatformUser} />\r\n  ),\r\n  TopNavContainer: TopNavContainerProp = <TopNavContainer />,\r\n  ...props\r\n}: LayoutProps) {\r\n  return (\r\n    <main className=\"bg-default relative z-0 flex-1 focus:outline-none\">\r\n      {/* show top navigation for md and smaller (tablet and phones) */}\r\n      {TopNavContainerProp}\r\n      <div className=\"max-w-full px-2 py-4 lg:px-6\">\r\n        <ErrorBoundary>\r\n          {!props.withoutMain ? <ShellMain {...props}>{props.children}</ShellMain> : props.children}\r\n        </ErrorBoundary>\r\n        {/* show bottom navigation for md and smaller (tablet and phones) on pages where back button doesn't exist */}\r\n        {!props.backPath ? MobileNavigationContainerProp : null}\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n```\r\n\r\n## CTA component\r\n\r\n`MainContainer` component has the `ShellMain` component. So far, we have only looked at Shell and ShellMain, we still need to \r\nunderstand this code snippet below.\r\n\r\n```\r\n{props.CTA && (\r\n  <div\r\n    className={classNames(\r\n      props.backPath\r\n        ? \"relative\"\r\n        : \"pwa:bottom-[max(7rem,_calc(5rem_+_env(safe-area-inset-bottom)))] fixed bottom-20 z-40 ltr:right-4 rtl:left-4 md:z-auto md:ltr:right-0 md:rtl:left-0\",\r\n      \"flex-shrink-0 [-webkit-app-region:no-drag] md:relative md:bottom-auto md:right-auto\"\r\n    )}>\r\n    {isLocaleReady && props.CTA}\r\n  </div>\r\n)}\r\n```\r\n\r\nNew button is passed down as `props.CTA` to the ShellMain component, let's check the [event-types-listing-view.tsx](https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L1006)\r\n\r\n```\r\n <Shell\r\n  ...\r\n  CTA={<CTA profileOptions={profileOptions} isOrganization={!!user?.organizationId} />}>\r\n  <InfiniteScrollMain\r\n    ...\r\n  />\r\n</Shell>\r\n```\r\n\r\nThis CTA is defined with in the [event-types-listing-view.tsx file](https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L840)\r\n\r\n```\r\nconst CTA = ({\r\n  profileOptions,\r\n  isOrganization,\r\n}: {\r\n  profileOptions: {\r\n    teamId: number | null | undefined;\r\n    label: string | null;\r\n    image: string;\r\n    membershipRole: MembershipRole | null | undefined;\r\n    slug: string | null;\r\n  }[];\r\n  isOrganization: boolean;\r\n}) => {\r\n  const { t } = useLocale();\r\n\r\n  if (!profileOptions.length) return null;\r\n\r\n  return (\r\n    <CreateButton\r\n      data-testid=\"new-event-type\"\r\n      subtitle={t(\"create_event_on\").toUpperCase()}\r\n      options={profileOptions}\r\n      createDialog={() => <CreateEventTypeDialog profileOptions={profileOptions} />}\r\n    />\r\n  );\r\n};\r\n```\r\n\r\n## CreateButton\r\n\r\nCreateButton is a generic component imported from `@calcom/ui`. It has a prop called `createDialog`. This is\r\nwhere you would pass your `CreateEventTypeDialog`. This dialog component shows you the event type \r\nform in a dialog.\r\n\r\nThe below code is picked from [ui/components/createButton/CreateButton.tsx](https://github.com/calcom/cal.com/blob/main/packages/ui/components/createButton/CreateButton.tsx#L40)\r\n\r\n```\r\nimport { usePathname, useRouter } from \"next/navigation\";\r\n\r\nimport { useCompatSearchParams } from \"@calcom/lib/hooks/useCompatSearchParams\";\r\nimport { useLocale } from \"@calcom/lib/hooks/useLocale\";\r\nimport type { ButtonColor } from \"@calcom/ui\";\r\nimport {\r\n  Avatar,\r\n  Button,\r\n  Dropdown,\r\n  DropdownItem,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuTrigger,\r\n} from \"@calcom/ui\";\r\n\r\nexport interface Option {\r\n  platform?: boolean;\r\n  teamId: number | null | undefined; // if undefined, then it's a profile\r\n  label: string | null;\r\n  image: string | null;\r\n  slug: string | null;\r\n}\r\n\r\nexport type CreateBtnProps = {\r\n  options: Option[];\r\n  createDialog?: () => JSX.Element;\r\n  createFunction?: (teamId?: number, platform?: boolean) => void;\r\n  subtitle?: string;\r\n  buttonText?: string;\r\n  isPending?: boolean;\r\n  disableMobileButton?: boolean;\r\n  \"data-testid\"?: string;\r\n  color?: ButtonColor;\r\n};\r\n\r\n/**\r\n * @deprecated use CreateButtonWithTeamsList instead\r\n */\r\nexport function CreateButton(props: CreateBtnProps) {\r\n  const { t } = useLocale();\r\n  const router = useRouter();\r\n  const searchParams = useCompatSearchParams();\r\n  const pathname = usePathname();\r\n\r\n  const {\r\n    createDialog,\r\n    options,\r\n    isPending,\r\n    createFunction,\r\n    buttonText,\r\n    disableMobileButton,\r\n    subtitle,\r\n    ...restProps\r\n  } = props;\r\n  const CreateDialog = createDialog ? createDialog() : null;\r\n\r\n  const hasTeams = !!options.find((option) => option.teamId);\r\n  const platform = !!options.find((option) => option.platform);\r\n\r\n  // inject selection data into url for correct router history\r\n  const openModal = (option: Option) => {\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {!hasTeams && !platform ? (\r\n        <Button\r\n          onClick={() =>\r\n            !!CreateDialog\r\n              ? openModal(options[0])\r\n              : createFunction\r\n              ? createFunction(options[0].teamId || undefined)\r\n              : null\r\n          }\r\n          data-testid=\"create-button\"\r\n          StartIcon=\"plus\"\r\n          loading={isPending}\r\n          variant={disableMobileButton ? \"button\" : \"fab\"}\r\n          {...restProps}>\r\n          {buttonText ? buttonText : t(\"new\")}\r\n        </Button>\r\n      ) : (\r\n        <Dropdown>\r\n          <DropdownMenuTrigger asChild>\r\n            <Button\r\n              variant={disableMobileButton ? \"button\" : \"fab\"}\r\n              StartIcon=\"plus\"\r\n              data-testid=\"create-button-dropdown\"\r\n              loading={isPending}\r\n              {...restProps}>\r\n              {buttonText ? buttonText : t(\"new\")}\r\n            </Button>\r\n          </DropdownMenuTrigger>\r\n          <DropdownMenuContent sideOffset={14} align=\"end\">\r\n            <DropdownMenuLabel>\r\n              <div className=\"w-48 text-left text-xs\">{subtitle}</div>\r\n            </DropdownMenuLabel>\r\n            {options.map((option, idx) => (\r\n              <DropdownMenuItem key={option.label}>\r\n                <DropdownItem\r\n                  type=\"button\"\r\n                  data-testid={`option${option.teamId ? \"-team\" : \"\"}-${idx}`}\r\n                  CustomStartIcon={<Avatar alt={option.label || \"\"} imageSrc={option.image} size=\"sm\" />}\r\n                  onClick={() =>\r\n                    !!CreateDialog\r\n                      ? openModal(option)\r\n                      : createFunction\r\n                      ? createFunction(option.teamId || undefined, option.platform)\r\n                      : null\r\n                  }>\r\n                  {\" \"}\r\n                  {/*improve this code */}\r\n                  <span>{option.label}</span>\r\n                </DropdownItem>\r\n              </DropdownMenuItem>\r\n            ))}\r\n          </DropdownMenuContent>\r\n        </Dropdown>\r\n      )}\r\n      {searchParams?.get(\"dialog\") === \"new\" && CreateDialog}\r\n    </>\r\n  );\r\n}\r\n```\r\n\r\nWe now need to go to the `CreateEventTypeDialog` component, we are just following along the code to learn how\r\nthe Create Event Type form dialog state is managed.\r\n\r\n## CreateEventTypeDialog.tsx\r\n\r\nThe below code is picked from [features/eventtypes/components/CreateEventTypeDialog.tsx](https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/CreateEventTypeDialog.tsx#L53)\r\n\r\n```\r\nimport type { EventType } from \"@prisma/client\";\r\nimport { isValidPhoneNumber } from \"libphonenumber-js\";\r\nimport { useRouter } from \"next/navigation\";\r\nimport { z } from \"zod\";\r\n\r\nimport { useOrgBranding } from \"@calcom/features/ee/organizations/context/provider\";\r\nimport { TeamEventTypeForm } from \"@calcom/features/ee/teams/components/TeamEventTypeForm\";\r\nimport { useCreateEventType } from \"@calcom/lib/hooks/useCreateEventType\";\r\nimport { useLocale } from \"@calcom/lib/hooks/useLocale\";\r\nimport { useTypedQuery } from \"@calcom/lib/hooks/useTypedQuery\";\r\nimport { MembershipRole, SchedulingType } from \"@calcom/prisma/enums\";\r\nimport { trpc } from \"@calcom/trpc/react\";\r\nimport { Button, Dialog, DialogClose, DialogContent, DialogFooter, showToast } from \"@calcom/ui\";\r\n\r\nimport CreateEventTypeForm from \"./CreateEventTypeForm\";\r\n\r\n// this describes the uniform data needed to create a new event type on Profile or Team\r\nexport interface EventTypeParent {\r\n  teamId: number | null | undefined; // if undefined, then it's a profile\r\n  membershipRole?: MembershipRole | null;\r\n  name?: string | null;\r\n  slug?: string | null;\r\n  image?: string | null;\r\n}\r\n\r\nconst locationFormSchema = z.array(\r\n  z.object({\r\n    locationType: z.string(),\r\n    locationAddress: z.string().optional(),\r\n    displayLocationPublicly: z.boolean().optional(),\r\n    locationPhoneNumber: z\r\n      .string()\r\n      .refine((val) => isValidPhoneNumber(val))\r\n      .optional(),\r\n    locationLink: z.string().url().optional(), // URL validates as new URL() - which requires HTTPS:// In the input field\r\n  })\r\n);\r\n\r\nconst querySchema = z.object({\r\n  eventPage: z.string().optional(),\r\n  teamId: z.union([z.string().transform((val) => +val), z.number()]).optional(),\r\n  title: z.string().optional(),\r\n  slug: z.string().optional(),\r\n  length: z.union([z.string().transform((val) => +val), z.number()]).optional(),\r\n  description: z.string().optional(),\r\n  schedulingType: z.nativeEnum(SchedulingType).optional(),\r\n  locations: z\r\n    .string()\r\n    .transform((jsonString) => locationFormSchema.parse(JSON.parse(jsonString)))\r\n    .optional(),\r\n});\r\n\r\nexport default function CreateEventTypeDialog({\r\n  profileOptions,\r\n}: {\r\n  profileOptions: {\r\n    teamId: number | null | undefined;\r\n    label: string | null;\r\n    image: string | undefined;\r\n    membershipRole: MembershipRole | null | undefined;\r\n  }[];\r\n}) {\r\n  const { t } = useLocale();\r\n  const router = useRouter();\r\n  const orgBranding = useOrgBranding();\r\n\r\n  const {\r\n    data: { teamId, eventPage: pageSlug },\r\n  } = useTypedQuery(querySchema);\r\n\r\n  const teamProfile = profileOptions.find((profile) => profile.teamId === teamId);\r\n\r\n  const isTeamAdminOrOwner =\r\n    teamId !== undefined &&\r\n    (teamProfile?.membershipRole === MembershipRole.OWNER ||\r\n      teamProfile?.membershipRole === MembershipRole.ADMIN);\r\n\r\n  const onSuccessMutation = (eventType: EventType) => {\r\n    router.replace(`/event-types/${eventType.id}${teamId ? \"?tabName=team\" : \"\"}`);\r\n    showToast(\r\n      t(\"event_type_created_successfully\", {\r\n        eventTypeTitle: eventType.title,\r\n      }),\r\n      \"success\"\r\n    );\r\n  };\r\n\r\n  const onErrorMutation = (err: string) => {\r\n    showToast(err, \"error\");\r\n  };\r\n\r\n  const SubmitButton = (isPending: boolean) => {\r\n    return (\r\n      <DialogFooter showDivider>\r\n        <DialogClose />\r\n        <Button type=\"submit\" loading={isPending}>\r\n          {t(\"continue\")}\r\n        </Button>\r\n      </DialogFooter>\r\n    );\r\n  };\r\n\r\n  const { form, createMutation, isManagedEventType } = useCreateEventType(onSuccessMutation, onErrorMutation);\r\n\r\n  const urlPrefix = orgBranding?.fullDomain ?? process.env.NEXT_PUBLIC_WEBSITE_URL;\r\n\r\n  const { data: team } = trpc.viewer.teams.get.useQuery(\r\n    { teamId: teamId ?? -1, isOrg: false },\r\n    { enabled: !!teamId }\r\n  );\r\n\r\n  return (\r\n    <Dialog\r\n      name=\"new\"\r\n      clearQueryParamsOnClose={[\"eventPage\", \"type\", \"description\", \"title\", \"length\", \"slug\", \"locations\"]}>\r\n      <DialogContent\r\n        type=\"creation\"\r\n        enableOverflow\r\n        title={teamId ? t(\"add_new_team_event_type\") : t(\"add_new_event_type\")}\r\n        description={t(\"new_event_type_to_book_description\")}>\r\n        {teamId ? (\r\n          <TeamEventTypeForm\r\n            teamSlug={team?.slug}\r\n            teamId={teamId}\r\n            isTeamAdminOrOwner={isTeamAdminOrOwner}\r\n            urlPrefix={urlPrefix}\r\n            isPending={createMutation.isPending}\r\n            form={form}\r\n            isManagedEventType={isManagedEventType}\r\n            handleSubmit={(values) => {\r\n              createMutation.mutate(values);\r\n            }}\r\n            SubmitButton={SubmitButton}\r\n          />\r\n        ) : (\r\n          <CreateEventTypeForm\r\n            urlPrefix={urlPrefix}\r\n            isPending={createMutation.isPending}\r\n            form={form}\r\n            isManagedEventType={isManagedEventType}\r\n            handleSubmit={(values) => {\r\n              createMutation.mutate(values);\r\n            }}\r\n            SubmitButton={SubmitButton}\r\n            pageSlug={pageSlug}\r\n          />\r\n        )}\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n```\r\n\r\nIn the DialogContent, there's two kinds of forms:\r\n- TeamEventTypeForm\r\n- CreateEventTypeForm\r\n\r\nLet's review the `CreateEventTypeForm`.\r\n\r\n## CreateEventTypeForm\r\n\r\nThe below code snippet shows the props sent to `CreateEventTypeForm`:\r\n\r\n```\r\n<CreateEventTypeForm\r\n  urlPrefix={urlPrefix}\r\n  isPending={createMutation.isPending}\r\n  form={form}\r\n  isManagedEventType={isManagedEventType}\r\n  handleSubmit={(values) => {\r\n    createMutation.mutate(values);\r\n  }}\r\n  SubmitButton={SubmitButton}\r\n  pageSlug={pageSlug}\r\n/>\r\n```\r\n### props\r\n\r\n`handleSubmit` prop calls a mutation function:\r\n\r\n```\r\ncreateMutation.mutate(values);\r\n```\r\n\r\nAt [line 103](https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/CreateEventTypeDialog.tsx#L103), \r\nyou will find createMutation is imported from `useCreateEventType`.\r\n\r\n```\r\nconst { form, createMutation, isManagedEventType } = useCreateEventType(onSuccessMutation, onErrorMutation);\r\n```\r\n\r\nYou can learn more about these mutations in API layer.\r\n\r\n## useCreateEventType\r\n\r\nThis below code is picked from [useCreateEventType](https://github.com/calcom/cal.com/blob/main/packages/lib/hooks/useCreateEventType.ts#L17)\r\n\r\n```\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nexport const useCreateEventTypeForm = () => {\r\n  const form = useForm<CreateEventTypeFormValues>({\r\n    defaultValues: {\r\n      length: 15,\r\n    },\r\n    resolver: zodResolver(createEventTypeInput),\r\n  });\r\n  ...\r\n  return { form, isManagedEventType };\r\n};\r\n\r\nexport const useCreateEventType = (\r\n  onSuccessMutation: (eventType: EventType) => void,\r\n  onErrorMutation: (message: string) => void\r\n) => {\r\n  ...\r\n  const { form, isManagedEventType } = useCreateEventTypeForm();\r\n  ...\r\n}\r\n```\r\n\r\nOkay, now it is clear that CreateEventType uses [react-hook-form](https://react-hook-form.com/) to manage\r\nthe form state and on submitting the form, \r\n\r\n```\r\nhandleSubmit={(values) => {\r\n  createMutation.mutate(values);\r\n}}\r\n```\r\n\r\n# Edit existing event type \r\n\r\nIn the event types listing page, when you click on options as shown below:\r\n\r\n[Insert screenshot of options and dropdown in https://app.cal.com/event-types]\r\n\r\nYou will see `Edit`. When you click on this `Edit` button, you will be navigated to https://app.cal.com/event-types/{id}\r\n\r\n[Insert screenshot of - https://app.cal.com/event-types/989456?tabName=setup]\r\n\r\n`/event-types` is located at [apps/web/app/(use-page-wrapper)/(main-nav)/event-types/page.tsx](https://github.com/calcom/cal.com/blob/main/apps/web/app/(use-page-wrapper)/(main-nav)/event-types/page.tsx) \r\nat the time of writing this guide and returns the below shown component\r\n\r\n```\r\nconst Page = async ({ params, searchParams }: PageProps) => {\r\n  const context = buildLegacyCtx(headers(), cookies(), params, searchParams);\r\n  const session = await getServerSession({ req: context.req });\r\n\r\n  if (!session?.user?.id) {\r\n    redirect(\"/auth/login\");\r\n  }\r\n\r\n  await ssrInit(context);\r\n  const t = await getTranslate();\r\n\r\n  return (\r\n    <ShellMainAppDir\r\n      heading={t(\"event_types_page_title\")}\r\n      subtitle={t(\"event_types_page_subtitle\")}\r\n      CTA={<EventTypesCTA />}>\r\n      <EventTypes />\r\n    </ShellMainAppDir>\r\n  );\r\n};\r\n```\r\n\r\n## EventTypes component\r\n\r\n```\r\nimport EventTypes, { EventTypesCTA } from \"~/event-types/views/event-types-listing-view\";\r\n```\r\n\r\n`~/` is alias for [modules folder](https://github.com/calcom/cal.com/tree/main/apps/web/modules) that you can\r\nfind in [tsconfig.json](https://github.com/calcom/cal.com/blob/main/apps/web/tsconfig.json#L1C1-L6C28).\r\n\r\n```\r\n{\r\n  \"extends\": \"@calcom/tsconfig/nextjs.json\",\r\n  \"compilerOptions\": {\r\n    \"baseUrl\": \".\",\r\n    \"paths\": {\r\n      \"~/*\": [\"modules/*\"],\r\n```\r\n\r\n[event-types-listing-view.tsx](https://github.com/calcom/cal.com/blob/9608669f98bb0952137ecec374ac7125717fc9db/apps/web/modules/event-types/views/event-types-listing-view.tsx#L611)\r\nis a large file containing 1020 lines at the writing this guide. You will find the \"Edit\" button at [line 611](https://github.com/calcom/cal.com/blob/9608669f98bb0952137ecec374ac7125717fc9db/apps/web/modules/event-types/views/event-types-listing-view.tsx#L611)\r\n\r\n```\r\n<DropdownMenuContent>\r\n  {!readOnly && (\r\n    <DropdownMenuItem>\r\n      <DropdownItem\r\n        type=\"button\"\r\n        data-testid={`event-type-edit-${type.id}`}\r\n        StartIcon=\"pencil\"\r\n        onClick={() => router.push(`/event-types/${type.id}`)}>\r\n        {t(\"edit\")}\r\n      </DropdownItem>\r\n    </DropdownMenuItem>\r\n  )}\r\n```\r\n\r\nOn clicking \"Edit\", you are redirected to `/event-types/${some-id}`.\r\n\r\n[Insert screenshot of - https://app.cal.com/event-types/989456?tabName=setup]\r\n\r\nBy default, tabName is set to \"setup\" when you visit `event-types/{id}` as a query param so the url becomes `event-types/{id}?tabName=setup`\r\n\r\n## Finding the route\r\n\r\nWe need to find where this `event-types/{id}` dynamic route is in the cal.com codebase. This page is found at \r\n[web/app/(use-page-wrapper)/event-types/[type]/page.tsx](https://github.com/calcom/cal.com/blob/9608669f98bb0952137ecec374ac7125717fc9db/apps/web/app/(use-page-wrapper)/event-types/%5Btype%5D/page.tsx) \r\n\r\nThe below code snippet is picked from [event-types/[type]/page.tsx]()\r\n\r\n```\r\n...\r\nimport EventTypePageWrapper from \"~/event-types/views/event-types-single-view\";\r\n...\r\nconst ServerPage = async ({ params, searchParams }: _PageProps) => {\r\n  const legacyCtx = buildLegacyCtx(headers(), cookies(), params, searchParams);\r\n  const props = await getData(legacyCtx);\r\n\r\n  return <EventTypePageWrapper {...props} />;\r\n};\r\n\r\nexport default ServerPage;\r\n```\r\n\r\nThis page just returns a wrapper, EventTypePageWrapper, imported from `~/event-types/views/event-types-single-view`\r\nWe know where to look for, i.e., in the modules folder \r\n\r\n## EventTypePageWrapper\r\n\r\nThe below code is picked from [apps/web/modules/event-types/views/event-types-single-view.tsx](https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-single-view.tsx#L7)\r\n\r\n```\r\n\"use client\";\r\n\r\nimport { EventType } from \"@calcom/atoms/monorepo\";\r\n\r\nimport type { PageProps } from \"@lib/event-types/[type]/getServerSideProps\";\r\n\r\nconst EventTypePageWrapper = ({ type, ...rest }: PageProps) => {\r\n  return <EventType {...rest} id={type} />;\r\n};\r\n\r\nexport default EventTypePageWrapper;\r\n```\r\n\r\nSince `event-types/{id}` has multiple tabs, the code displaying these tabs is organized differently.\r\nLet's follow along the code and see how EventType looks like.\r\n\r\n## EventType\r\n\r\n`EventType` is imported from `@calcom/atoms/monorepo`. `@calcom/atoms` here is a package name.\r\nTo find this package, we need to search for `@calcom/atoms` in the `cal.com` codebase.\r\n\r\nYou will find the below search results for [\"package.json @calcom/atoms\" in cal.com codebase](https://github.com/search?q=repo%3Acalcom%2Fcal.com+package.json+%40calcom%2Fatoms&type=code) \r\n\r\n[Insert screenshot of - https://github.com/search?q=repo%3Acalcom%2Fcal.com+package.json+%40calcom%2Fatoms&type=code]\r\n\r\n[Line 16 in platform/atoms/monorepo](https://github.com/calcom/cal.com/blob/962f692e298c2498260baceb8659b0cc55452fe5/packages/platform/atoms/monorepo.ts#L16)\r\nexports `EventTypeWebWrapper as EventType`.\r\n\r\nCal.com uses hashmap for the tabs found at [line 177](https://github.com/calcom/cal.com/blob/962f692e298c2498260baceb8659b0cc55452fe5/packages/platform/atoms/event-types/wrappers/EventTypeWebWrapper.tsx#L177)\r\n\r\n[EventTypeWebWrapper](https://github.com/calcom/cal.com/blob/962f692e298c2498260baceb8659b0cc55452fe5/packages/platform/atoms/event-types/wrappers/EventTypeWebWrapper.tsx#L177)\r\nhas 370 lines at the time of writing, since this guide is about state management, let's review the state \r\nmanagement in setup tab. \r\n\r\n## State management in EventSetupTab\r\n\r\nYou will find the below code at [line 59](https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/tabs/setup/EventSetupTab.tsx#L59),\r\n\r\n```\r\nconst formMethods = useFormContext<FormValues>();\r\n```\r\n\r\nit tells us few things:\r\n\r\n- useFormContext\r\nuseFormContext is imported from \"react-hook-form\", found at [line 2](https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/tabs/setup/EventSetupTab.tsx#L2C1-L2C62) \r\nas shown below:\r\n\r\n```\r\nimport { Controller, useFormContext } from \"react-hook-form\";\r\n```\r\n\r\nRead more about [useFormContext](https://react-hook-form.com/docs/useformcontext)\r\n\r\n- FormValues\r\n\r\nFollow along these below:\r\n- https://github.com/calcom/cal.com/blob/962f692e298c2498260baceb8659b0cc55452fe5/packages/platform/atoms/event-types/wrappers/EventTypeWebWrapper.tsx#L330\r\n- https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/tabs/setup/EventSetupTab.tsx#L2C1-L2C62\r\n- https://github.com/calcom/cal.com/blob/962f692e298c2498260baceb8659b0cc55452fe5/packages/features/eventtypes/components/EventType.tsx\r\n- https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/EventTypeLayout.tsx#L53\r\n",
      "code": "var Component=(()=>{var h=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),v=(t,e)=>{for(var r in e)a(t,r,{get:e[r],enumerable:!0})},s=(t,e,r,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of u(e))!g.call(t,o)&&o!==r&&a(t,o,{get:()=>e[o],enumerable:!(i=m(e,o))||i.enumerable});return t};var y=(t,e,r)=>(r=t!=null?h(b(t)):{},s(e||!t||!t.__esModule?a(r,\"default\",{value:t,enumerable:!0}):r,t)),w=t=>s(a({},\"__esModule\",{value:!0}),t);var c=f((E,l)=>{l.exports=_jsx_runtime});var x={};v(x,{default:()=>d,frontmatter:()=>T});var n=y(c()),T={title:\"state-management in cal.com\"};function p(t){let e={a:\"a\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"[State management in add/edit event type]\"}),`\n`,(0,n.jsx)(e.p,{children:\"In this guide, we will review the state management in the following actions in Event Types page:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Add new event type\"}),`\n`,(0,n.jsx)(e.li,{children:\"Edit existing event type\"}),`\n`]}),`\n`,(0,n.jsx)(e.h1,{id:\"add-new-event-type\",children:\"Add new event type\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In the \",(0,n.jsx)(e.a,{href:\"https://app.cal.com/event-types\",children:\"event types page\"}),', when you click on \"+ New\" button in the top right,']}),`\n`,(0,n.jsx)(e.p,{children:\"[Insert screenshot of New button]\"}),`\n`,(0,n.jsx)(e.p,{children:\"you will see this below dialog\"}),`\n`,(0,n.jsx)(e.p,{children:\"[Insert screenshot of dialog]\"}),`\n`,(0,n.jsx)(e.p,{children:\"Let's find out how the code behind this works.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"new-button\",children:\"New button\"}),`\n`,(0,n.jsx)(e.p,{children:\"I had to open dev tools and find a unique identifier that helped me locate this button in the cal.com codebase.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`<div class=\"pwa:bottom-[max(7rem,_calc(5rem_+_env(safe-area-inset-bottom)))] fixed bottom-20 z-40 ltr:right-4 rtl:left-4 md:z-auto md:ltr:right-0 md:rtl:left-0 flex-shrink-0 [-webkit-app-region:no-drag] md:relative md:bottom-auto md:right-auto\">\\r\n  <button data-testid=\"new-event-type\" type=\"button\" class=\"whitespace-nowrap inline-flex items-center text-sm font-medium relative transition disabled:cursor-not-allowed rounded-full justify-center md:rounded-md radix-state-open:rotate-45 md:radix-state-open:rotate-0 radix-state-open:shadown-none radix-state-open:ring-0 !shadow-none bg-brand-default hover:bg-brand-emphasis focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-brand-default text-brand disabled:bg-brand-subtle disabled:text-brand-subtle disabled:opacity-40 disabled:hover:bg-brand-subtle disabled:hover:text-brand-default disabled:hover:opacity-40 px-4 py-2.5 h-14 md:h-9 md:w-auto md:px-4 md:py-2.5\"><svg height=\"16\" width=\"16\" class=\"fill-transparent hidden h-4 w-4 stroke-[1.5px] ltr:-ml-1 ltr:mr-2 rtl:-mr-1 rtl:ml-2 md:inline-flex\" aria-hidden=\"true\"><use href=\"#plus\"></use></svg><svg height=\"16\" width=\"16\" class=\"fill-transparent inline h-6 w-6 md:hidden\" data-testid=\"plus\" aria-hidden=\"true\"><use href=\"#plus\"></use></svg><span class=\"hidden md:inline\">New</span></button></div>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"I searched for \",(0,n.jsx)(e.code,{children:\"pwa:bottom-[max\"}),\" in the cal.com codebase and found it in \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/bfeafaa21f7dc70e02cbd26ab6670459678b4bcc/packages/features/shell/Shell.tsx#L192\",children:\"Shell.tsx\"}),`\\r\nat line 187 in ShellMain component.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`{props.CTA && (\\r\n  <div\\r\n    className={classNames(\\r\n      props.backPath\\r\n        ? \"relative\"\\r\n        : \"pwa:bottom-[max(7rem,_calc(5rem_+_env(safe-area-inset-bottom)))] fixed bottom-20 z-40 ltr:right-4 rtl:left-4 md:z-auto md:ltr:right-0 md:rtl:left-0\",\\r\n      \"flex-shrink-0 [-webkit-app-region:no-drag] md:relative md:bottom-auto md:right-auto\"\\r\n    )}>\\r\n    {isLocaleReady && props.CTA}\\r\n  </div>\\r\n)}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx\",children:\"event-types-listing-view.tsx\"}),`,\\r\nShell component is used as shown below:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`return (\\r\n    <Shell\\r\n      withoutMain={false}\\r\n      title={t(\"event_types_page_title\")}\\r\n      description={t(\"event_types_page_subtitle\")}\\r\n      withoutSeo\\r\n      heading={t(\"event_types_page_title\")}\\r\n      hideHeadingOnMobile\\r\n      subtitle={t(\"event_types_page_subtitle\")}\\r\n      CTA={<CTA profileOptions={profileOptions} isOrganization={!!user?.organizationId} />}>\n`})}),`\n`,(0,n.jsx)(e.p,{children:`But when we searched for this New button in the cal.com codebase, we found it in ShellMain component. So how's Shell and ShellMain\\r\nrelated?`}),`\n`,(0,n.jsx)(e.h2,{id:\"shell\",children:\"Shell\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Below code is picked from \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/packages/features/shell/Shell.tsx#L120\",children:\"Shell.tsx at line 120\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`export default function Shell(props: LayoutProps) {\\r\n  // if a page is unauthed and isPublic is true, the redirect does not happen.\\r\n  useRedirectToLoginIfUnauthenticated(props.isPublic);\\r\n  useRedirectToOnboardingIfNeeded();\\r\n  useAppTheme();\\r\n\\r\n  return !props.isPublic ? (\\r\n    <KBarWrapper withKBar>\\r\n      <Layout {...props} />\\r\n    </KBarWrapper>\\r\n  ) : (\\r\n    <PublicShell {...props} />\\r\n  );\\r\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[`To understand how Shell and ShellMain are related, we need to follow the Layout component. Below is the Layout code picked from\\r\n`,(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/packages/features/shell/Shell.tsx#L25\",children:\"line 25 in Shell.tsx\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const Layout = (props: LayoutProps) => {\\r\n  const { banners, bannersHeight } = useBanners();\\r\n  const pathname = usePathname();\\r\n  const isFullPageWithoutSidebar = pathname?.startsWith(\"/apps/routing-forms/reporting/\");\\r\n  const pageTitle = typeof props.heading === \"string\" && !props.title ? props.heading : props.title;\\r\n  const withoutSeo = props.withoutSeo ?? props.withoutMain ?? false;\\r\n\\r\n  useFormbricks();\\r\n\\r\n  return (\\r\n    <>\\r\n      {!withoutSeo && (\\r\n        <HeadSeo\\r\n          title={pageTitle ?? APP_NAME}\\r\n          description={props.description ?? props.subtitle?.toString() ?? \"\"}\\r\n        />\\r\n      )}\\r\n      <div>\\r\n        <Toaster position=\"bottom-right\" />\\r\n      </div>\\r\n\\r\n      <TimezoneChangeDialog />\\r\n\\r\n      <div className=\"flex min-h-screen flex-col\">\\r\n        {banners && !props.isPlatformUser && !isFullPageWithoutSidebar && (\\r\n          <BannerContainer banners={banners} />\\r\n        )}\\r\n\\r\n        <div className=\"flex flex-1\" data-testid=\"dashboard-shell\">\\r\n          {props.SidebarContainer ? (\\r\n            cloneElement(props.SidebarContainer, { bannersHeight })\\r\n          ) : (\\r\n            <SideBarContainer isPlatformUser={props.isPlatformUser} bannersHeight={bannersHeight} />\\r\n          )}\\r\n          <div className=\"flex w-0 flex-1 flex-col\">\\r\n            <MainContainer {...props} />\\r\n          </div>\\r\n        </div>\\r\n      </div>\\r\n    </>\\r\n  );\\r\n};\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"maincontainer\",children:\"MainContainer\"}),`\n`,(0,n.jsx)(e.p,{children:\"MainContainer component above has the below code picked from Shell.tsx\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`function MainContainer({\\r\n  isPlatformUser,\\r\n  MobileNavigationContainer: MobileNavigationContainerProp = (\\r\n    <MobileNavigationContainer isPlatformNavigation={isPlatformUser} />\\r\n  ),\\r\n  TopNavContainer: TopNavContainerProp = <TopNavContainer />,\\r\n  ...props\\r\n}: LayoutProps) {\\r\n  return (\\r\n    <main className=\"bg-default relative z-0 flex-1 focus:outline-none\">\\r\n      {/* show top navigation for md and smaller (tablet and phones) */}\\r\n      {TopNavContainerProp}\\r\n      <div className=\"max-w-full px-2 py-4 lg:px-6\">\\r\n        <ErrorBoundary>\\r\n          {!props.withoutMain ? <ShellMain {...props}>{props.children}</ShellMain> : props.children}\\r\n        </ErrorBoundary>\\r\n        {/* show bottom navigation for md and smaller (tablet and phones) on pages where back button doesn't exist */}\\r\n        {!props.backPath ? MobileNavigationContainerProp : null}\\r\n      </div>\\r\n    </main>\\r\n  );\\r\n}\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"cta-component\",children:\"CTA component\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"MainContainer\"}),\" component has the \",(0,n.jsx)(e.code,{children:\"ShellMain\"}),` component. So far, we have only looked at Shell and ShellMain, we still need to\\r\nunderstand this code snippet below.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`{props.CTA && (\\r\n  <div\\r\n    className={classNames(\\r\n      props.backPath\\r\n        ? \"relative\"\\r\n        : \"pwa:bottom-[max(7rem,_calc(5rem_+_env(safe-area-inset-bottom)))] fixed bottom-20 z-40 ltr:right-4 rtl:left-4 md:z-auto md:ltr:right-0 md:rtl:left-0\",\\r\n      \"flex-shrink-0 [-webkit-app-region:no-drag] md:relative md:bottom-auto md:right-auto\"\\r\n    )}>\\r\n    {isLocaleReady && props.CTA}\\r\n  </div>\\r\n)}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"New button is passed down as \",(0,n.jsx)(e.code,{children:\"props.CTA\"}),\" to the ShellMain component, let's check the \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L1006\",children:\"event-types-listing-view.tsx\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:` <Shell\\r\n  ...\\r\n  CTA={<CTA profileOptions={profileOptions} isOrganization={!!user?.organizationId} />}>\\r\n  <InfiniteScrollMain\\r\n    ...\\r\n  />\\r\n</Shell>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This CTA is defined with in the \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L840\",children:\"event-types-listing-view.tsx file\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const CTA = ({\\r\n  profileOptions,\\r\n  isOrganization,\\r\n}: {\\r\n  profileOptions: {\\r\n    teamId: number | null | undefined;\\r\n    label: string | null;\\r\n    image: string;\\r\n    membershipRole: MembershipRole | null | undefined;\\r\n    slug: string | null;\\r\n  }[];\\r\n  isOrganization: boolean;\\r\n}) => {\\r\n  const { t } = useLocale();\\r\n\\r\n  if (!profileOptions.length) return null;\\r\n\\r\n  return (\\r\n    <CreateButton\\r\n      data-testid=\"new-event-type\"\\r\n      subtitle={t(\"create_event_on\").toUpperCase()}\\r\n      options={profileOptions}\\r\n      createDialog={() => <CreateEventTypeDialog profileOptions={profileOptions} />}\\r\n    />\\r\n  );\\r\n};\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"createbutton\",children:\"CreateButton\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"CreateButton is a generic component imported from \",(0,n.jsx)(e.code,{children:\"@calcom/ui\"}),\". It has a prop called \",(0,n.jsx)(e.code,{children:\"createDialog\"}),`. This is\\r\nwhere you would pass your `,(0,n.jsx)(e.code,{children:\"CreateEventTypeDialog\"}),`. This dialog component shows you the event type\\r\nform in a dialog.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The below code is picked from \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/packages/ui/components/createButton/CreateButton.tsx#L40\",children:\"ui/components/createButton/CreateButton.tsx\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import { usePathname, useRouter } from \"next/navigation\";\\r\n\\r\nimport { useCompatSearchParams } from \"@calcom/lib/hooks/useCompatSearchParams\";\\r\nimport { useLocale } from \"@calcom/lib/hooks/useLocale\";\\r\nimport type { ButtonColor } from \"@calcom/ui\";\\r\nimport {\\r\n  Avatar,\\r\n  Button,\\r\n  Dropdown,\\r\n  DropdownItem,\\r\n  DropdownMenuContent,\\r\n  DropdownMenuItem,\\r\n  DropdownMenuLabel,\\r\n  DropdownMenuTrigger,\\r\n} from \"@calcom/ui\";\\r\n\\r\nexport interface Option {\\r\n  platform?: boolean;\\r\n  teamId: number | null | undefined; // if undefined, then it's a profile\\r\n  label: string | null;\\r\n  image: string | null;\\r\n  slug: string | null;\\r\n}\\r\n\\r\nexport type CreateBtnProps = {\\r\n  options: Option[];\\r\n  createDialog?: () => JSX.Element;\\r\n  createFunction?: (teamId?: number, platform?: boolean) => void;\\r\n  subtitle?: string;\\r\n  buttonText?: string;\\r\n  isPending?: boolean;\\r\n  disableMobileButton?: boolean;\\r\n  \"data-testid\"?: string;\\r\n  color?: ButtonColor;\\r\n};\\r\n\\r\n/**\\r\n * @deprecated use CreateButtonWithTeamsList instead\\r\n */\\r\nexport function CreateButton(props: CreateBtnProps) {\\r\n  const { t } = useLocale();\\r\n  const router = useRouter();\\r\n  const searchParams = useCompatSearchParams();\\r\n  const pathname = usePathname();\\r\n\\r\n  const {\\r\n    createDialog,\\r\n    options,\\r\n    isPending,\\r\n    createFunction,\\r\n    buttonText,\\r\n    disableMobileButton,\\r\n    subtitle,\\r\n    ...restProps\\r\n  } = props;\\r\n  const CreateDialog = createDialog ? createDialog() : null;\\r\n\\r\n  const hasTeams = !!options.find((option) => option.teamId);\\r\n  const platform = !!options.find((option) => option.platform);\\r\n\\r\n  // inject selection data into url for correct router history\\r\n  const openModal = (option: Option) => {\\r\n  };\\r\n\\r\n  return (\\r\n    <>\\r\n      {!hasTeams && !platform ? (\\r\n        <Button\\r\n          onClick={() =>\\r\n            !!CreateDialog\\r\n              ? openModal(options[0])\\r\n              : createFunction\\r\n              ? createFunction(options[0].teamId || undefined)\\r\n              : null\\r\n          }\\r\n          data-testid=\"create-button\"\\r\n          StartIcon=\"plus\"\\r\n          loading={isPending}\\r\n          variant={disableMobileButton ? \"button\" : \"fab\"}\\r\n          {...restProps}>\\r\n          {buttonText ? buttonText : t(\"new\")}\\r\n        </Button>\\r\n      ) : (\\r\n        <Dropdown>\\r\n          <DropdownMenuTrigger asChild>\\r\n            <Button\\r\n              variant={disableMobileButton ? \"button\" : \"fab\"}\\r\n              StartIcon=\"plus\"\\r\n              data-testid=\"create-button-dropdown\"\\r\n              loading={isPending}\\r\n              {...restProps}>\\r\n              {buttonText ? buttonText : t(\"new\")}\\r\n            </Button>\\r\n          </DropdownMenuTrigger>\\r\n          <DropdownMenuContent sideOffset={14} align=\"end\">\\r\n            <DropdownMenuLabel>\\r\n              <div className=\"w-48 text-left text-xs\">{subtitle}</div>\\r\n            </DropdownMenuLabel>\\r\n            {options.map((option, idx) => (\\r\n              <DropdownMenuItem key={option.label}>\\r\n                <DropdownItem\\r\n                  type=\"button\"\\r\n                  data-testid={\\`option\\${option.teamId ? \"-team\" : \"\"}-\\${idx}\\`}\\r\n                  CustomStartIcon={<Avatar alt={option.label || \"\"} imageSrc={option.image} size=\"sm\" />}\\r\n                  onClick={() =>\\r\n                    !!CreateDialog\\r\n                      ? openModal(option)\\r\n                      : createFunction\\r\n                      ? createFunction(option.teamId || undefined, option.platform)\\r\n                      : null\\r\n                  }>\\r\n                  {\" \"}\\r\n                  {/*improve this code */}\\r\n                  <span>{option.label}</span>\\r\n                </DropdownItem>\\r\n              </DropdownMenuItem>\\r\n            ))}\\r\n          </DropdownMenuContent>\\r\n        </Dropdown>\\r\n      )}\\r\n      {searchParams?.get(\"dialog\") === \"new\" && CreateDialog}\\r\n    </>\\r\n  );\\r\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"We now need to go to the \",(0,n.jsx)(e.code,{children:\"CreateEventTypeDialog\"}),` component, we are just following along the code to learn how\\r\nthe Create Event Type form dialog state is managed.`]}),`\n`,(0,n.jsx)(e.h2,{id:\"createeventtypedialogtsx\",children:\"CreateEventTypeDialog.tsx\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The below code is picked from \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/CreateEventTypeDialog.tsx#L53\",children:\"features/eventtypes/components/CreateEventTypeDialog.tsx\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import type { EventType } from \"@prisma/client\";\\r\nimport { isValidPhoneNumber } from \"libphonenumber-js\";\\r\nimport { useRouter } from \"next/navigation\";\\r\nimport { z } from \"zod\";\\r\n\\r\nimport { useOrgBranding } from \"@calcom/features/ee/organizations/context/provider\";\\r\nimport { TeamEventTypeForm } from \"@calcom/features/ee/teams/components/TeamEventTypeForm\";\\r\nimport { useCreateEventType } from \"@calcom/lib/hooks/useCreateEventType\";\\r\nimport { useLocale } from \"@calcom/lib/hooks/useLocale\";\\r\nimport { useTypedQuery } from \"@calcom/lib/hooks/useTypedQuery\";\\r\nimport { MembershipRole, SchedulingType } from \"@calcom/prisma/enums\";\\r\nimport { trpc } from \"@calcom/trpc/react\";\\r\nimport { Button, Dialog, DialogClose, DialogContent, DialogFooter, showToast } from \"@calcom/ui\";\\r\n\\r\nimport CreateEventTypeForm from \"./CreateEventTypeForm\";\\r\n\\r\n// this describes the uniform data needed to create a new event type on Profile or Team\\r\nexport interface EventTypeParent {\\r\n  teamId: number | null | undefined; // if undefined, then it's a profile\\r\n  membershipRole?: MembershipRole | null;\\r\n  name?: string | null;\\r\n  slug?: string | null;\\r\n  image?: string | null;\\r\n}\\r\n\\r\nconst locationFormSchema = z.array(\\r\n  z.object({\\r\n    locationType: z.string(),\\r\n    locationAddress: z.string().optional(),\\r\n    displayLocationPublicly: z.boolean().optional(),\\r\n    locationPhoneNumber: z\\r\n      .string()\\r\n      .refine((val) => isValidPhoneNumber(val))\\r\n      .optional(),\\r\n    locationLink: z.string().url().optional(), // URL validates as new URL() - which requires HTTPS:// In the input field\\r\n  })\\r\n);\\r\n\\r\nconst querySchema = z.object({\\r\n  eventPage: z.string().optional(),\\r\n  teamId: z.union([z.string().transform((val) => +val), z.number()]).optional(),\\r\n  title: z.string().optional(),\\r\n  slug: z.string().optional(),\\r\n  length: z.union([z.string().transform((val) => +val), z.number()]).optional(),\\r\n  description: z.string().optional(),\\r\n  schedulingType: z.nativeEnum(SchedulingType).optional(),\\r\n  locations: z\\r\n    .string()\\r\n    .transform((jsonString) => locationFormSchema.parse(JSON.parse(jsonString)))\\r\n    .optional(),\\r\n});\\r\n\\r\nexport default function CreateEventTypeDialog({\\r\n  profileOptions,\\r\n}: {\\r\n  profileOptions: {\\r\n    teamId: number | null | undefined;\\r\n    label: string | null;\\r\n    image: string | undefined;\\r\n    membershipRole: MembershipRole | null | undefined;\\r\n  }[];\\r\n}) {\\r\n  const { t } = useLocale();\\r\n  const router = useRouter();\\r\n  const orgBranding = useOrgBranding();\\r\n\\r\n  const {\\r\n    data: { teamId, eventPage: pageSlug },\\r\n  } = useTypedQuery(querySchema);\\r\n\\r\n  const teamProfile = profileOptions.find((profile) => profile.teamId === teamId);\\r\n\\r\n  const isTeamAdminOrOwner =\\r\n    teamId !== undefined &&\\r\n    (teamProfile?.membershipRole === MembershipRole.OWNER ||\\r\n      teamProfile?.membershipRole === MembershipRole.ADMIN);\\r\n\\r\n  const onSuccessMutation = (eventType: EventType) => {\\r\n    router.replace(\\`/event-types/\\${eventType.id}\\${teamId ? \"?tabName=team\" : \"\"}\\`);\\r\n    showToast(\\r\n      t(\"event_type_created_successfully\", {\\r\n        eventTypeTitle: eventType.title,\\r\n      }),\\r\n      \"success\"\\r\n    );\\r\n  };\\r\n\\r\n  const onErrorMutation = (err: string) => {\\r\n    showToast(err, \"error\");\\r\n  };\\r\n\\r\n  const SubmitButton = (isPending: boolean) => {\\r\n    return (\\r\n      <DialogFooter showDivider>\\r\n        <DialogClose />\\r\n        <Button type=\"submit\" loading={isPending}>\\r\n          {t(\"continue\")}\\r\n        </Button>\\r\n      </DialogFooter>\\r\n    );\\r\n  };\\r\n\\r\n  const { form, createMutation, isManagedEventType } = useCreateEventType(onSuccessMutation, onErrorMutation);\\r\n\\r\n  const urlPrefix = orgBranding?.fullDomain ?? process.env.NEXT_PUBLIC_WEBSITE_URL;\\r\n\\r\n  const { data: team } = trpc.viewer.teams.get.useQuery(\\r\n    { teamId: teamId ?? -1, isOrg: false },\\r\n    { enabled: !!teamId }\\r\n  );\\r\n\\r\n  return (\\r\n    <Dialog\\r\n      name=\"new\"\\r\n      clearQueryParamsOnClose={[\"eventPage\", \"type\", \"description\", \"title\", \"length\", \"slug\", \"locations\"]}>\\r\n      <DialogContent\\r\n        type=\"creation\"\\r\n        enableOverflow\\r\n        title={teamId ? t(\"add_new_team_event_type\") : t(\"add_new_event_type\")}\\r\n        description={t(\"new_event_type_to_book_description\")}>\\r\n        {teamId ? (\\r\n          <TeamEventTypeForm\\r\n            teamSlug={team?.slug}\\r\n            teamId={teamId}\\r\n            isTeamAdminOrOwner={isTeamAdminOrOwner}\\r\n            urlPrefix={urlPrefix}\\r\n            isPending={createMutation.isPending}\\r\n            form={form}\\r\n            isManagedEventType={isManagedEventType}\\r\n            handleSubmit={(values) => {\\r\n              createMutation.mutate(values);\\r\n            }}\\r\n            SubmitButton={SubmitButton}\\r\n          />\\r\n        ) : (\\r\n          <CreateEventTypeForm\\r\n            urlPrefix={urlPrefix}\\r\n            isPending={createMutation.isPending}\\r\n            form={form}\\r\n            isManagedEventType={isManagedEventType}\\r\n            handleSubmit={(values) => {\\r\n              createMutation.mutate(values);\\r\n            }}\\r\n            SubmitButton={SubmitButton}\\r\n            pageSlug={pageSlug}\\r\n          />\\r\n        )}\\r\n      </DialogContent>\\r\n    </Dialog>\\r\n  );\\r\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"In the DialogContent, there's two kinds of forms:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"TeamEventTypeForm\"}),`\n`,(0,n.jsx)(e.li,{children:\"CreateEventTypeForm\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Let's review the \",(0,n.jsx)(e.code,{children:\"CreateEventTypeForm\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"createeventtypeform\",children:\"CreateEventTypeForm\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The below code snippet shows the props sent to \",(0,n.jsx)(e.code,{children:\"CreateEventTypeForm\"}),\":\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`<CreateEventTypeForm\\r\n  urlPrefix={urlPrefix}\\r\n  isPending={createMutation.isPending}\\r\n  form={form}\\r\n  isManagedEventType={isManagedEventType}\\r\n  handleSubmit={(values) => {\\r\n    createMutation.mutate(values);\\r\n  }}\\r\n  SubmitButton={SubmitButton}\\r\n  pageSlug={pageSlug}\\r\n/>\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"props\",children:\"props\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"handleSubmit\"}),\" prop calls a mutation function:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`createMutation.mutate(values);\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"At \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/CreateEventTypeDialog.tsx#L103\",children:\"line 103\"}),`,\\r\nyou will find createMutation is imported from `,(0,n.jsx)(e.code,{children:\"useCreateEventType\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const { form, createMutation, isManagedEventType } = useCreateEventType(onSuccessMutation, onErrorMutation);\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"You can learn more about these mutations in API layer.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"usecreateeventtype\",children:\"useCreateEventType\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"This below code is picked from \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/packages/lib/hooks/useCreateEventType.ts#L17\",children:\"useCreateEventType\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import { useForm } from \"react-hook-form\";\\r\n\\r\nexport const useCreateEventTypeForm = () => {\\r\n  const form = useForm<CreateEventTypeFormValues>({\\r\n    defaultValues: {\\r\n      length: 15,\\r\n    },\\r\n    resolver: zodResolver(createEventTypeInput),\\r\n  });\\r\n  ...\\r\n  return { form, isManagedEventType };\\r\n};\\r\n\\r\nexport const useCreateEventType = (\\r\n  onSuccessMutation: (eventType: EventType) => void,\\r\n  onErrorMutation: (message: string) => void\\r\n) => {\\r\n  ...\\r\n  const { form, isManagedEventType } = useCreateEventTypeForm();\\r\n  ...\\r\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Okay, now it is clear that CreateEventType uses \",(0,n.jsx)(e.a,{href:\"https://react-hook-form.com/\",children:\"react-hook-form\"}),` to manage\\r\nthe form state and on submitting the form,`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`handleSubmit={(values) => {\\r\n  createMutation.mutate(values);\\r\n}}\n`})}),`\n`,(0,n.jsx)(e.h1,{id:\"edit-existing-event-type\",children:\"Edit existing event type\"}),`\n`,(0,n.jsx)(e.p,{children:\"In the event types listing page, when you click on options as shown below:\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert screenshot of options and dropdown in \",(0,n.jsx)(e.a,{href:\"https://app.cal.com/event-types\",children:\"https://app.cal.com/event-types\"}),\"]\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"You will see \",(0,n.jsx)(e.code,{children:\"Edit\"}),\". When you click on this \",(0,n.jsx)(e.code,{children:\"Edit\"}),\" button, you will be navigated to \",(0,n.jsx)(e.a,{href:\"https://app.cal.com/event-types/%7Bid%7D\",children:\"https://app.cal.com/event-types/{id}\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert screenshot of - \",(0,n.jsx)(e.a,{href:\"https://app.cal.com/event-types/989456?tabName=setup\",children:\"https://app.cal.com/event-types/989456?tabName=setup\"}),\"]\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"/event-types\"}),\" is located at \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/app/(use-page-wrapper)/(main-nav)/event-types/page.tsx\",children:\"apps/web/app/(use-page-wrapper)/(main-nav)/event-types/page.tsx\"}),`\\r\nat the time of writing this guide and returns the below shown component`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const Page = async ({ params, searchParams }: PageProps) => {\\r\n  const context = buildLegacyCtx(headers(), cookies(), params, searchParams);\\r\n  const session = await getServerSession({ req: context.req });\\r\n\\r\n  if (!session?.user?.id) {\\r\n    redirect(\"/auth/login\");\\r\n  }\\r\n\\r\n  await ssrInit(context);\\r\n  const t = await getTranslate();\\r\n\\r\n  return (\\r\n    <ShellMainAppDir\\r\n      heading={t(\"event_types_page_title\")}\\r\n      subtitle={t(\"event_types_page_subtitle\")}\\r\n      CTA={<EventTypesCTA />}>\\r\n      <EventTypes />\\r\n    </ShellMainAppDir>\\r\n  );\\r\n};\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"eventtypes-component\",children:\"EventTypes component\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import EventTypes, { EventTypesCTA } from \"~/event-types/views/event-types-listing-view\";\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"~/\"}),\" is alias for \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/tree/main/apps/web/modules\",children:\"modules folder\"}),` that you can\\r\nfind in `,(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/tsconfig.json#L1C1-L6C28\",children:\"tsconfig.json\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`{\\r\n  \"extends\": \"@calcom/tsconfig/nextjs.json\",\\r\n  \"compilerOptions\": {\\r\n    \"baseUrl\": \".\",\\r\n    \"paths\": {\\r\n      \"~/*\": [\"modules/*\"],\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/9608669f98bb0952137ecec374ac7125717fc9db/apps/web/modules/event-types/views/event-types-listing-view.tsx#L611\",children:\"event-types-listing-view.tsx\"}),`\\r\nis a large file containing 1020 lines at the writing this guide. You will find the \"Edit\" button at `,(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/9608669f98bb0952137ecec374ac7125717fc9db/apps/web/modules/event-types/views/event-types-listing-view.tsx#L611\",children:\"line 611\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`<DropdownMenuContent>\\r\n  {!readOnly && (\\r\n    <DropdownMenuItem>\\r\n      <DropdownItem\\r\n        type=\"button\"\\r\n        data-testid={\\`event-type-edit-\\${type.id}\\`}\\r\n        StartIcon=\"pencil\"\\r\n        onClick={() => router.push(\\`/event-types/\\${type.id}\\`)}>\\r\n        {t(\"edit\")}\\r\n      </DropdownItem>\\r\n    </DropdownMenuItem>\\r\n  )}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:['On clicking \"Edit\", you are redirected to ',(0,n.jsx)(e.code,{children:\"/event-types/${some-id}\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert screenshot of - \",(0,n.jsx)(e.a,{href:\"https://app.cal.com/event-types/989456?tabName=setup\",children:\"https://app.cal.com/event-types/989456?tabName=setup\"}),\"]\"]}),`\n`,(0,n.jsxs)(e.p,{children:['By default, tabName is set to \"setup\" when you visit ',(0,n.jsx)(e.code,{children:\"event-types/{id}\"}),\" as a query param so the url becomes \",(0,n.jsx)(e.code,{children:\"event-types/{id}?tabName=setup\"})]}),`\n`,(0,n.jsx)(e.h2,{id:\"finding-the-route\",children:\"Finding the route\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"We need to find where this \",(0,n.jsx)(e.code,{children:\"event-types/{id}\"}),` dynamic route is in the cal.com codebase. This page is found at\\r\n`,(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/9608669f98bb0952137ecec374ac7125717fc9db/apps/web/app/(use-page-wrapper)/event-types/%5Btype%5D/page.tsx\",children:\"web/app/(use-page-wrapper)/event-types/[type]/page.tsx\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The below code snippet is picked from \",(0,n.jsx)(e.a,{href:\"\",children:\"event-types/[type]/page.tsx\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`...\\r\nimport EventTypePageWrapper from \"~/event-types/views/event-types-single-view\";\\r\n...\\r\nconst ServerPage = async ({ params, searchParams }: _PageProps) => {\\r\n  const legacyCtx = buildLegacyCtx(headers(), cookies(), params, searchParams);\\r\n  const props = await getData(legacyCtx);\\r\n\\r\n  return <EventTypePageWrapper {...props} />;\\r\n};\\r\n\\r\nexport default ServerPage;\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This page just returns a wrapper, EventTypePageWrapper, imported from \",(0,n.jsx)(e.code,{children:\"~/event-types/views/event-types-single-view\"}),`\\r\nWe know where to look for, i.e., in the modules folder`]}),`\n`,(0,n.jsx)(e.h2,{id:\"eventtypepagewrapper\",children:\"EventTypePageWrapper\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The below code is picked from \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-single-view.tsx#L7\",children:\"apps/web/modules/event-types/views/event-types-single-view.tsx\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`\"use client\";\\r\n\\r\nimport { EventType } from \"@calcom/atoms/monorepo\";\\r\n\\r\nimport type { PageProps } from \"@lib/event-types/[type]/getServerSideProps\";\\r\n\\r\nconst EventTypePageWrapper = ({ type, ...rest }: PageProps) => {\\r\n  return <EventType {...rest} id={type} />;\\r\n};\\r\n\\r\nexport default EventTypePageWrapper;\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Since \",(0,n.jsx)(e.code,{children:\"event-types/{id}\"}),` has multiple tabs, the code displaying these tabs is organized differently.\\r\nLet's follow along the code and see how EventType looks like.`]}),`\n`,(0,n.jsx)(e.h2,{id:\"eventtype\",children:\"EventType\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"EventType\"}),\" is imported from \",(0,n.jsx)(e.code,{children:\"@calcom/atoms/monorepo\"}),\". \",(0,n.jsx)(e.code,{children:\"@calcom/atoms\"}),` here is a package name.\\r\nTo find this package, we need to search for `,(0,n.jsx)(e.code,{children:\"@calcom/atoms\"}),\" in the \",(0,n.jsx)(e.code,{children:\"cal.com\"}),\" codebase.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"You will find the below search results for \",(0,n.jsx)(e.a,{href:\"https://github.com/search?q=repo%3Acalcom%2Fcal.com+package.json+%40calcom%2Fatoms&type=code\",children:'\"package.json @calcom/atoms\" in cal.com codebase'})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert screenshot of - \",(0,n.jsx)(e.a,{href:\"https://github.com/search?q=repo%3Acalcom%2Fcal.com+package.json+%40calcom%2Fatoms&type=code\",children:\"https://github.com/search?q=repo%3Acalcom%2Fcal.com+package.json+%40calcom%2Fatoms&type=code\"}),\"]\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/962f692e298c2498260baceb8659b0cc55452fe5/packages/platform/atoms/monorepo.ts#L16\",children:\"Line 16 in platform/atoms/monorepo\"}),`\\r\nexports `,(0,n.jsx)(e.code,{children:\"EventTypeWebWrapper as EventType\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Cal.com uses hashmap for the tabs found at \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/962f692e298c2498260baceb8659b0cc55452fe5/packages/platform/atoms/event-types/wrappers/EventTypeWebWrapper.tsx#L177\",children:\"line 177\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/962f692e298c2498260baceb8659b0cc55452fe5/packages/platform/atoms/event-types/wrappers/EventTypeWebWrapper.tsx#L177\",children:\"EventTypeWebWrapper\"}),`\\r\nhas 370 lines at the time of writing, since this guide is about state management, let's review the state\\r\nmanagement in setup tab.`]}),`\n`,(0,n.jsx)(e.h2,{id:\"state-management-in-eventsetuptab\",children:\"State management in EventSetupTab\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"You will find the below code at \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/tabs/setup/EventSetupTab.tsx#L59\",children:\"line 59\"}),\",\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const formMethods = useFormContext<FormValues>();\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"it tells us few things:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`useFormContext\\r\nuseFormContext is imported from \"react-hook-form\", found at `,(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/tabs/setup/EventSetupTab.tsx#L2C1-L2C62\",children:\"line 2\"}),`\\r\nas shown below:`]}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import { Controller, useFormContext } from \"react-hook-form\";\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Read more about \",(0,n.jsx)(e.a,{href:\"https://react-hook-form.com/docs/useformcontext\",children:\"useFormContext\"})]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"FormValues\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Follow along these below:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/962f692e298c2498260baceb8659b0cc55452fe5/packages/platform/atoms/event-types/wrappers/EventTypeWebWrapper.tsx#L330\",children:\"https://github.com/calcom/cal.com/blob/962f692e298c2498260baceb8659b0cc55452fe5/packages/platform/atoms/event-types/wrappers/EventTypeWebWrapper.tsx#L330\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/tabs/setup/EventSetupTab.tsx#L2C1-L2C62\",children:\"https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/tabs/setup/EventSetupTab.tsx#L2C1-L2C62\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/962f692e298c2498260baceb8659b0cc55452fe5/packages/features/eventtypes/components/EventType.tsx\",children:\"https://github.com/calcom/cal.com/blob/962f692e298c2498260baceb8659b0cc55452fe5/packages/features/eventtypes/components/EventType.tsx\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/EventTypeLayout.tsx#L53\",children:\"https://github.com/calcom/cal.com/blob/main/packages/features/eventtypes/components/EventTypeLayout.tsx#L53\"})}),`\n`]})]})}function d(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(p,{...t})}):p(t)}return w(x);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/cal-com/state-management/3-add-edit-event-type.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/cal-com/state-management/3-add-edit-event-type.mdx",
      "sourceFileName": "3-add-edit-event-type.mdx",
      "sourceFileDir": "guide/codebase-architecture/cal-com/state-management",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/cal-com/state-management/3-add-edit-event-type"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/cal-com/state-management/3-add-edit-event-type",
    "slugAsParams": "codebase-architecture/cal-com/state-management/3-add-edit-event-type"
  },
  {
    "title": "State management in Cal.com\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "# State management in Cal.com\r\n\r\nIn this guide, we will analyse how the state is managed in Cal.com.\r\n\r\nWe have to take a closer look at operations such as:\r\n1. Bookings listing page\r\n2. Event types listing page\r\n3. Add/Edit a new event type\r\n4. Add/Edit availability\r\n\r\nThese operations are specific to Cal.com, these operations vary based on an application. \r\nIn Lobechat, to understand how how state is managed, you would look at operations such as add a new \r\nassistant, loading a chat etc.,\r\n\r\nAt the time of writing this guide, Cal.com used pages route and with a migration in place to use \r\napp router. Through out these guides, you will see references pointing at pages router. Be sure to check \r\nout the [future folder in cal.com source](https://github.com/calcom/cal.com/tree/main/apps/web/app/future)\r\nas this shows the migration towards app folder. ",
      "code": "var Component=(()=>{var p=Object.create;var i=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),x=(t,e)=>{for(var a in e)i(t,a,{get:e[a],enumerable:!0})},s=(t,e,a,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of u(e))!w.call(t,o)&&o!==a&&i(t,o,{get:()=>e[o],enumerable:!(r=m(e,o))||r.enumerable});return t};var y=(t,e,a)=>(a=t!=null?p(g(t)):{},s(e||!t||!t.__esModule?i(a,\"default\",{value:t,enumerable:!0}):a,t)),C=t=>s(i({},\"__esModule\",{value:!0}),t);var c=f((k,l)=>{l.exports=_jsx_runtime});var b={};x(b,{default:()=>d,frontmatter:()=>_});var n=y(c()),_={title:\"State management in Cal.com\"};function h(t){let e={a:\"a\",h1:\"h1\",li:\"li\",ol:\"ol\",p:\"p\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:\"state-management-in-calcom\",children:\"State management in Cal.com\"}),`\n`,(0,n.jsx)(e.p,{children:\"In this guide, we will analyse how the state is managed in Cal.com.\"}),`\n`,(0,n.jsx)(e.p,{children:\"We have to take a closer look at operations such as:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Bookings listing page\"}),`\n`,(0,n.jsx)(e.li,{children:\"Event types listing page\"}),`\n`,(0,n.jsx)(e.li,{children:\"Add/Edit a new event type\"}),`\n`,(0,n.jsx)(e.li,{children:\"Add/Edit availability\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:`These operations are specific to Cal.com, these operations vary based on an application.\\r\nIn Lobechat, to understand how how state is managed, you would look at operations such as add a new\\r\nassistant, loading a chat etc.,`}),`\n`,(0,n.jsxs)(e.p,{children:[`At the time of writing this guide, Cal.com used pages route and with a migration in place to use\\r\napp router. Through out these guides, you will see references pointing at pages router. Be sure to check\\r\nout the `,(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/tree/main/apps/web/app/future\",children:\"future folder in cal.com source\"}),`\\r\nas this shows the migration towards app folder.`]})]})}function d(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(h,{...t})}):h(t)}return C(b);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/cal-com/state-management/introduction.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/cal-com/state-management/introduction.mdx",
      "sourceFileName": "introduction.mdx",
      "sourceFileDir": "guide/codebase-architecture/cal-com/state-management",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/cal-com/state-management/introduction"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/cal-com/state-management/introduction",
    "slugAsParams": "codebase-architecture/cal-com/state-management/introduction"
  },
  {
    "title": "API Layer in LobeChat\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\nIn this guide, you will learn the API layer used in [Lobe Chat](https://github.com/lobehub/lobe-chat/tree/main). \r\n\r\n🤯 Lobe Chat is an open-source, modern-design AI chat framework. Supports \r\n  Multi AI Providers( OpenAI / Claude 3 / Gemini / Ollama / Azure / DeepSeek), \r\nKnowledge Base (file upload / knowledge management / RAG ), Multi-Modals (Vision/TTS) and plugin system. \r\n  One-click FREE deployment of your private ChatGPT/ Claude application. \r\n\r\n# What's API Layer?\r\nIn the context of web applications, API layer means communicating with your server to get/mutate data.\r\nInspired by [Bulletproof React's API Layer](https://github.com/alan2207/bulletproof-react/blob/master/docs/api-layer.md)\r\nWe analyze the API Layer in the [Lobechat](https://github.com/lobehub/lobe-chat/tree/main). \r\n\r\n# Lobe Chat API Layer\r\nTo study the API Layer, we pick a page on https://chat-preview.lobehub.com/ and look at the source code except we are\r\nnarrowing down our expedition to focus on the API Layer.\r\n\r\n# Concepts you will learn:\r\nYou will be learning the API layer used in the Lobe Chat. \r\nRead through this guide to understand how Lobe Chat's API layer works.\r\n\r\n## Data fetched in Discover Home Page\r\n1. [Discover Home Page]\r\n(https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/discover/(list)/(home)/page.tsx)\r\n2. [DiscoverService](https://github.com/lobehub/lobe-chat/blob/main/src/server/services/discover/index.ts#L27)\r\n\r\nIn this guide, we will find out how the API layer is implemented in Discover page. You will learn how the data is fetched\r\nin the Discover page.\r\n\r\n[Insert a screenshot of Discover page - https://lobechat.com/discover]\r\n\r\nDiscover page has Home, Assistants, Plugins etc., tabs. For this guide, let's pick assistants tab and \r\nfind out how the data is fetched.\r\n\r\nIn the [Discover page.tsx](https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/discover/(list)/(home)/page.tsx),\r\nYou will find the below code snippet.\r\n\r\n```\r\nconst discoverService = new DiscoverService();\r\nconst assistantList = await discoverService.getAssistantList(locale);\r\nconst pluginList = await discoverService.getPluginList(locale);\r\nconst modelList = await discoverService.getModelList(locale);\r\n```\r\n### DiscoverService\r\n\r\n[DiscoverService](https://github.com/lobehub/lobe-chat/blob/main/src/server/services/discover/index.ts#L52) is class that is\r\ninstantiated using `new DiscoverService()`. You could also just export the functions from a service file but using a class\r\nin a service helps you organize your functions better as your functions are encapsulated in a class. This approach also make it\r\neasy to mock your service for testing purposes. \r\n\r\n### discoverService.getAssistantList(locale)\r\n\r\n```\r\ngetAssistantList = async (locale: Locales): Promise<DiscoverAssistantItem[]> => {\r\n    let res = await fetch(this.assistantStore.getAgentIndexUrl(locale), {\r\n      next: { revalidate },\r\n    });\r\n\r\n    if (!res.ok) {\r\n      res = await fetch(this.assistantStore.getAgentIndexUrl(DEFAULT_LANG), {\r\n        next: { revalidate },\r\n      });\r\n    }\r\n\r\n    if (!res.ok) return [];\r\n\r\n    const json = await res.json();\r\n\r\n    return json.agents;\r\n};\r\n```\r\nThis above code snippet is picked from [getAssistantList](https://github.com/lobehub/lobe-chat/blob/main/src/server/services/discover/index.ts#L52)\r\n\r\nThis function uses [fetch](https://nextjs.org/docs/app/api-reference/functions/fetch). Next.js extends the native Web \r\nfetch() API to allow each request on the server to set its own persistent caching semantics.\r\n\r\nLet's understand what this second param in the above fetch does.\r\n```\r\n{\r\n  next: { revalidate },\r\n}\r\n```\r\n[options.next.revalidate](https://nextjs.org/docs/app/api-reference/functions/fetch#optionsnextrevalidate) from the \r\nNext.js documentation.\r\n\r\nSet the cache lifetime of a resource (in seconds).\r\n1. false - Cache the resource indefinitely. Semantically equivalent to revalidate: Infinity. The HTTP cache may evict older resources over time.\r\n2. 0 - Prevent the resource from being cached.\r\n3. number - (in seconds) Specify the resource should have a cache lifetime of at most n seconds.\r\n\r\nso where's revalidate value coming from in [Discover service](https://github.com/lobehub/lobe-chat/blob/main/src/server/services/discover/index.ts#L25)?\r\nrevalidate is initialized at L25:\r\n\r\n```\r\nconst revalidate: number = 3600;\r\n```\r\nThis 3600 is in seconds which is 1 hour. getAssistantList has a cache lifetime of at most 1 hour.\r\n\r\n`assistantStore.getAgentIndexUrl` returns the URL used in the fetch API.\r\n\r\n[Insert a screenshot of https://github.com/lobehub/lobe-chat/blob/main/src/server/modules/AssistantStore/index.ts#L14]\r\n\r\n## References:\r\n1. https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/discover/(list)/(home)/page.tsx\r\n2. https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/discover/(list)/(home)/Client.tsx\r\n3. https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/discover/(list)/(home)/features/AssistantList.tsx\r\n4. https://github.com/lobehub/lobe-chat/blob/main/src/server/services/discover/index.ts#L28\r\n5. https://github.com/lobehub/lobe-chat/blob/main/src/server/modules/AssistantStore/index.ts\r\n\r\n## Data fetched in Chat Page\r\n\r\nData fetched in the Chat page is different to what you have seen in getAssistantList in discover service. \r\ngetAssistantList uses fetch, where as Chat uses `useSWR`. Let's find out how this is done.\r\n\r\n[insert screenshot of lobechat chat session page]\r\n\r\nYou will find useFetchSessions hook in [SessionListContent/DefaultMode.tsx](https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/chat/%40session/features/SessionListContent/DefaultMode.tsx#L29)\r\nuseFetchSession is in useSessionStore. API layer is tightly coupled with state management in Lobechat. We want to focus\r\nonly on API layer, check out the [state management in lobechat](link to lobechat state management).\r\n\r\n[Insert screenshot of https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/chat/%40session/features/SessionListContent/DefaultMode.tsx#L29]\r\n\r\n## useFetchSessions in session store:\r\nYou will find the below code for the useFetchSessions in [session/action.ts](https://github.com/lobehub/lobe-chat/blob/main/src/store/session/slices/session/action.ts#L200)\r\n\r\n```\r\nuseFetchSessions: (isLogin) =>\r\n    useClientDataSWR<ChatSessionList>(\r\n      [FETCH_SESSIONS_KEY, isLogin],\r\n      () => sessionService.getGroupedSessions(),\r\n      {\r\n        fallbackData: {\r\n          sessionGroups: [],\r\n          sessions: [],\r\n        },\r\n        onSuccess: (data) => {\r\n          if (\r\n            get().isSessionsFirstFetchFinished &&\r\n            isEqual(get().sessions, data.sessions) &&\r\n            isEqual(get().sessionGroups, data.sessionGroups)\r\n          )\r\n            return;\r\n\r\n          get().internal_processSessions(\r\n            data.sessions,\r\n            data.sessionGroups,\r\n            n('useFetchSessions/updateData') as any,\r\n          );\r\n          set({ isSessionsFirstFetchFinished: true }, false, n('useFetchSessions/onSuccess', data));\r\n        },\r\n        suspense: true,\r\n      },\r\n    ),\r\n```\r\n\r\nLooks compicated, let's break it down. It uses:\r\n\r\n1. useClientDataSWR\r\n\r\nuseClientDataSWR is imported from [libs/swr/index.ts](https://github.com/lobehub/lobe-chat/blob/main/src/libs/swr/index.ts#L22C14-L22C30)\r\n\r\n```\r\nexport const useClientDataSWR: SWRHook = (key, fetch, config) =>\r\n  useSWR(key, fetch, {\r\n    // default is 2000ms ,it makes the user's quick switch don't work correctly.\r\n    // Cause issue like this: https://github.com/lobehub/lobe-chat/issues/532\r\n    // we need to set it to 0.\r\n    dedupingInterval: 0,\r\n    focusThrottleInterval: 5 * 60 * 1000,\r\n    refreshWhenOffline: false,\r\n    revalidateOnFocus: true,\r\n    revalidateOnReconnect: true,\r\n    ...config,\r\n  });\r\n```\r\n\r\nuseSWR is a React hook for data fetching provided by [Vercel's SWR API](https://swr.vercel.app/).\r\nThe name “SWR” is derived from stale-while-revalidate, a HTTP cache invalidation strategy popularized by \r\nHTTP RFC 5861(opens in a new tab). SWR is a strategy to first return the data from cache (stale), then send \r\nthe fetch request (revalidate), and finally come with the up-to-date data.   \r\n\r\nLet's now understand what each of these options do by referring to the documentation:\r\na. dedupingInterval\r\n\r\n[SWR Docs](https://swr.vercel.app/docs/api#parameters) mentions this - dedupingInterval = 2000: dedupe requests with the same key in this time span in milliseconds \r\n\r\nbut Lobechat has this configured to 0 and it explains why with a nice comment.\r\n\r\n```\r\n// default is 2000ms ,it makes the user's quick switch don't work correctly.\r\n// Cause issue like this: https://github.com/lobehub/lobe-chat/issues/532\r\n// we need to set it to 0.\r\ndedupingInterval: 0,\r\n```\r\njust in case, if you were wondering what dedupe means, it is about removing duplicates.\r\n\r\nb. focusThrottleInterval:\r\n\r\n[SWR docs](https://swr.vercel.app/docs/api#parameters) provides this information about focusThrottleInterval - \r\nfocusThrottleInterval = 5000: only revalidate once during a time span in milliseconds\r\n\r\nIn the context of useSWR, the focusThrottleInterval option controls how frequently the data revalidation \r\nhappens when the window or tab regains focus.\r\n\r\n### ChatGPT's explanation:\r\n\r\nExplanation in the useSWR context:\r\nSWR's behavior with focus: By default, SWR will revalidate (i.e., refetch) the data whenever the user \r\nswitches back to the app or tab (when the window or tab regains focus). This is useful because it ensures that \r\nthe data displayed is up-to-date when the user returns to the app.\r\n\r\nfocusThrottleInterval = 5000: This option tells SWR to throttle the revalidation when focus changes. \r\nSpecifically, it will revalidate data at most once every 5000 milliseconds (or 5 seconds).\r\n\r\nIf a user quickly switches between tabs or focuses on the app multiple times in rapid succession, \r\nSWR will ensure that revalidation only happens once within that 5-second window, preventing excessive \r\nor redundant requests.\r\n\r\nWhat's the value that lobechat uses?\r\n```\r\nfocusThrottleInterval: 5 * 60 * 1000\r\n```\r\nConverting 5 * 60 * 1000 milliseconds, it is 5 minutes. What this means is that when you focus by revisiting lobechat\r\napplication, data is not refreshed until 5 minutes but by then you would visit different pages, differen chats \r\nand latest data might load already but that depends on the actions that you perform.\r\n\r\nc. refreshWhenOffline:\r\n\r\n### SWR documentation explanation:\r\nrefreshWhenOffline = false: polling when the browser is offline \r\n(determined by navigator.onLine), Read more about [refreshWhenOffline](https://swr.vercel.app/docs/api#parameters)\r\n\r\n### ChatGPT explanation:\r\nSWR offers an option to periodically refetch data in the background (polling), but when the browser \r\ngoes offline, trying to fetch data may be pointless. To prevent unnecessary requests, setting \r\n`refreshWhenOffline = false` ensures polling is paused when the browser is offline, \r\nsaving resources and avoiding failed fetch attempts.\r\n\r\n### What's the value that lobechat uses?\r\n\r\n```\r\nrefreshWhenOffline: false\r\n```\r\n\r\nd. revalidateOnFocus:\r\n\r\n### SWR documentation explanation:\r\nrevalidateOnFocus = true: automatically revalidate when window gets focused ([details](https://swr.vercel.app/docs/revalidation))\r\n\r\n### ChatGPT explanation:\r\n- Revalidate: In SWR, \"revalidate\" refers to refetching data from the source (e.g., an API) \r\nto ensure the data is still up-to-date.\r\n- Focus events: In web applications, a \"focus\" event occurs when the user returns to the browser window or tab, \r\neither after switching tabs, windows, or after minimizing and reopening the app.\r\n- revalidateOnFocus = true: This setting enables the app to automatically revalidate (refetch data) every time\r\nthe user switches back to the tab. By default, this is set to true in SWR, meaning the data will be refreshed every time the tab regains focus.\r\n\r\n### What's the value that lobechat uses?\r\n\r\n```\r\nrevalidateOnFocus: true,\r\n```\r\n\r\nd. revalidateOnReconnect:\r\n\r\n### SWR documentation explanation:\r\nrevalidateOnReconnect = true: automatically revalidate when the browser regains a network connection (via navigator.onLine) ([details](https://swr.vercel.app/docs/revalidation))\r\n\r\n### ChatGPT explanation:\r\n\r\n- Revalidate: In SWR, revalidation refers to refetching data from the server to ensure it's up-to-date.\r\n- Reconnect: This event happens when the browser loses and then regains internet connectivity. The browser \r\ndetects this change using the navigator.onLine property:\r\ntrue: Browser is online (connected to the internet).\r\nfalse: Browser is offline (disconnected from the internet).\r\n- revalidateOnReconnect = true: This setting ensures that whenever the browser switches from an offline state back to an \r\nonline state, SWR will automatically refetch the data.\r\n\r\n### What's the value that lobechat uses?\r\n\r\n```\r\nrevalidateOnReconnect: true\r\n```\r\n\r\n## Params:\r\nNow that we understand useClientDataSWR and its options, let's look at the params used. The first param is the key\r\n\r\n```\r\nuseClientDataSWR<ChatSessionList>(\r\n      [FETCH_SESSIONS_KEY, isLogin],\r\n```\r\n\r\nThe second param is the fetch function written in [sessionService.getGroupedSessions()](https://github.com/lobehub/lobe-chat/blob/main/src/services/session/server.ts#L49)\r\n\r\nThird params is the additional config passed to useClientDataSWR function.\r\n\r\nAt this point, we are introduced to the new unknown `sessionService`. Let's analyze sessionService.\r\n\r\n\r\n# References:\r\n1. [Session List](https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/chat/%40session/features/SessionListContent/DefaultMode.tsx#L29)\r\n2. [useFetchSessions](https://github.com/lobehub/lobe-chat/blob/main/src/store/session/slices/session/action.ts#L200)\r\n3. [useClientDataSWR](https://github.com/lobehub/lobe-chat/blob/main/src/libs/swr/index.ts#L22C14-L22C30)\r\n\r\n[C: sessionService]\r\n\r\nIn this guide, we analyze the [sessionService](https://github.com/lobehub/lobe-chat/blob/main/src/services/session/server.ts#L49),\r\nthat gets called in a store. \r\n\r\nThe way we approach this is that we pick a function, understand it and see where it leads us.\r\n\r\n# getGroupedSessions()\r\n\r\n[getGroupedSessions()](https://github.com/lobehub/lobe-chat/blob/main/src/services/session/server.ts#L49) has the below\r\ncode:\r\n\r\n```\r\ngetGroupedSessions(): Promise<ChatSessionList> {\r\n  return lambdaClient.session.getGroupedSessions.query();\r\n}\r\n```\r\n\r\nThe unknown here is lambdaClient. What could this be about? to find that out, you have to see where \r\nlambdaClient is imported from.\r\n\r\n```\r\nimport { lambdaClient } from '@/libs/trpc/client';\r\n```\r\n\r\nlambdaClient is imported from `@libs/trpc/client`. This tells us that Lobechat uses tRPC. What's TRPC?\r\n\r\n# tRPC\r\nMove fast and break nothing. tRPC provides end-to-end typesafe APIs for your fullstack application.\r\n\r\nSince Lobechat uses app router, you may want to read this [set up with React components guide](https://trpc.io/docs/client/react/server-components)\r\nto understand how the tRPC is configured in Lobechat codebase.\r\n\r\nWe refer to the steps provided in [tRPC Setup with React Components](https://trpc.io/docs/client/react/server-components) \r\nand find out how Lobechat configured tRPC.\r\n\r\nUseful links:\r\n1. [tRPC](https://trpc.io/)\r\n2. [tRPC quick start](https://trpc.io/docs/quickstart)\r\n3. [Next.js, pages router + tRPC setup](https://trpc.io/docs/client/nextjs/setup)\r\n4. [Next.js, app router + tRPC setup](https://trpc.io/docs/client/react/server-components)\r\n\r\n## Dependencies required\r\n\r\n[tRPC docs](https://trpc.io/docs/client/react/server-components#1-install-deps) tells us to install the \r\nfollowing dependencies in your project:\r\n\r\n- @trpc/server@next\r\n- @trpc/client@next\r\n- @trpc/react-query@next\r\n- @tanstack/react-query@latest\r\n- zod\r\n- client-only\r\n- server-only\r\n\r\nLobechat has the following packages installed, available in [package.json](https://github.com/lobehub/lobe-chat/blob/main/package.json)\r\n\r\n```\r\n\"@tanstack/react-query\": \"^5.59.15\",\r\n\"@trpc/client\": \"next\",\r\n\"@trpc/next\": \"next\",\r\n\"@trpc/react-query\": \"next\",\r\n\"@trpc/server\": \"next\",\r\n\"zod\": \"^3.23.8\",\r\n```\r\n\r\nThere is no 'client-only', 'server-only' packages in Lobechat package.json and has a package named `@trpc/next` installed.\r\n\r\n## Create a tRPC router\r\n\r\n### tRPC Documentation summary\r\nYou would need create a tRPC router as explained in [tRPC docs](https://trpc.io/docs/client/react/server-components#2-create-a-trpc-router)\r\n\r\nYou create the following files:\r\n\r\n- trpc/init.ts\r\n- trpc/routers/_app.ts\r\n- app/api/trpc/[trpc]/route.ts\r\n\r\n### Lobechat implementation:\r\n\r\n#### init.ts \r\nYou will find init.ts in [src/libs/trpc/init.ts](https://github.com/lobehub/lobe-chat/blob/main/src/libs/trpc/init.ts)\r\n```\r\nexport const trpc = initTRPC.context<Context>().create({\r\n  /**\r\n   * @link https://trpc.io/docs/v11/error-formatting\r\n   */\r\n  errorFormatter({ shape }) {\r\n    return shape;\r\n  },\r\n  /**\r\n   * @link https://trpc.io/docs/v11/data-transformers\r\n   */\r\n  transformer: superjson,\r\n});\r\n```\r\n\r\nOnly tRPC is exported, but if you were to look at init.ts provided in documentation, it has the below code:\r\n\r\n```\r\nconst t = initTRPC.create({\r\n  /**\r\n   * @see https://trpc.io/docs/server/data-transformers\r\n   */\r\n  // transformer: superjson,\r\n});\r\n// Base router and procedure helpers\r\nexport const createTRPCRouter = t.router;\r\nexport const baseProcedure = t.procedure;\r\n```\r\n\r\nExamples provided in documentation exports router and procedure but Lobechat only exports `trpc` which is `t` in tRPC\r\ndocumentation example.\r\n\r\n#### routers\r\nIn the tRPC documentation, routers are defined in `trpc/routers/_app.ts`.\r\n\r\n```\r\nimport { z } from 'zod';\r\nimport { baseProcedure, createTRPCRouter } from '../init';\r\nexport const appRouter = createTRPCRouter({\r\n  hello: baseProcedure\r\n    .input(\r\n      z.object({\r\n        text: z.string(),\r\n      }),\r\n    )\r\n    .query((opts) => {\r\n      return {\r\n        greeting: `hello ${opts.input.text}`,\r\n      };\r\n    }),\r\n});\r\n// export type definition of API\r\nexport type AppRouter = typeof appRouter;\r\n```\r\n\r\nLobechat has a folder named routers in [server folder](https://github.com/lobehub/lobe-chat/tree/main/src/server/routers),\r\nWe chose [lambda/session.ts](https://github.com/lobehub/lobe-chat/blob/main/src/server/routers/lambda/session.ts) inside \r\nserver folder for explanation in this guide.\r\n\r\nFor you to register a route, you need trpc.router. This is imported from `@/lib/trpc`.\r\n\r\n```\r\nimport { authedProcedure, publicProcedure, router } from '@/libs/trpc';\r\n```\r\n\r\nFor example, [getSessions](https://github.com/lobehub/lobe-chat/blob/main/src/server/routers/lambda/session.ts#L92) \r\nis registered with the router as shown below:\r\n\r\n```\r\ngetSessions: sessionProcedure\r\n    .input(\r\n      z.object({\r\n        current: z.number().optional(),\r\n        pageSize: z.number().optional(),\r\n      }),\r\n    )\r\n    .query(async ({ input, ctx }) => {\r\n      const { current, pageSize } = input;\r\n\r\n      return ctx.sessionModel.query({ current, pageSize });\r\n    }),\r\n```\r\n\r\nwe have now been introduced to sessionModel that makes the database calls, we will learn more about sessionModel in the \r\nnext article.\r\n\r\n[sessionProcedure](https://github.com/lobehub/lobe-chat/blob/main/src/server/routers/lambda/session.ts#L13) is defined \r\nafter the imports in lambda/session.ts as shown below:\r\n\r\n```\r\nconst sessionProcedure = authedProcedure.use(async (opts) => {\r\n  const { ctx } = opts;\r\n\r\n  return opts.next({\r\n    ctx: {\r\n      sessionGroupModel: new SessionGroupModel(ctx.userId),\r\n      sessionModel: new SessionModel(ctx.userId),\r\n    },\r\n  });\r\n});\r\n```\r\n\r\nauthedProcedure is from `@libs/trpc`.\r\n\r\n```\r\n// procedure that asserts that the user is logged in\r\nexport const authedProcedure = trpc.procedure.use(userAuth);\r\n```\r\n\r\n[C: SessionModel]\r\n\r\nBased on the example, getSessions, we picked in the previous article, `sessionModel.query` is used. `query` function in\r\nsessionModel has the below code:\r\n\r\n```\r\nasync query({ current = 0, pageSize = 9999 } = {}) {\r\n    const offset = current * pageSize;\r\n\r\n    return serverDB.query.sessions.findMany({\r\n      limit: pageSize,\r\n      offset,\r\n      orderBy: [desc(sessions.updatedAt)],\r\n      where: and(eq(sessions.userId, this.userId), not(eq(sessions.slug, INBOX_SESSION_ID))),\r\n      with: { agentsToSessions: { columns: {}, with: { agent: true } }, group: true },\r\n    });\r\n}\r\n```\r\n\r\nUnknown here is serverDB. serverDB is imported from [database/server/core/db](https://github.com/lobehub/lobe-chat/blob/main/src/database/server/core/db.ts);\r\n\r\n```\r\nimport { serverDB } from '@/database/server/core/db';\r\n```\r\n\r\nIn Lobechat's tRPC procedures, models are used as an abstraction instead of directly dealing with database calls. \r\n\r\n[C: Database Core API]\r\n\r\nIn the previous chapter, we learnt that model uses serverDB imported from `@/database/server/core/db`. In this chapter, we \r\nanalyze the Lobechat's database core API.\r\n\r\nThe below imports are picked from [database/server/core/db.ts](https://github.com/lobehub/lobe-chat/blob/main/src/database/server/core/db.ts)\r\n\r\n```\r\nimport { Pool as NeonPool, neonConfig } from '@neondatabase/serverless';\r\nimport { NeonDatabase, drizzle as neonDrizzle } from 'drizzle-orm/neon-serverless';\r\nimport { drizzle as nodeDrizzle } from 'drizzle-orm/node-postgres';\r\nimport { Pool as NodePool } from 'pg';\r\nimport ws from 'ws';\r\n\r\nimport { serverDBEnv } from '@/config/db';\r\nimport { isServerMode } from '@/const/version';\r\n\r\nimport * as schema from '../schemas/lobechat';\r\n```\r\n\r\nYou can tell from the imports that Lobechat uses [Drizzle ORM](https://orm.drizzle.team/) and [Neon database](https://neon.tech/).\r\nCheck out this [Drizzle with Neon tutorial](https://orm.drizzle.team/docs/tutorials/drizzle-with-neon) to find out more.\r\nThis tutorial shows how to connect to Neon database using Drizzle.\r\n\r\n```\r\nimport { drizzle } from \"drizzle-orm/neon-http\";\r\nimport { neon } from \"@neondatabase/serverless\";\r\nimport { config } from \"dotenv\";\r\nconfig({ path: \".env\" }); // or .env.local\r\nconst sql = neon(process.env.DATABASE_URL!);\r\nexport const db = drizzle({ client: sql });\r\n```\r\n\r\nLobechat has additional checks as to which drizzle ORM is used. For example, in the below code:\r\n\r\n```\r\nif (serverDBEnv.DATABASE_DRIVER === 'node') {\r\n    const client = new NodePool({ connectionString });\r\n    return nodeDrizzle(client, { schema });\r\n}\r\n```\r\n\r\nnodeDrizzle here is imported from `drizzle-orm/node-postgres`.\r\n\r\nserverDBenv is imported from config/db.ts\r\n\r\n```\r\nimport { createEnv } from '@t3-oss/env-nextjs';\r\nimport { z } from 'zod';\r\n\r\nexport const getServerDBConfig = () => {\r\n  return createEnv({\r\n    client: {\r\n      NEXT_PUBLIC_ENABLED_SERVER_SERVICE: z.boolean(),\r\n    },\r\n    runtimeEnv: {\r\n      DATABASE_DRIVER: process.env.DATABASE_DRIVER || 'neon',\r\n      DATABASE_TEST_URL: process.env.DATABASE_TEST_URL,\r\n      DATABASE_URL: process.env.DATABASE_URL,\r\n\r\n      DISABLE_REMOVE_GLOBAL_FILE: process.env.DISABLE_REMOVE_GLOBAL_FILE === '1',\r\n\r\n      KEY_VAULTS_SECRET: process.env.KEY_VAULTS_SECRET,\r\n\r\n      NEXT_PUBLIC_ENABLED_SERVER_SERVICE: process.env.NEXT_PUBLIC_SERVICE_MODE === 'server',\r\n    },\r\n    server: {\r\n      DATABASE_DRIVER: z.enum(['neon', 'node']),\r\n      DATABASE_TEST_URL: z.string().optional(),\r\n      DATABASE_URL: z.string().optional(),\r\n\r\n      DISABLE_REMOVE_GLOBAL_FILE: z.boolean().optional(),\r\n\r\n      KEY_VAULTS_SECRET: z.string().optional(),\r\n    },\r\n  });\r\n};\r\n\r\nexport const serverDBEnv = getServerDBConfig();\r\n```\r\n\r\ngetServerDBConfig uses createEnv from [@t3-oss/env-nextjs](https://github.com/t3-oss/t3-env).\r\n\r\nFinally, neonDrizzle is returned from this function - getDBInstance().\r\n\r\n```\r\nconst client = new NeonPool({ connectionString });\r\nreturn neonDrizzle(client, { schema });\r\n```\r\n\r\nschema in the above code snippet is imported from `schemas/lobechat` file.\r\n\r\n# session.ts Schema\r\n\r\nSince Lobechat uses Drizzle, we picked [schema/lobechat/session.ts](https://github.com/lobehub/lobe-chat/blob/main/src/database/server/schemas/lobechat/session.ts)\r\nas an example.\r\n\r\nimports used are:\r\n\r\n```\r\nimport { boolean, integer, pgTable, text, unique, uniqueIndex, varchar } from 'drizzle-orm/pg-core';\r\nimport { createInsertSchema } from 'drizzle-zod';\r\n```\r\n\r\nSession table defined:\r\n\r\n```\r\nexport const sessions = pgTable(\r\n  'sessions',\r\n  {\r\n    id: text('id')\r\n      .$defaultFn(() => idGenerator('sessions'))\r\n      .primaryKey(),\r\n    slug: varchar('slug', { length: 100 })\r\n      .notNull()\r\n      .$defaultFn(() => randomSlug()),\r\n    title: text('title'),\r\n    description: text('description'),\r\n    avatar: text('avatar'),\r\n    backgroundColor: text('background_color'),\r\n\r\n    type: text('type', { enum: ['agent', 'group'] }).default('agent'),\r\n\r\n    userId: text('user_id')\r\n      .references(() => users.id, { onDelete: 'cascade' })\r\n      .notNull(),\r\n    groupId: text('group_id').references(() => sessionGroups.id, { onDelete: 'set null' }),\r\n    clientId: text('client_id'),\r\n    pinned: boolean('pinned').default(false),\r\n\r\n    createdAt: createdAt(),\r\n    updatedAt: updatedAt(),\r\n  },\r\n  (t) => ({\r\n    slugUserIdUnique: uniqueIndex('slug_user_id_unique').on(t.slug, t.userId),\r\n\r\n    clientIdUnique: unique('sessions_client_id_user_id_unique').on(t.clientId, t.userId),\r\n  }),\r\n);\r\n```\r\n\r\nYou also want to make sure to define your schema path in the [drizzle.config.ts](https://github.com/lobehub/lobe-chat/blob/main/drizzle.config.ts)",
      "code": "var Component=(()=>{var p=Object.create;var s=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var v=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=>{for(var r in e)s(t,r,{get:e[r],enumerable:!0})},a=(t,e,r,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of b(e))!f.call(t,i)&&i!==r&&s(t,i,{get:()=>e[i],enumerable:!(o=u(e,i))||o.enumerable});return t};var w=(t,e,r)=>(r=t!=null?p(m(t)):{},a(e||!t||!t.__esModule?s(r,\"default\",{value:t,enumerable:!0}):r,t)),S=t=>a(s({},\"__esModule\",{value:!0}),t);var h=v((R,c)=>{c.exports=_jsx_runtime});var y={};g(y,{default:()=>d,frontmatter:()=>x});var n=w(h()),x={title:\"API Layer in LobeChat\"};function l(t){let e={a:\"a\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",h4:\"h4\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"In this guide, you will learn the API layer used in \",(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/tree/main\",children:\"Lobe Chat\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:`\\u{1F92F} Lobe Chat is an open-source, modern-design AI chat framework. Supports\\r\nMulti AI Providers( OpenAI / Claude 3 / Gemini / Ollama / Azure / DeepSeek),\\r\nKnowledge Base (file upload / knowledge management / RAG ), Multi-Modals (Vision/TTS) and plugin system.\\r\nOne-click FREE deployment of your private ChatGPT/ Claude application.`}),`\n`,(0,n.jsx)(e.h1,{id:\"whats-api-layer\",children:\"What's API Layer?\"}),`\n`,(0,n.jsxs)(e.p,{children:[`In the context of web applications, API layer means communicating with your server to get/mutate data.\\r\nInspired by `,(0,n.jsx)(e.a,{href:\"https://github.com/alan2207/bulletproof-react/blob/master/docs/api-layer.md\",children:\"Bulletproof React's API Layer\"}),`\\r\nWe analyze the API Layer in the `,(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/tree/main\",children:\"Lobechat\"}),\".\"]}),`\n`,(0,n.jsx)(e.h1,{id:\"lobe-chat-api-layer\",children:\"Lobe Chat API Layer\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"To study the API Layer, we pick a page on \",(0,n.jsx)(e.a,{href:\"https://chat-preview.lobehub.com/\",children:\"https://chat-preview.lobehub.com/\"}),` and look at the source code except we are\\r\nnarrowing down our expedition to focus on the API Layer.`]}),`\n`,(0,n.jsx)(e.h1,{id:\"concepts-you-will-learn\",children:\"Concepts you will learn:\"}),`\n`,(0,n.jsx)(e.p,{children:`You will be learning the API layer used in the Lobe Chat.\\r\nRead through this guide to understand how Lobe Chat's API layer works.`}),`\n`,(0,n.jsx)(e.h2,{id:\"data-fetched-in-discover-home-page\",children:\"Data fetched in Discover Home Page\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`[Discover Home Page]\\r\n(`,(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/discover/(list)/(home)/page.tsx\",children:\"https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/discover/(list)/(home)/page.tsx\"}),\")\"]}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/server/services/discover/index.ts#L27\",children:\"DiscoverService\"})}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:`In this guide, we will find out how the API layer is implemented in Discover page. You will learn how the data is fetched\\r\nin the Discover page.`}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert a screenshot of Discover page - \",(0,n.jsx)(e.a,{href:\"https://lobechat.com/discover\",children:\"https://lobechat.com/discover\"}),\"]\"]}),`\n`,(0,n.jsx)(e.p,{children:`Discover page has Home, Assistants, Plugins etc., tabs. For this guide, let's pick assistants tab and\\r\nfind out how the data is fetched.`}),`\n`,(0,n.jsxs)(e.p,{children:[\"In the \",(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/discover/(list)/(home)/page.tsx\",children:\"Discover page.tsx\"}),`,\\r\nYou will find the below code snippet.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const discoverService = new DiscoverService();\\r\nconst assistantList = await discoverService.getAssistantList(locale);\\r\nconst pluginList = await discoverService.getPluginList(locale);\\r\nconst modelList = await discoverService.getModelList(locale);\n`})}),`\n`,(0,n.jsx)(e.h3,{id:\"discoverservice\",children:\"DiscoverService\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/server/services/discover/index.ts#L52\",children:\"DiscoverService\"}),` is class that is\\r\ninstantiated using `,(0,n.jsx)(e.code,{children:\"new DiscoverService()\"}),`. You could also just export the functions from a service file but using a class\\r\nin a service helps you organize your functions better as your functions are encapsulated in a class. This approach also make it\\r\neasy to mock your service for testing purposes.`]}),`\n`,(0,n.jsx)(e.h3,{id:\"discoverservicegetassistantlistlocale\",children:\"discoverService.getAssistantList(locale)\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`getAssistantList = async (locale: Locales): Promise<DiscoverAssistantItem[]> => {\\r\n    let res = await fetch(this.assistantStore.getAgentIndexUrl(locale), {\\r\n      next: { revalidate },\\r\n    });\\r\n\\r\n    if (!res.ok) {\\r\n      res = await fetch(this.assistantStore.getAgentIndexUrl(DEFAULT_LANG), {\\r\n        next: { revalidate },\\r\n      });\\r\n    }\\r\n\\r\n    if (!res.ok) return [];\\r\n\\r\n    const json = await res.json();\\r\n\\r\n    return json.agents;\\r\n};\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This above code snippet is picked from \",(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/server/services/discover/index.ts#L52\",children:\"getAssistantList\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"This function uses \",(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/app/api-reference/functions/fetch\",children:\"fetch\"}),`. Next.js extends the native Web\\r\nfetch() API to allow each request on the server to set its own persistent caching semantics.`]}),`\n`,(0,n.jsx)(e.p,{children:\"Let's understand what this second param in the above fetch does.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`{\\r\n  next: { revalidate },\\r\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/app/api-reference/functions/fetch#optionsnextrevalidate\",children:\"options.next.revalidate\"}),` from the\\r\nNext.js documentation.`]}),`\n`,(0,n.jsx)(e.p,{children:\"Set the cache lifetime of a resource (in seconds).\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"false - Cache the resource indefinitely. Semantically equivalent to revalidate: Infinity. The HTTP cache may evict older resources over time.\"}),`\n`,(0,n.jsx)(e.li,{children:\"0 - Prevent the resource from being cached.\"}),`\n`,(0,n.jsx)(e.li,{children:\"number - (in seconds) Specify the resource should have a cache lifetime of at most n seconds.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"so where's revalidate value coming from in \",(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/server/services/discover/index.ts#L25\",children:\"Discover service\"}),`?\\r\nrevalidate is initialized at L25:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const revalidate: number = 3600;\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"This 3600 is in seconds which is 1 hour. getAssistantList has a cache lifetime of at most 1 hour.\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"assistantStore.getAgentIndexUrl\"}),\" returns the URL used in the fetch API.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert a screenshot of \",(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/server/modules/AssistantStore/index.ts#L14\",children:\"https://github.com/lobehub/lobe-chat/blob/main/src/server/modules/AssistantStore/index.ts#L14\"}),\"]\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"references\",children:\"References:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/discover/(list)/(home)/page.tsx\",children:\"https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/discover/(list)/(home)/page.tsx\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/discover/(list)/(home)/Client.tsx\",children:\"https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/discover/(list)/(home)/Client.tsx\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/discover/(list)/(home)/features/AssistantList.tsx\",children:\"https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/discover/(list)/(home)/features/AssistantList.tsx\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/server/services/discover/index.ts#L28\",children:\"https://github.com/lobehub/lobe-chat/blob/main/src/server/services/discover/index.ts#L28\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/server/modules/AssistantStore/index.ts\",children:\"https://github.com/lobehub/lobe-chat/blob/main/src/server/modules/AssistantStore/index.ts\"})}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"data-fetched-in-chat-page\",children:\"Data fetched in Chat Page\"}),`\n`,(0,n.jsxs)(e.p,{children:[`Data fetched in the Chat page is different to what you have seen in getAssistantList in discover service.\\r\ngetAssistantList uses fetch, where as Chat uses `,(0,n.jsx)(e.code,{children:\"useSWR\"}),\". Let's find out how this is done.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"[insert screenshot of lobechat chat session page]\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"You will find useFetchSessions hook in \",(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/chat/%40session/features/SessionListContent/DefaultMode.tsx#L29\",children:\"SessionListContent/DefaultMode.tsx\"}),`\\r\nuseFetchSession is in useSessionStore. API layer is tightly coupled with state management in Lobechat. We want to focus\\r\nonly on API layer, check out the [state management in lobechat](link to lobechat state management).`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert screenshot of \",(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/chat/%40session/features/SessionListContent/DefaultMode.tsx#L29\",children:\"https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/chat/%40session/features/SessionListContent/DefaultMode.tsx#L29\"}),\"]\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"usefetchsessions-in-session-store\",children:\"useFetchSessions in session store:\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"You will find the below code for the useFetchSessions in \",(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/store/session/slices/session/action.ts#L200\",children:\"session/action.ts\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`useFetchSessions: (isLogin) =>\\r\n    useClientDataSWR<ChatSessionList>(\\r\n      [FETCH_SESSIONS_KEY, isLogin],\\r\n      () => sessionService.getGroupedSessions(),\\r\n      {\\r\n        fallbackData: {\\r\n          sessionGroups: [],\\r\n          sessions: [],\\r\n        },\\r\n        onSuccess: (data) => {\\r\n          if (\\r\n            get().isSessionsFirstFetchFinished &&\\r\n            isEqual(get().sessions, data.sessions) &&\\r\n            isEqual(get().sessionGroups, data.sessionGroups)\\r\n          )\\r\n            return;\\r\n\\r\n          get().internal_processSessions(\\r\n            data.sessions,\\r\n            data.sessionGroups,\\r\n            n('useFetchSessions/updateData') as any,\\r\n          );\\r\n          set({ isSessionsFirstFetchFinished: true }, false, n('useFetchSessions/onSuccess', data));\\r\n        },\\r\n        suspense: true,\\r\n      },\\r\n    ),\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Looks compicated, let's break it down. It uses:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"useClientDataSWR\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"useClientDataSWR is imported from \",(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/libs/swr/index.ts#L22C14-L22C30\",children:\"libs/swr/index.ts\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`export const useClientDataSWR: SWRHook = (key, fetch, config) =>\\r\n  useSWR(key, fetch, {\\r\n    // default is 2000ms ,it makes the user's quick switch don't work correctly.\\r\n    // Cause issue like this: https://github.com/lobehub/lobe-chat/issues/532\\r\n    // we need to set it to 0.\\r\n    dedupingInterval: 0,\\r\n    focusThrottleInterval: 5 * 60 * 1000,\\r\n    refreshWhenOffline: false,\\r\n    revalidateOnFocus: true,\\r\n    revalidateOnReconnect: true,\\r\n    ...config,\\r\n  });\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"useSWR is a React hook for data fetching provided by \",(0,n.jsx)(e.a,{href:\"https://swr.vercel.app/\",children:\"Vercel's SWR API\"}),`.\\r\nThe name \\u201CSWR\\u201D is derived from stale-while-revalidate, a HTTP cache invalidation strategy popularized by\\r\nHTTP RFC 5861(opens in a new tab). SWR is a strategy to first return the data from cache (stale), then send\\r\nthe fetch request (revalidate), and finally come with the up-to-date data.`]}),`\n`,(0,n.jsx)(e.p,{children:`Let's now understand what each of these options do by referring to the documentation:\\r\na. dedupingInterval`}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://swr.vercel.app/docs/api#parameters\",children:\"SWR Docs\"}),\" mentions this - dedupingInterval = 2000: dedupe requests with the same key in this time span in milliseconds\"]}),`\n`,(0,n.jsx)(e.p,{children:\"but Lobechat has this configured to 0 and it explains why with a nice comment.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`// default is 2000ms ,it makes the user's quick switch don't work correctly.\\r\n// Cause issue like this: https://github.com/lobehub/lobe-chat/issues/532\\r\n// we need to set it to 0.\\r\ndedupingInterval: 0,\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"just in case, if you were wondering what dedupe means, it is about removing duplicates.\"}),`\n`,(0,n.jsx)(e.p,{children:\"b. focusThrottleInterval:\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://swr.vercel.app/docs/api#parameters\",children:\"SWR docs\"}),` provides this information about focusThrottleInterval -\\r\nfocusThrottleInterval = 5000: only revalidate once during a time span in milliseconds`]}),`\n`,(0,n.jsx)(e.p,{children:`In the context of useSWR, the focusThrottleInterval option controls how frequently the data revalidation\\r\nhappens when the window or tab regains focus.`}),`\n`,(0,n.jsx)(e.h3,{id:\"chatgpts-explanation\",children:\"ChatGPT's explanation:\"}),`\n`,(0,n.jsx)(e.p,{children:`Explanation in the useSWR context:\\r\nSWR's behavior with focus: By default, SWR will revalidate (i.e., refetch) the data whenever the user\\r\nswitches back to the app or tab (when the window or tab regains focus). This is useful because it ensures that\\r\nthe data displayed is up-to-date when the user returns to the app.`}),`\n`,(0,n.jsx)(e.p,{children:`focusThrottleInterval = 5000: This option tells SWR to throttle the revalidation when focus changes.\\r\nSpecifically, it will revalidate data at most once every 5000 milliseconds (or 5 seconds).`}),`\n`,(0,n.jsx)(e.p,{children:`If a user quickly switches between tabs or focuses on the app multiple times in rapid succession,\\r\nSWR will ensure that revalidation only happens once within that 5-second window, preventing excessive\\r\nor redundant requests.`}),`\n`,(0,n.jsx)(e.p,{children:\"What's the value that lobechat uses?\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`focusThrottleInterval: 5 * 60 * 1000\n`})}),`\n`,(0,n.jsx)(e.p,{children:`Converting 5 * 60 * 1000 milliseconds, it is 5 minutes. What this means is that when you focus by revisiting lobechat\\r\napplication, data is not refreshed until 5 minutes but by then you would visit different pages, differen chats\\r\nand latest data might load already but that depends on the actions that you perform.`}),`\n`,(0,n.jsx)(e.p,{children:\"c. refreshWhenOffline:\"}),`\n`,(0,n.jsx)(e.h3,{id:\"swr-documentation-explanation\",children:\"SWR documentation explanation:\"}),`\n`,(0,n.jsxs)(e.p,{children:[`refreshWhenOffline = false: polling when the browser is offline\\r\n(determined by navigator.onLine), Read more about `,(0,n.jsx)(e.a,{href:\"https://swr.vercel.app/docs/api#parameters\",children:\"refreshWhenOffline\"})]}),`\n`,(0,n.jsx)(e.h3,{id:\"chatgpt-explanation\",children:\"ChatGPT explanation:\"}),`\n`,(0,n.jsxs)(e.p,{children:[`SWR offers an option to periodically refetch data in the background (polling), but when the browser\\r\ngoes offline, trying to fetch data may be pointless. To prevent unnecessary requests, setting\\r\n`,(0,n.jsx)(e.code,{children:\"refreshWhenOffline = false\"}),` ensures polling is paused when the browser is offline,\\r\nsaving resources and avoiding failed fetch attempts.`]}),`\n`,(0,n.jsx)(e.h3,{id:\"whats-the-value-that-lobechat-uses\",children:\"What's the value that lobechat uses?\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`refreshWhenOffline: false\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"d. revalidateOnFocus:\"}),`\n`,(0,n.jsx)(e.h3,{id:\"swr-documentation-explanation-1\",children:\"SWR documentation explanation:\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"revalidateOnFocus = true: automatically revalidate when window gets focused (\",(0,n.jsx)(e.a,{href:\"https://swr.vercel.app/docs/revalidation\",children:\"details\"}),\")\"]}),`\n`,(0,n.jsx)(e.h3,{id:\"chatgpt-explanation-1\",children:\"ChatGPT explanation:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:`Revalidate: In SWR, \"revalidate\" refers to refetching data from the source (e.g., an API)\\r\nto ensure the data is still up-to-date.`}),`\n`,(0,n.jsx)(e.li,{children:`Focus events: In web applications, a \"focus\" event occurs when the user returns to the browser window or tab,\\r\neither after switching tabs, windows, or after minimizing and reopening the app.`}),`\n`,(0,n.jsx)(e.li,{children:`revalidateOnFocus = true: This setting enables the app to automatically revalidate (refetch data) every time\\r\nthe user switches back to the tab. By default, this is set to true in SWR, meaning the data will be refreshed every time the tab regains focus.`}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"whats-the-value-that-lobechat-uses-1\",children:\"What's the value that lobechat uses?\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`revalidateOnFocus: true,\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"d. revalidateOnReconnect:\"}),`\n`,(0,n.jsx)(e.h3,{id:\"swr-documentation-explanation-2\",children:\"SWR documentation explanation:\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"revalidateOnReconnect = true: automatically revalidate when the browser regains a network connection (via navigator.onLine) (\",(0,n.jsx)(e.a,{href:\"https://swr.vercel.app/docs/revalidation\",children:\"details\"}),\")\"]}),`\n`,(0,n.jsx)(e.h3,{id:\"chatgpt-explanation-2\",children:\"ChatGPT explanation:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Revalidate: In SWR, revalidation refers to refetching data from the server to ensure it's up-to-date.\"}),`\n`,(0,n.jsx)(e.li,{children:`Reconnect: This event happens when the browser loses and then regains internet connectivity. The browser\\r\ndetects this change using the navigator.onLine property:\\r\ntrue: Browser is online (connected to the internet).\\r\nfalse: Browser is offline (disconnected from the internet).`}),`\n`,(0,n.jsx)(e.li,{children:`revalidateOnReconnect = true: This setting ensures that whenever the browser switches from an offline state back to an\\r\nonline state, SWR will automatically refetch the data.`}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"whats-the-value-that-lobechat-uses-2\",children:\"What's the value that lobechat uses?\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`revalidateOnReconnect: true\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"params\",children:\"Params:\"}),`\n`,(0,n.jsx)(e.p,{children:\"Now that we understand useClientDataSWR and its options, let's look at the params used. The first param is the key\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`useClientDataSWR<ChatSessionList>(\\r\n      [FETCH_SESSIONS_KEY, isLogin],\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The second param is the fetch function written in \",(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/services/session/server.ts#L49\",children:\"sessionService.getGroupedSessions()\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"Third params is the additional config passed to useClientDataSWR function.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"At this point, we are introduced to the new unknown \",(0,n.jsx)(e.code,{children:\"sessionService\"}),\". Let's analyze sessionService.\"]}),`\n`,(0,n.jsx)(e.h1,{id:\"references-1\",children:\"References:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/chat/%40session/features/SessionListContent/DefaultMode.tsx#L29\",children:\"Session List\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/store/session/slices/session/action.ts#L200\",children:\"useFetchSessions\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/libs/swr/index.ts#L22C14-L22C30\",children:\"useClientDataSWR\"})}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"[C: sessionService]\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this guide, we analyze the \",(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/services/session/server.ts#L49\",children:\"sessionService\"}),`,\\r\nthat gets called in a store.`]}),`\n`,(0,n.jsx)(e.p,{children:\"The way we approach this is that we pick a function, understand it and see where it leads us.\"}),`\n`,(0,n.jsx)(e.h1,{id:\"getgroupedsessions\",children:\"getGroupedSessions()\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/services/session/server.ts#L49\",children:\"getGroupedSessions()\"}),` has the below\\r\ncode:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`getGroupedSessions(): Promise<ChatSessionList> {\\r\n  return lambdaClient.session.getGroupedSessions.query();\\r\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:`The unknown here is lambdaClient. What could this be about? to find that out, you have to see where\\r\nlambdaClient is imported from.`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import { lambdaClient } from '@/libs/trpc/client';\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"lambdaClient is imported from \",(0,n.jsx)(e.code,{children:\"@libs/trpc/client\"}),\". This tells us that Lobechat uses tRPC. What's TRPC?\"]}),`\n`,(0,n.jsx)(e.h1,{id:\"trpc\",children:\"tRPC\"}),`\n`,(0,n.jsx)(e.p,{children:\"Move fast and break nothing. tRPC provides end-to-end typesafe APIs for your fullstack application.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Since Lobechat uses app router, you may want to read this \",(0,n.jsx)(e.a,{href:\"https://trpc.io/docs/client/react/server-components\",children:\"set up with React components guide\"}),`\\r\nto understand how the tRPC is configured in Lobechat codebase.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We refer to the steps provided in \",(0,n.jsx)(e.a,{href:\"https://trpc.io/docs/client/react/server-components\",children:\"tRPC Setup with React Components\"}),`\\r\nand find out how Lobechat configured tRPC.`]}),`\n`,(0,n.jsx)(e.p,{children:\"Useful links:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://trpc.io/\",children:\"tRPC\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://trpc.io/docs/quickstart\",children:\"tRPC quick start\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://trpc.io/docs/client/nextjs/setup\",children:\"Next.js, pages router + tRPC setup\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://trpc.io/docs/client/react/server-components\",children:\"Next.js, app router + tRPC setup\"})}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"dependencies-required\",children:\"Dependencies required\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://trpc.io/docs/client/react/server-components#1-install-deps\",children:\"tRPC docs\"}),` tells us to install the\\r\nfollowing dependencies in your project:`]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"@trpc/server@next\"}),`\n`,(0,n.jsx)(e.li,{children:\"@trpc/client@next\"}),`\n`,(0,n.jsx)(e.li,{children:\"@trpc/react-query@next\"}),`\n`,(0,n.jsx)(e.li,{children:\"@tanstack/react-query@latest\"}),`\n`,(0,n.jsx)(e.li,{children:\"zod\"}),`\n`,(0,n.jsx)(e.li,{children:\"client-only\"}),`\n`,(0,n.jsx)(e.li,{children:\"server-only\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Lobechat has the following packages installed, available in \",(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/package.json\",children:\"package.json\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`\"@tanstack/react-query\": \"^5.59.15\",\\r\n\"@trpc/client\": \"next\",\\r\n\"@trpc/next\": \"next\",\\r\n\"@trpc/react-query\": \"next\",\\r\n\"@trpc/server\": \"next\",\\r\n\"zod\": \"^3.23.8\",\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"There is no 'client-only', 'server-only' packages in Lobechat package.json and has a package named \",(0,n.jsx)(e.code,{children:\"@trpc/next\"}),\" installed.\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"create-a-trpc-router\",children:\"Create a tRPC router\"}),`\n`,(0,n.jsx)(e.h3,{id:\"trpc-documentation-summary\",children:\"tRPC Documentation summary\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"You would need create a tRPC router as explained in \",(0,n.jsx)(e.a,{href:\"https://trpc.io/docs/client/react/server-components#2-create-a-trpc-router\",children:\"tRPC docs\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"You create the following files:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"trpc/init.ts\"}),`\n`,(0,n.jsx)(e.li,{children:\"trpc/routers/_app.ts\"}),`\n`,(0,n.jsx)(e.li,{children:\"app/api/trpc/[trpc]/route.ts\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"lobechat-implementation\",children:\"Lobechat implementation:\"}),`\n`,(0,n.jsx)(e.h4,{id:\"initts\",children:\"init.ts\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"You will find init.ts in \",(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/libs/trpc/init.ts\",children:\"src/libs/trpc/init.ts\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`export const trpc = initTRPC.context<Context>().create({\\r\n  /**\\r\n   * @link https://trpc.io/docs/v11/error-formatting\\r\n   */\\r\n  errorFormatter({ shape }) {\\r\n    return shape;\\r\n  },\\r\n  /**\\r\n   * @link https://trpc.io/docs/v11/data-transformers\\r\n   */\\r\n  transformer: superjson,\\r\n});\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Only tRPC is exported, but if you were to look at init.ts provided in documentation, it has the below code:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const t = initTRPC.create({\\r\n  /**\\r\n   * @see https://trpc.io/docs/server/data-transformers\\r\n   */\\r\n  // transformer: superjson,\\r\n});\\r\n// Base router and procedure helpers\\r\nexport const createTRPCRouter = t.router;\\r\nexport const baseProcedure = t.procedure;\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Examples provided in documentation exports router and procedure but Lobechat only exports \",(0,n.jsx)(e.code,{children:\"trpc\"}),\" which is \",(0,n.jsx)(e.code,{children:\"t\"}),` in tRPC\\r\ndocumentation example.`]}),`\n`,(0,n.jsx)(e.h4,{id:\"routers\",children:\"routers\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In the tRPC documentation, routers are defined in \",(0,n.jsx)(e.code,{children:\"trpc/routers/_app.ts\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import { z } from 'zod';\\r\nimport { baseProcedure, createTRPCRouter } from '../init';\\r\nexport const appRouter = createTRPCRouter({\\r\n  hello: baseProcedure\\r\n    .input(\\r\n      z.object({\\r\n        text: z.string(),\\r\n      }),\\r\n    )\\r\n    .query((opts) => {\\r\n      return {\\r\n        greeting: \\`hello \\${opts.input.text}\\`,\\r\n      };\\r\n    }),\\r\n});\\r\n// export type definition of API\\r\nexport type AppRouter = typeof appRouter;\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Lobechat has a folder named routers in \",(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/tree/main/src/server/routers\",children:\"server folder\"}),`,\\r\nWe chose `,(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/server/routers/lambda/session.ts\",children:\"lambda/session.ts\"}),` inside\\r\nserver folder for explanation in this guide.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"For you to register a route, you need trpc.router. This is imported from \",(0,n.jsx)(e.code,{children:\"@/lib/trpc\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import { authedProcedure, publicProcedure, router } from '@/libs/trpc';\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"For example, \",(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/server/routers/lambda/session.ts#L92\",children:\"getSessions\"}),`\\r\nis registered with the router as shown below:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`getSessions: sessionProcedure\\r\n    .input(\\r\n      z.object({\\r\n        current: z.number().optional(),\\r\n        pageSize: z.number().optional(),\\r\n      }),\\r\n    )\\r\n    .query(async ({ input, ctx }) => {\\r\n      const { current, pageSize } = input;\\r\n\\r\n      return ctx.sessionModel.query({ current, pageSize });\\r\n    }),\n`})}),`\n`,(0,n.jsx)(e.p,{children:`we have now been introduced to sessionModel that makes the database calls, we will learn more about sessionModel in the\\r\nnext article.`}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/server/routers/lambda/session.ts#L13\",children:\"sessionProcedure\"}),` is defined\\r\nafter the imports in lambda/session.ts as shown below:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const sessionProcedure = authedProcedure.use(async (opts) => {\\r\n  const { ctx } = opts;\\r\n\\r\n  return opts.next({\\r\n    ctx: {\\r\n      sessionGroupModel: new SessionGroupModel(ctx.userId),\\r\n      sessionModel: new SessionModel(ctx.userId),\\r\n    },\\r\n  });\\r\n});\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"authedProcedure is from \",(0,n.jsx)(e.code,{children:\"@libs/trpc\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`// procedure that asserts that the user is logged in\\r\nexport const authedProcedure = trpc.procedure.use(userAuth);\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"[C: SessionModel]\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Based on the example, getSessions, we picked in the previous article, \",(0,n.jsx)(e.code,{children:\"sessionModel.query\"}),\" is used. \",(0,n.jsx)(e.code,{children:\"query\"}),` function in\\r\nsessionModel has the below code:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`async query({ current = 0, pageSize = 9999 } = {}) {\\r\n    const offset = current * pageSize;\\r\n\\r\n    return serverDB.query.sessions.findMany({\\r\n      limit: pageSize,\\r\n      offset,\\r\n      orderBy: [desc(sessions.updatedAt)],\\r\n      where: and(eq(sessions.userId, this.userId), not(eq(sessions.slug, INBOX_SESSION_ID))),\\r\n      with: { agentsToSessions: { columns: {}, with: { agent: true } }, group: true },\\r\n    });\\r\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Unknown here is serverDB. serverDB is imported from \",(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/database/server/core/db.ts\",children:\"database/server/core/db\"}),\";\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import { serverDB } from '@/database/server/core/db';\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"In Lobechat's tRPC procedures, models are used as an abstraction instead of directly dealing with database calls.\"}),`\n`,(0,n.jsx)(e.p,{children:\"[C: Database Core API]\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In the previous chapter, we learnt that model uses serverDB imported from \",(0,n.jsx)(e.code,{children:\"@/database/server/core/db\"}),`. In this chapter, we\\r\nanalyze the Lobechat's database core API.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The below imports are picked from \",(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/database/server/core/db.ts\",children:\"database/server/core/db.ts\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import { Pool as NeonPool, neonConfig } from '@neondatabase/serverless';\\r\nimport { NeonDatabase, drizzle as neonDrizzle } from 'drizzle-orm/neon-serverless';\\r\nimport { drizzle as nodeDrizzle } from 'drizzle-orm/node-postgres';\\r\nimport { Pool as NodePool } from 'pg';\\r\nimport ws from 'ws';\\r\n\\r\nimport { serverDBEnv } from '@/config/db';\\r\nimport { isServerMode } from '@/const/version';\\r\n\\r\nimport * as schema from '../schemas/lobechat';\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can tell from the imports that Lobechat uses \",(0,n.jsx)(e.a,{href:\"https://orm.drizzle.team/\",children:\"Drizzle ORM\"}),\" and \",(0,n.jsx)(e.a,{href:\"https://neon.tech/\",children:\"Neon database\"}),`.\\r\nCheck out this `,(0,n.jsx)(e.a,{href:\"https://orm.drizzle.team/docs/tutorials/drizzle-with-neon\",children:\"Drizzle with Neon tutorial\"}),` to find out more.\\r\nThis tutorial shows how to connect to Neon database using Drizzle.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import { drizzle } from \"drizzle-orm/neon-http\";\\r\nimport { neon } from \"@neondatabase/serverless\";\\r\nimport { config } from \"dotenv\";\\r\nconfig({ path: \".env\" }); // or .env.local\\r\nconst sql = neon(process.env.DATABASE_URL!);\\r\nexport const db = drizzle({ client: sql });\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Lobechat has additional checks as to which drizzle ORM is used. For example, in the below code:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`if (serverDBEnv.DATABASE_DRIVER === 'node') {\\r\n    const client = new NodePool({ connectionString });\\r\n    return nodeDrizzle(client, { schema });\\r\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"nodeDrizzle here is imported from \",(0,n.jsx)(e.code,{children:\"drizzle-orm/node-postgres\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"serverDBenv is imported from config/db.ts\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import { createEnv } from '@t3-oss/env-nextjs';\\r\nimport { z } from 'zod';\\r\n\\r\nexport const getServerDBConfig = () => {\\r\n  return createEnv({\\r\n    client: {\\r\n      NEXT_PUBLIC_ENABLED_SERVER_SERVICE: z.boolean(),\\r\n    },\\r\n    runtimeEnv: {\\r\n      DATABASE_DRIVER: process.env.DATABASE_DRIVER || 'neon',\\r\n      DATABASE_TEST_URL: process.env.DATABASE_TEST_URL,\\r\n      DATABASE_URL: process.env.DATABASE_URL,\\r\n\\r\n      DISABLE_REMOVE_GLOBAL_FILE: process.env.DISABLE_REMOVE_GLOBAL_FILE === '1',\\r\n\\r\n      KEY_VAULTS_SECRET: process.env.KEY_VAULTS_SECRET,\\r\n\\r\n      NEXT_PUBLIC_ENABLED_SERVER_SERVICE: process.env.NEXT_PUBLIC_SERVICE_MODE === 'server',\\r\n    },\\r\n    server: {\\r\n      DATABASE_DRIVER: z.enum(['neon', 'node']),\\r\n      DATABASE_TEST_URL: z.string().optional(),\\r\n      DATABASE_URL: z.string().optional(),\\r\n\\r\n      DISABLE_REMOVE_GLOBAL_FILE: z.boolean().optional(),\\r\n\\r\n      KEY_VAULTS_SECRET: z.string().optional(),\\r\n    },\\r\n  });\\r\n};\\r\n\\r\nexport const serverDBEnv = getServerDBConfig();\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"getServerDBConfig uses createEnv from \",(0,n.jsx)(e.a,{href:\"https://github.com/t3-oss/t3-env\",children:\"@t3-oss/env-nextjs\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Finally, neonDrizzle is returned from this function - getDBInstance().\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const client = new NeonPool({ connectionString });\\r\nreturn neonDrizzle(client, { schema });\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"schema in the above code snippet is imported from \",(0,n.jsx)(e.code,{children:\"schemas/lobechat\"}),\" file.\"]}),`\n`,(0,n.jsx)(e.h1,{id:\"sessionts-schema\",children:\"session.ts Schema\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Since Lobechat uses Drizzle, we picked \",(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/database/server/schemas/lobechat/session.ts\",children:\"schema/lobechat/session.ts\"}),`\\r\nas an example.`]}),`\n`,(0,n.jsx)(e.p,{children:\"imports used are:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import { boolean, integer, pgTable, text, unique, uniqueIndex, varchar } from 'drizzle-orm/pg-core';\\r\nimport { createInsertSchema } from 'drizzle-zod';\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Session table defined:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`export const sessions = pgTable(\\r\n  'sessions',\\r\n  {\\r\n    id: text('id')\\r\n      .$defaultFn(() => idGenerator('sessions'))\\r\n      .primaryKey(),\\r\n    slug: varchar('slug', { length: 100 })\\r\n      .notNull()\\r\n      .$defaultFn(() => randomSlug()),\\r\n    title: text('title'),\\r\n    description: text('description'),\\r\n    avatar: text('avatar'),\\r\n    backgroundColor: text('background_color'),\\r\n\\r\n    type: text('type', { enum: ['agent', 'group'] }).default('agent'),\\r\n\\r\n    userId: text('user_id')\\r\n      .references(() => users.id, { onDelete: 'cascade' })\\r\n      .notNull(),\\r\n    groupId: text('group_id').references(() => sessionGroups.id, { onDelete: 'set null' }),\\r\n    clientId: text('client_id'),\\r\n    pinned: boolean('pinned').default(false),\\r\n\\r\n    createdAt: createdAt(),\\r\n    updatedAt: updatedAt(),\\r\n  },\\r\n  (t) => ({\\r\n    slugUserIdUnique: uniqueIndex('slug_user_id_unique').on(t.slug, t.userId),\\r\n\\r\n    clientIdUnique: unique('sessions_client_id_user_id_unique').on(t.clientId, t.userId),\\r\n  }),\\r\n);\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"You also want to make sure to define your schema path in the \",(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/drizzle.config.ts\",children:\"drizzle.config.ts\"})]})]})}function d(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(l,{...t})}):l(t)}return S(y);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/lobechat/api-layer/introduction.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/lobechat/api-layer/introduction.mdx",
      "sourceFileName": "introduction.mdx",
      "sourceFileDir": "guide/codebase-architecture/lobechat/api-layer",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/lobechat/api-layer/introduction"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/lobechat/api-layer/introduction",
    "slugAsParams": "codebase-architecture/lobechat/api-layer/introduction"
  },
  {
    "title": "Component structure in Lobechat\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\nIn this guide, you will learn how components are organized in Lobechat.\r\n\r\nBy components, here we mean the building blocks of the user interface or more precisely, the building blocks used in a page.\r\n\r\nOur focus is primarily on the folder structure and file naming conventions used. \r\nIn order to establish a common pattern and to understand components structure better, \r\nwe will study few pages/routes in the Lobechat.\r\n\r\nOur approach is to pick a route, locate the route in the source code and from there on, we will look at \r\n1. Where the imported components are located in a project\r\n2. Folder structure and naming conventions used  \r\n3. How the \"page\" is built using these imported components\r\n\r\nThere will be screenshots and links pointing to folders and components that belong to this project. \r\n\r\nwe will select some routes as shown in the following and discuss the components structure used.\r\n\r\n1. Chat route\r\n2. discover/(list) route group\r\n  a. Home sub-route\r\n  b. Assistants sub-route\r\n  c. Models sub-route\r\n3. (auth) route group\r\n\r\nUse this free guide to learn how components are organized in Lobechat.\r\n\r\n[C: Lobechat]\r\n[Chat route]\r\n\r\nChat route in lobechat uses Next.js [parallel routes](https://nextjs.org/docs/app/building-your-application/routing/parallel-routes)\r\nwith named [slots](https://nextjs.org/docs/app/building-your-application/routing/parallel-routes#slots) \r\nand [default.js](https://nextjs.org/docs/app/building-your-application/routing/parallel-routes#defaultjs)\r\n\r\nSo how is the folder structure, below shown, is responsible to load the chat route?\r\n\r\n[Insert screenshot of https://github.com/lobehub/lobe-chat/tree/main/src/app/(main)/chat folder structure]\r\n\r\nhttps://lobechat.com/chat has parallel routes for:\r\n1. Sessions list\r\n2. Conversation\r\n\r\n# @sessions slot\r\n\r\n[@session](https://github.com/lobehub/lobe-chat/tree/main/src/app/(main)/chat/%40session) is responsible to show the list of \r\nsessions.\r\n\r\n[Insert screenshot of sessions - https://lobechat.com/chat?session=inbox]\r\n\r\nIs this slot using a page.tsx? Next.js documentation states that:\r\n\r\n\"\r\nSlots are not route segments and do not affect the URL structure. For example, for /@analytics/views, the URL will \r\nbe /views since @analytics is a slot.\r\n\"\r\n\r\nYou can create a route by creating a folder and adding a page.tsx, but does Lobechat do that? [@session](https://github.com/lobehub/lobe-chat/tree/main/src/app/(main)/chat/%40session) \r\nfolder does not have any page.tsx\r\n\r\n|-- _layout/\r\n|-- features/\r\n|-- default.ts\r\n\r\n## default.ts \r\n\r\nYou can define a default.js file to render as a fallback for unmatched slots during \r\nthe initial load or full-page reload. since there's no page.tsx or sub route defined inside Lobechat @session folder's [default.ts](https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/chat/%40session/default.tsx)\r\n\r\n### @session/default.tsx\r\n\r\n```\r\nimport { Suspense, lazy } from 'react';\r\n\r\nimport ServerLayout from '@/components/server/ServerLayout';\r\n\r\nimport Desktop from './_layout/Desktop';\r\nimport Mobile from './_layout/Mobile';\r\nimport SessionHydration from './features/SessionHydration';\r\nimport SkeletonList from './features/SkeletonList';\r\n\r\nconst SessionListContent = lazy(() => import('./features/SessionListContent'));\r\n\r\nconst Layout = ServerLayout({ Desktop, Mobile });\r\n\r\nconst Session = () => {\r\n  return (\r\n    <>\r\n      <Layout>\r\n        <Suspense fallback={<SkeletonList />}>\r\n          <SessionListContent />\r\n        </Suspense>\r\n      </Layout>\r\n      <SessionHydration />\r\n    </>\r\n  );\r\n};\r\n\r\nSession.displayName = 'Session';\r\n\r\nexport default Session;\r\n```\r\n\r\n## _layout folder\r\n\r\n_layout folder is common standard across the Lobechat routes and is used for responsiveness as it contains Desktop and Mobile\r\nfolders.\r\n\r\n```\r\nimport Desktop from './_layout/Desktop';\r\nimport Mobile from './_layout/Mobile';\r\n...\r\nconst Layout = ServerLayout({ Desktop, Mobile });\r\n...\r\n```\r\n\r\nWhy such a pattern? well, we have concluded that this is because Lobechat uses [antd-style, a css-in-js library](https://github.com/ant-design/antd-style). \r\n\r\n```\r\n// @session/features/SessionList.tsx\r\n...\r\nimport { createStyles } from 'antd-style';\r\n...\r\nconst useStyles = createStyles(({ css }) => ({\r\n  paragraph: css`\r\n    height: 12px !important;\r\n    margin-block-start: 12px !important;\r\n\r\n    > li {\r\n      height: 12px !important;\r\n    }\r\n  `,\r\n```",
      "code": "var Component=(()=>{var u=Object.create;var s=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=>{for(var o in e)s(t,o,{get:e[o],enumerable:!0})},a=(t,e,o,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!f.call(t,r)&&r!==o&&s(t,r,{get:()=>e[r],enumerable:!(i=p(e,r))||i.enumerable});return t};var x=(t,e,o)=>(o=t!=null?u(b(t)):{},a(e||!t||!t.__esModule?s(o,\"default\",{value:t,enumerable:!0}):o,t)),L=t=>a(s({},\"__esModule\",{value:!0}),t);var c=g((j,l)=>{l.exports=_jsx_runtime});var w={};y(w,{default:()=>d,frontmatter:()=>S});var n=x(c()),S={title:\"Component structure in Lobechat\"};function h(t){let e={a:\"a\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"In this guide, you will learn how components are organized in Lobechat.\"}),`\n`,(0,n.jsx)(e.p,{children:\"By components, here we mean the building blocks of the user interface or more precisely, the building blocks used in a page.\"}),`\n`,(0,n.jsx)(e.p,{children:`Our focus is primarily on the folder structure and file naming conventions used.\\r\nIn order to establish a common pattern and to understand components structure better,\\r\nwe will study few pages/routes in the Lobechat.`}),`\n`,(0,n.jsx)(e.p,{children:\"Our approach is to pick a route, locate the route in the source code and from there on, we will look at\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Where the imported components are located in a project\"}),`\n`,(0,n.jsx)(e.li,{children:\"Folder structure and naming conventions used\"}),`\n`,(0,n.jsx)(e.li,{children:'How the \"page\" is built using these imported components'}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"There will be screenshots and links pointing to folders and components that belong to this project.\"}),`\n`,(0,n.jsx)(e.p,{children:\"we will select some routes as shown in the following and discuss the components structure used.\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Chat route\"}),`\n`,(0,n.jsx)(e.li,{children:`discover/(list) route group\\r\na. Home sub-route\\r\nb. Assistants sub-route\\r\nc. Models sub-route`}),`\n`,(0,n.jsx)(e.li,{children:\"(auth) route group\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Use this free guide to learn how components are organized in Lobechat.\"}),`\n`,(0,n.jsx)(e.p,{children:`[C: Lobechat]\\r\n[Chat route]`}),`\n`,(0,n.jsxs)(e.p,{children:[\"Chat route in lobechat uses Next.js \",(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/app/building-your-application/routing/parallel-routes\",children:\"parallel routes\"}),`\\r\nwith named `,(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/app/building-your-application/routing/parallel-routes#slots\",children:\"slots\"}),`\\r\nand `,(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/app/building-your-application/routing/parallel-routes#defaultjs\",children:\"default.js\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"So how is the folder structure, below shown, is responsible to load the chat route?\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert screenshot of \",(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/tree/main/src/app/(main)/chat\",children:\"https://github.com/lobehub/lobe-chat/tree/main/src/app/(main)/chat\"}),\" folder structure]\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://lobechat.com/chat\",children:\"https://lobechat.com/chat\"}),\" has parallel routes for:\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Sessions list\"}),`\n`,(0,n.jsx)(e.li,{children:\"Conversation\"}),`\n`]}),`\n`,(0,n.jsx)(e.h1,{id:\"sessions-slot\",children:\"@sessions slot\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/tree/main/src/app/(main)/chat/%40session\",children:\"@session\"}),` is responsible to show the list of\\r\nsessions.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert screenshot of sessions - \",(0,n.jsx)(e.a,{href:\"https://lobechat.com/chat?session=inbox\",children:\"https://lobechat.com/chat?session=inbox\"}),\"]\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Is this slot using a page.tsx? Next.js documentation states that:\"}),`\n`,(0,n.jsx)(e.p,{children:`\"\\r\nSlots are not route segments and do not affect the URL structure. For example, for /@analytics/views, the URL will\\r\nbe /views since @analytics is a slot.\\r\n\"`}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can create a route by creating a folder and adding a page.tsx, but does Lobechat do that? \",(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/tree/main/src/app/(main)/chat/%40session\",children:\"@session\"}),`\\r\nfolder does not have any page.tsx`]}),`\n`,(0,n.jsx)(e.p,{children:`|-- _layout/\\r\n|-- features/\\r\n|-- default.ts`}),`\n`,(0,n.jsx)(e.h2,{id:\"defaultts\",children:\"default.ts\"}),`\n`,(0,n.jsxs)(e.p,{children:[`You can define a default.js file to render as a fallback for unmatched slots during\\r\nthe initial load or full-page reload. since there's no page.tsx or sub route defined inside Lobechat @session folder's `,(0,n.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/chat/%40session/default.tsx\",children:\"default.ts\"})]}),`\n`,(0,n.jsx)(e.h3,{id:\"sessiondefaulttsx\",children:\"@session/default.tsx\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import { Suspense, lazy } from 'react';\\r\n\\r\nimport ServerLayout from '@/components/server/ServerLayout';\\r\n\\r\nimport Desktop from './_layout/Desktop';\\r\nimport Mobile from './_layout/Mobile';\\r\nimport SessionHydration from './features/SessionHydration';\\r\nimport SkeletonList from './features/SkeletonList';\\r\n\\r\nconst SessionListContent = lazy(() => import('./features/SessionListContent'));\\r\n\\r\nconst Layout = ServerLayout({ Desktop, Mobile });\\r\n\\r\nconst Session = () => {\\r\n  return (\\r\n    <>\\r\n      <Layout>\\r\n        <Suspense fallback={<SkeletonList />}>\\r\n          <SessionListContent />\\r\n        </Suspense>\\r\n      </Layout>\\r\n      <SessionHydration />\\r\n    </>\\r\n  );\\r\n};\\r\n\\r\nSession.displayName = 'Session';\\r\n\\r\nexport default Session;\n`})}),`\n`,(0,n.jsx)(e.h2,{id:\"_layout-folder\",children:\"_layout folder\"}),`\n`,(0,n.jsx)(e.p,{children:`_layout folder is common standard across the Lobechat routes and is used for responsiveness as it contains Desktop and Mobile\\r\nfolders.`}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import Desktop from './_layout/Desktop';\\r\nimport Mobile from './_layout/Mobile';\\r\n...\\r\nconst Layout = ServerLayout({ Desktop, Mobile });\\r\n...\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Why such a pattern? well, we have concluded that this is because Lobechat uses \",(0,n.jsx)(e.a,{href:\"https://github.com/ant-design/antd-style\",children:\"antd-style, a css-in-js library\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`// @session/features/SessionList.tsx\\r\n...\\r\nimport { createStyles } from 'antd-style';\\r\n...\\r\nconst useStyles = createStyles(({ css }) => ({\\r\n  paragraph: css\\`\\r\n    height: 12px !important;\\r\n    margin-block-start: 12px !important;\\r\n\\r\n    > li {\\r\n      height: 12px !important;\\r\n    }\\r\n  \\`,\n`})})]})}function d(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(h,{...t})}):h(t)}return L(w);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/lobechat/component-structure/introduction.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/lobechat/component-structure/introduction.mdx",
      "sourceFileName": "introduction.mdx",
      "sourceFileDir": "guide/codebase-architecture/lobechat/component-structure",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/lobechat/component-structure/introduction"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/lobechat/component-structure/introduction",
    "slugAsParams": "codebase-architecture/lobechat/component-structure/introduction"
  },
  {
    "title": "Component structure in Lobechat\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\n# Directory Structure\r\n\r\nThe directory structure of LobeChat is as follows:\r\n\r\n```bash\r\nsrc\r\n├── app        # Main logic and state management related code for the application\r\n├── components # Reusable UI components\r\n├── config     # Application configuration files, including client-side and server-side environment variables\r\n├── const      # Used to define constants, such as action types, route names, etc.\r\n├── features   # Function modules related to business functions, such as agent settings, plugin development pop-ups, etc.\r\n├── hooks      # Custom utility hooks reused throughout the application\r\n├── layout     # Application layout components, such as navigation bars, sidebars, etc.\r\n├── locales    # Internationalization language files\r\n├── services   # Encapsulated backend service interfaces, such as HTTP requests\r\n├── store      # Zustand store for state management\r\n├── types      # TypeScript type definition files\r\n└── utils      # Common utility functions\r\n```\r\n\r\n## app\r\n\r\nIn the `app` folder, we organize each route page according to the app router's [Route Groups](https://nextjs.org/docs/app/building-your-application/routing/route-groups) to separately handle the implementation of desktop and mobile code. Taking the file structure of the `welcome` page as an example:\r\n\r\n```bash\r\nwelcome\r\n├── (desktop)               # Desktop implementation\r\n│   ├── features            # Desktop-specific features\r\n│   ├── index.tsx           # Main entry file for desktop\r\n│   └── layout.desktop.tsx  # Desktop layout component\r\n├── (mobile)                # Mobile implementation\r\n│   ├── features            # Mobile-specific features\r\n│   ├── index.tsx           # Main entry file for mobile\r\n│   └── layout.mobile.tsx   # Mobile layout component\r\n├── features                # This folder contains features code shared by both desktop and mobile, such as the Banner component\r\n│   └── Banner\r\n└── page.tsx                # This is the main entry file for the page, used to load desktop or mobile code based on the device type\r\n```\r\n\r\nIn this way, we can clearly distinguish and manage desktop and mobile code, while also easily reusing code required on both devices, thereby improving development efficiency and maintaining code cleanliness and maintainability.\r\n\r\n## chat \r\n\r\nIn the `chat` folder, we organize this `chat` route according to app router's [Route Group](https://nextjs.org/docs/app/building-your-application/routing/route-groups)\r\nand the [Parallel Routes](https://nextjs.org/docs/app/building-your-application/routing/parallel-routes). \r\nWe use parallel routing to render `@sessions` and `(workspace)` is a route group that contains parallel\r\nroutes such as `@conversation`, ",
      "code": "var Component=(()=>{var h=Object.create;var t=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var g=(l,e)=>()=>(e||l((e={exports:{}}).exports,e),e.exports),f=(l,e)=>{for(var o in e)t(l,o,{get:e[o],enumerable:!0})},c=(l,e,o,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of y(e))!m.call(l,s)&&s!==o&&t(l,s,{get:()=>e[s],enumerable:!(r=p(e,s))||r.enumerable});return l};var b=(l,e,o)=>(o=l!=null?h(u(l)):{},c(e||!l||!l.__esModule?t(o,\"default\",{value:l,enumerable:!0}):o,l)),W=l=>c(t({},\"__esModule\",{value:!0}),l);var i=g((k,a)=>{a.exports=_jsx_runtime});var x={};f(x,{default:()=>d,frontmatter:()=>N});var n=b(i()),N={title:\"Component structure in Lobechat\"};function F(l){let e={a:\"a\",code:\"code\",div:\"div\",h1:\"h1\",h2:\"h2\",p:\"p\",pre:\"pre\",span:\"span\",...l.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h1,{id:\"directory-structure\",children:\"Directory Structure\"}),`\n`,(0,n.jsx)(e.p,{children:\"The directory structure of LobeChat is as follows:\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"bash\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"bash\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"src\"})}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"\\u251C\\u2500\\u2500\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" app\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"        #\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Main logic and state management related code for the application\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"\\u251C\\u2500\\u2500\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" components\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" #\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Reusable UI components\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"\\u251C\\u2500\\u2500\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" config\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"     #\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Application configuration files, including client-side and server-side environment variables\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"\\u251C\\u2500\\u2500\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" const\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"      #\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Used to define constants, such as action types, route names, etc.\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"\\u251C\\u2500\\u2500\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" features\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   #\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Function modules related to business functions, such as agent settings, plugin development pop-ups, etc.\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"\\u251C\\u2500\\u2500\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" hooks\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"      #\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Custom utility hooks reused throughout the application\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"\\u251C\\u2500\\u2500\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" layout\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"     #\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Application layout components, such as navigation bars, sidebars, etc.\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"\\u251C\\u2500\\u2500\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" locales\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"    #\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Internationalization language files\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"\\u251C\\u2500\\u2500\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" services\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   #\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Encapsulated backend service interfaces, such as HTTP requests\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"\\u251C\\u2500\\u2500\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" store\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"      #\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Zustand store for state management\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"\\u251C\\u2500\\u2500\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" types\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"      #\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" TypeScript type definition files\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"\\u2514\\u2500\\u2500\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" utils\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"      #\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Common utility functions\"})]})]})})}),`\n`,(0,n.jsx)(e.h2,{id:\"app\",children:\"app\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In the \",(0,n.jsx)(e.code,{children:\"app\"}),\" folder, we organize each route page according to the app router's \",(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/app/building-your-application/routing/route-groups\",children:\"Route Groups\"}),\" to separately handle the implementation of desktop and mobile code. Taking the file structure of the \",(0,n.jsx)(e.code,{children:\"welcome\"}),\" page as an example:\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"bash\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"bash\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"welcome\"})}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"\\u251C\\u2500\\u2500\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" (desktop)               \"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"#\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Desktop implementation\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"\\u2502\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   \\u251C\\u2500\\u2500\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" features\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"            #\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Desktop-specific features\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"\\u2502\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   \\u251C\\u2500\\u2500\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" index.tsx\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"           #\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Main entry file for desktop\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"\\u2502\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   \\u2514\\u2500\\u2500\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" layout.desktop.tsx\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"  #\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Desktop layout component\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"\\u251C\\u2500\\u2500\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" (mobile)                \"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"#\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Mobile implementation\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"\\u2502\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   \\u251C\\u2500\\u2500\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" features\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"            #\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Mobile-specific features\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"\\u2502\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   \\u251C\\u2500\\u2500\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" index.tsx\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"           #\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Main entry file for mobile\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"\\u2502\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   \\u2514\\u2500\\u2500\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" layout.mobile.tsx\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   #\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Mobile layout component\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"\\u251C\\u2500\\u2500\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" features\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                #\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" This folder contains features code shared by both desktop and mobile, such as the Banner component\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"\\u2502\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   \\u2514\\u2500\\u2500\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" Banner\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"\\u2514\\u2500\\u2500\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" page.tsx\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                #\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" This is the main entry file for the page, used to load desktop or mobile code based on the device type\"})]})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"In this way, we can clearly distinguish and manage desktop and mobile code, while also easily reusing code required on both devices, thereby improving development efficiency and maintaining code cleanliness and maintainability.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"chat\",children:\"chat\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In the \",(0,n.jsx)(e.code,{children:\"chat\"}),\" folder, we organize this \",(0,n.jsx)(e.code,{children:\"chat\"}),\" route according to app router's \",(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/app/building-your-application/routing/route-groups\",children:\"Route Group\"}),`\\r\nand the `,(0,n.jsx)(e.a,{href:\"https://nextjs.org/docs/app/building-your-application/routing/parallel-routes\",children:\"Parallel Routes\"}),`.\\r\nWe use parallel routing to render `,(0,n.jsx)(e.code,{children:\"@sessions\"}),\" and \",(0,n.jsx)(e.code,{children:\"(workspace)\"}),` is a route group that contains parallel\\r\nroutes such as `,(0,n.jsx)(e.code,{children:\"@conversation\"}),\",\"]})]})}function d(l={}){let{wrapper:e}=l.components||{};return e?(0,n.jsx)(e,{...l,children:(0,n.jsx)(F,{...l})}):F(l)}return W(x);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/lobechat/component-structure/pr-intro.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/lobechat/component-structure/pr-intro.mdx",
      "sourceFileName": "pr-intro.mdx",
      "sourceFileDir": "guide/codebase-architecture/lobechat/component-structure",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/lobechat/component-structure/pr-intro"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/lobechat/component-structure/pr-intro",
    "slugAsParams": "codebase-architecture/lobechat/component-structure/pr-intro"
  },
  {
    "title": "State management in Lobechat\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\n[Adding a new group in the chat options]\r\n\r\nThis is the option for Create a new group.\r\n\r\nhttps://github.com/lobehub/lobe-chat/blob/323bffac3c6052cd11d1275b0290f07c9f906c55/src/app/(main)/chat/%40session/features/SessionListContent/List/Item/Actions.tsx#L40\r\nhttps://github.com/lobehub/lobe-chat/blob/323bffac3c6052cd11d1275b0290f07c9f906c55/src/app/(main)/chat/%40session/features/SessionListContent/List/Item/index.tsx#L89\r\nhttps://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/chat/%40session/features/SessionListContent/Modals/CreateGroupModal.tsx#L14\r\n\r\n[Assistant meta in settings]\r\n\r\nThis is assistant meta information you will find when you click on settings insied a modal\r\n\r\nhttps://github.com/lobehub/lobe-chat/blob/323bffac3c6052cd11d1275b0290f07c9f906c55/src/features/AgentSetting/AgentMeta/index.tsx#L75\r\nhttps://github.com/lobehub/lobe-chat/blob/323bffac3c6052cd11d1275b0290f07c9f906c55/locales/en-US/setting.json#L157",
      "code": "var Component=(()=>{var f=Object.create;var o=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var g=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),L=(e,t)=>{for(var s in t)o(e,s,{get:t[s],enumerable:!0})},i=(e,t,s,a)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let c of u(t))!m.call(e,c)&&c!==s&&o(e,c,{get:()=>t[c],enumerable:!(a=d(t,c))||a.enumerable});return e};var x=(e,t,s)=>(s=e!=null?f(p(e)):{},i(t||!e||!e.__esModule?o(s,\"default\",{value:e,enumerable:!0}):s,e)),C=e=>i(o({},\"__esModule\",{value:!0}),e);var h=g((j,b)=>{b.exports=_jsx_runtime});var M={};L(M,{default:()=>l,frontmatter:()=>S});var n=x(h()),S={title:\"State management in Lobechat\"};function r(e){let t={a:\"a\",p:\"p\",...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:\"[Adding a new group in the chat options]\"}),`\n`,(0,n.jsx)(t.p,{children:\"This is the option for Create a new group.\"}),`\n`,(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:\"https://github.com/lobehub/lobe-chat/blob/323bffac3c6052cd11d1275b0290f07c9f906c55/src/app/(main)/chat/%40session/features/SessionListContent/List/Item/Actions.tsx#L40\",children:\"https://github.com/lobehub/lobe-chat/blob/323bffac3c6052cd11d1275b0290f07c9f906c55/src/app/(main)/chat/%40session/features/SessionListContent/List/Item/Actions.tsx#L40\"}),`\\r\n`,(0,n.jsx)(t.a,{href:\"https://github.com/lobehub/lobe-chat/blob/323bffac3c6052cd11d1275b0290f07c9f906c55/src/app/(main)/chat/%40session/features/SessionListContent/List/Item/index.tsx#L89\",children:\"https://github.com/lobehub/lobe-chat/blob/323bffac3c6052cd11d1275b0290f07c9f906c55/src/app/(main)/chat/%40session/features/SessionListContent/List/Item/index.tsx#L89\"}),`\\r\n`,(0,n.jsx)(t.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/chat/%40session/features/SessionListContent/Modals/CreateGroupModal.tsx#L14\",children:\"https://github.com/lobehub/lobe-chat/blob/main/src/app/(main)/chat/%40session/features/SessionListContent/Modals/CreateGroupModal.tsx#L14\"})]}),`\n`,(0,n.jsx)(t.p,{children:\"[Assistant meta in settings]\"}),`\n`,(0,n.jsx)(t.p,{children:\"This is assistant meta information you will find when you click on settings insied a modal\"}),`\n`,(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.a,{href:\"https://github.com/lobehub/lobe-chat/blob/323bffac3c6052cd11d1275b0290f07c9f906c55/src/features/AgentSetting/AgentMeta/index.tsx#L75\",children:\"https://github.com/lobehub/lobe-chat/blob/323bffac3c6052cd11d1275b0290f07c9f906c55/src/features/AgentSetting/AgentMeta/index.tsx#L75\"}),`\\r\n`,(0,n.jsx)(t.a,{href:\"https://github.com/lobehub/lobe-chat/blob/323bffac3c6052cd11d1275b0290f07c9f906c55/locales/en-US/setting.json#L157\",children:\"https://github.com/lobehub/lobe-chat/blob/323bffac3c6052cd11d1275b0290f07c9f906c55/locales/en-US/setting.json#L157\"})]})]})}function l(e={}){let{wrapper:t}=e.components||{};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(r,{...e})}):r(e)}return C(M);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/lobechat/state-management/forms.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/lobechat/state-management/forms.mdx",
      "sourceFileName": "forms.mdx",
      "sourceFileDir": "guide/codebase-architecture/lobechat/state-management",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/lobechat/state-management/forms"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/lobechat/state-management/forms",
    "slugAsParams": "codebase-architecture/lobechat/state-management/forms"
  },
  {
    "title": "State management in Lobechat\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\n# State management in Lobechat\r\n\r\nState management is intertwined with the way you manage API layer. \r\nIn this guide, we will analyze how the state is managed in Lobechat.\r\n\r\nWe have to take a closer look at operations such as:\r\n1. Add a new assistant\r\n2. Fetching the list of assistant\r\n3. Adding a message to a chat\r\n4. Loading a chat\r\n\r\nThese operations are specific to Lobechat, these operations vary based on an application. \r\nIn cal.com, to understand how how state is managed, you would look at operations such as bookings list, \r\nevent-types etc., \r\n\r\n## Adding a new assistant:\r\n\r\nSearch for \"New Assistant\" button in the source code, catch here is that Lobechat \r\nhas internationalization  which means we need to find the key for \"New Assistant\", it is \"newAgent\". \r\n\r\nSearch again across the codebase for \"newAgent\" and you will find it in this\r\n[file](https://github.com/lobehub/lobe-chat/blob/7d1e5c46aecc582308483d329b6007a8f8c76b70/src/app/(main)/chat/%40session/_layout/Desktop/SessionHeader.tsx#L36)\r\n\r\nHow is newAgent variable used?\r\n```\r\n<ActionIcon\r\n  icon={MessageSquarePlus}\r\n  loading={isValidating}\r\n  onClick={() => mutate()}\r\n  size={DESKTOP_HEADER_ICON_SIZE}\r\n  style={{ flex: 'none' }}\r\n  title={t('newAgent')}\r\n/>\r\n```\r\nIn the above code, newAgent is used as title which is a prop in ActionIcon. This is it, this is our \r\nentry point that leads us to the state management. onClick calls a function named `mutate`.\r\n\r\n```\r\nconst { mutate, isValidating } = useActionSWR('session.createSession', () => createSession());\r\n```\r\nOur focus is only on state management, checkout API Layer in LobeChat to learn more about useActionSWR,\r\nmutate.\r\n\r\nWhere is `createSession` coming from?\r\n\r\n```\r\nconst [createSession] = useSessionStore((s) => [s.createSession]);\r\n```\r\n\r\nThis path is now leading us to discover where `useSessionStore` is imported from.\r\n\r\n```\r\nimport { useSessionStore } from '@/store/session';\r\n```\r\nuseSessionStore is imported from [store/session.ts](https://github.com/lobehub/lobe-chat/tree/7d1e5c46aecc582308483d329b6007a8f8c76b70/src/store/session)\r\n\r\n[C:Session store]\r\n[L: file structure]\r\nFor us to understand the Session store in its entirety, let's start with the file structure. \r\n\r\nYou will find what each file is used for.\r\n\r\nThe following file structure is from Lobechat's [store/session](https://github.com/lobehub/lobe-chat/tree/main/src/store/session) \r\n\r\n```sh\r\n+-- store/session                    # Main session store\r\n|   +-- slices                       # Contains slices for session management\r\n|   |   +-- session                  # Handles individual session logic\r\n|   |   |   +-- selectors            # Selectors for session data\r\n|   |   |   |   +-- index.ts         # Exports session selectors\r\n|   |   |   |   +-- list.test.ts     # Tests for session list selector\r\n|   |   |   |   +-- list.ts          # Session list selector\r\n|   |   |   |   +-- meta.test.ts     # Tests for session meta selector\r\n|   |   |   |   +-- meta.ts          # Session meta selector\r\n|   |   |   +-- action.test.ts       # Tests for session actions\r\n|   |   |   +-- action.ts            # Session actions\r\n|   |   |   +-- helpers.ts           # Helper functions for session\r\n|   |   |   +-- initialState.ts      # Initial state for session\r\n|   |   |   +-- reducers.test.ts     # Tests for session reducers\r\n|   |   |   +-- reducers.ts          # Reducers for session\r\n|   +-- sessionGroup                 # Manages session groups\r\n|   |   +-- action.test.ts           # Tests for session group actions\r\n|   |   +-- action.ts                # Session group actions\r\n|   |   +-- initialState.ts          # Initial state for session group\r\n|   |   +-- reducer.test.ts          # Tests for session group reducer\r\n|   |   +-- reducer.ts               # Reducer for session group\r\n|   |   +-- selectors.ts             # Selectors for session group\r\n|   +-- store.ts                     # Main store configuration for sessions\r\n+-- helpers.ts                       # Helper functions for the session store\r\n+-- index.ts                         # Entry point for the session store\r\n+-- initialState.ts                  # Initial state for the session store\r\n+-- selectors.ts                     # Selectors for the session store\r\n\r\n``` \r\n\r\nThis is for session store, Lobechat has a lot of other folder inside store\r\n\r\n[insert screenshot of lobechat store folder].\r\n\r\n# Standard file structure\r\nIt looks it follows consistent file structure across these store folders. a store folder will have the \r\nbelow file structure:\r\n\r\n## Store folder - Root level \r\n+-- slices\r\n+-- helpers.ts\r\n+-- index.ts\r\n+-- initialState.ts\r\n+-- selectors.ts or selectors being a folder\r\n+-- reducers \r\n\r\n## slicers folder structure\r\n+-- {slice-name} folder             # Here slice-name can be a store slice, for example, user store has auth, settings etc., \r\n\r\nEach slice folder then follow the same file structure convention found at the root level, except there is one\r\nadditional files called reducers.ts and action.ts\r\n\r\n[L: store/session explained]\r\nIn this guide, we analyze the files in [store/session](https://github.com/lobehub/lobe-chat/tree/main/src/store/session)\r\nto understand how it all comes together and being used in a page/UI. Let's begin.\r\n\r\n## index.ts\r\n\r\n```\r\nexport type { SessionStore } from './store';\r\nexport { useSessionStore } from './store';\r\n```\r\n`index.ts` simply exports type and a hook named `useSessionStore`. This practice allows you to import \r\n`useSessionStore` by writing - `@/store/session` instead of `@/store/session/store` as `useSessionStore`\r\nis in `store` file.\r\n\r\n## store.ts\r\n\r\n[store.ts](https://github.com/lobehub/lobe-chat/blob/main/src/store/session/store.ts) has some advanced \r\nZustand API. This store.ts is a perfect demonstration of quality.\r\n\r\nLet's first analyze how the store is created.\r\n\r\n```\r\nconst createStore: StateCreator<SessionStore, [['zustand/devtools', never]]> = (...parameters) => ({\r\n  ...initialState,\r\n  ...createSessionSlice(...parameters),\r\n  ...createSessionGroupSlice(...parameters),\r\n});\r\n\r\n//  ===============  implement useStore ============ //\r\nconst devtools = createDevtools('session');\r\n\r\nexport const useSessionStore = createWithEqualityFn<SessionStore>()(\r\n  subscribeWithSelector(\r\n    devtools(createStore, {\r\n      name: 'LobeChat_Session' + (isDev ? '_DEV' : ''),\r\n    }),\r\n  ),\r\n  shallow,\r\n);\r\n```\r\nYou might be familiar with simple use case of Zustand but this example from Lobechat's session store shows\r\nyou how you can leverage advanced API such as devTools, createWithEqualityFn, subscribeWithSelector.\r\n\r\nWe start off with the below code snippet:\r\n\r\n```\r\nconst createStore: StateCreator<SessionStore, [['zustand/devtools', never]]> = (...parameters) => ({\r\n  ...initialState,\r\n  ...createSessionSlice(...parameters),\r\n  ...createSessionGroupSlice(...parameters),\r\n});\r\n```\r\n\r\nStateCreator is a type imported from `zustand/vanilla`. Lobechat uses slices pattern. In fact, what you see\r\nin the above code snippet - `StateCreator<SessionStore, [['zustand/devtools', never]]>` is mentioned in\r\n[Zustand documentation](https://zustand.docs.pmnd.rs/guides/typescript#slices-pattern). Check this [full list \r\nof Middlewares and their mutators reference](https://zustand.docs.pmnd.rs/guides/typescript#middlewares-and-their-mutators-reference).\r\nIt is also worth reading [Zustand's TypeScript guide](https://zustand.docs.pmnd.rs/guides/typescript).\r\n\r\nThis createStore has initialState, createSessionSlice and createSessionGroupSlice. initialState is imported from a \r\nfile named [initialState.ts](https://github.com/lobehub/lobe-chat/blob/main/src/store/session/initialState.ts). \r\ncreateSessionSlice is imported from [session/action.ts](https://github.com/lobehub/lobe-chat/blob/main/src/store/session/slices/session/action.ts).\r\ncreateSessionGroupSlice is imported from [sessionGroup/action.ts](https://github.com/lobehub/lobe-chat/blob/main/src/store/session/slices/sessionGroup/action.ts)\r\n\r\nLet's now examine the devtools middleware\r\n\r\n```\r\nconst devtools = createDevtools('session');\r\n```\r\n[devtools](https://zustand.docs.pmnd.rs/middlewares/devtools#devtools) middleware lets you use Redux DevTools Extension \r\nwithout Redux. Read more about the benefits of using [Redux DevTools for debugging](https://redux.js.org/style-guide/#use-the-redux-devtools-extension-for-debugging).\r\n\r\nIn the code snippet below, you will find how the devTools and createStore are used to create `useSessionStore`.\r\n\r\n```\r\nexport const useSessionStore = createWithEqualityFn<SessionStore>()(\r\n  subscribeWithSelector(\r\n    devtools(createStore, {\r\n      name: 'LobeChat_Session' + (isDev ? '_DEV' : ''),\r\n    }),\r\n  ),\r\n  shallow,\r\n);\r\n```\r\n\r\nYou will find that `createWithEqualityFn` is called with `subscribeWithSelector`. `subscribeWithSelector` has `devTools` as its\r\nonly param. devtools is a middleware with its first parameter being createStore function.\r\n\r\n[createWithEqualityFn](https://zustand.docs.pmnd.rs/apis/create-with-equality-fn) createWithEqualityFn lets you create a React \r\nHook with API utilities attached, just like create. However, it offers a way to define a custom equality check. \r\nThis allows for more granular control over when components re-render, improving performance and responsiveness.\r\n\r\n[subscribeWithSelector](https://zustand.docs.pmnd.rs/middlewares/subscribe-with-selector)\r\n\r\n[L: Sessions slice]\r\n\r\nIn this guide, we discuss Sessions slice in Zustand. You would need to understand slice in Zustand before \r\nwe study state management in Lobechat.\r\n\r\nLet's review a simple slice example from Zustand.\r\n\r\n```\r\n// In a file named store/fishSlice.ts\r\nexport const createFishSlice = (set) => ({\r\n  fishes: 0,\r\n  addFish: () => set((state) => ({ fishes: state.fishes + 1 })),\r\n})\r\n\r\n// In a file named store/bearSlice.ts\r\nexport const createBearSlice = (set) => ({\r\n  bears: 0,\r\n  addBear: () => set((state) => ({ bears: state.bears + 1 })),\r\n  eatFish: () => set((state) => ({ fishes: state.fishes - 1 })),\r\n})\r\n\r\n// In a file named store/index.ts\r\nimport { create } from 'zustand'\r\nimport { createBearSlice } from './bearSlice'\r\nimport { createFishSlice } from './fishSlice'\r\n\r\nexport const useBoundStore = create((...a) => ({\r\n  ...createBearSlice(...a),\r\n  ...createFishSlice(...a),\r\n}))\r\n\r\n```\r\n\r\nWith the above configuration, let's look at how to access the store in a React component.\r\n\r\n```\r\nimport { useBoundStore } from './stores/useBoundStore'\r\n\r\nfunction App() {\r\n  const bears = useBoundStore((state) => state.bears)\r\n  const fishes = useBoundStore((state) => state.fishes)\r\n  const addBear = useBoundStore((state) => state.addBear)\r\n  return (\r\n    <div>\r\n      <h2>Number of bears: {bears}</h2>\r\n      <h2>Number of fishes: {fishes}</h2>\r\n      <button onClick={() => addBear()}>Add a bear</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n```\r\n\r\nThere isn't much changed in the API, you would access the store as if it were without slices.\r\n\r\nRead more about [slices pattern in Zustand](https://zustand.docs.pmnd.rs/guides/slices-pattern).\r\n\r\nNow that we understand the basics of slices in Zustand, let's review the  Session Slice.\r\n\r\nSince in this chapter, we are focusing on the state management in \"Adding a new assistant\". As explained in \r\n[introduction](link to introduction), let's find out where createSession is defined in the session slice folder\r\n\r\n```\r\nconst [createSession] = useSessionStore((s) => [s.createSession]);\r\n```\r\n\r\ncreateSession is defined in [action.ts](https://github.com/lobehub/lobe-chat/blob/main/src/store/session/slices/session/action.ts#L103).\r\n\r\n```\r\ncreateSession: async (agent, isSwitchSession = true) => {\r\n  const { switchSession, refreshSessions } = get();\r\n\r\n  // merge the defaultAgent in settings\r\n  const defaultAgent = merge(\r\n    DEFAULT_AGENT_LOBE_SESSION,\r\n    settingsSelectors.defaultAgent(useUserStore.getState()),\r\n  );\r\n\r\n  const newSession: LobeAgentSession = merge(defaultAgent, agent);\r\n\r\n  const id = await sessionService.createSession(LobeSessionType.Agent, newSession);\r\n  await refreshSessions();\r\n\r\n  // Whether to goto  to the new session after creation, the default is to switch to\r\n  if (isSwitchSession) switchSession(id);\r\n\r\n  return id;\r\n},\r\n```\r\n\r\nNotice how there is a service function used to create session. So you fire state action and this action calls a service function.\r\n\r\nReferences:\r\n1. https://github.com/lobehub/lobe-chat/blob/7d1e5c46aecc582308483d329b6007a8f8c76b70/src/app/(main)/chat/%40session/_layout/Desktop/SessionHeader.tsx#L36\r\n2. https://chat-preview.lobehub.com/chat?session=inbox\r\n3. https://github.com/lobehub/lobe-chat/tree/7d1e5c46aecc582308483d329b6007a8f8c76b70/src/store/session",
      "code": "var Component=(()=>{var F=Object.create;var o=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var m=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),b=(n,e)=>{for(var t in e)o(n,t,{get:e[t],enumerable:!0})},i=(n,e,t,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of u(e))!f.call(n,r)&&r!==t&&o(n,r,{get:()=>e[r],enumerable:!(l=p(e,r))||l.enumerable});return n};var S=(n,e,t)=>(t=n!=null?F(y(n)):{},i(e||!n||!n.__esModule?o(t,\"default\",{value:n,enumerable:!0}):t,n)),g=n=>i(o({},\"__esModule\",{value:!0}),n);var a=m((W,c)=>{c.exports=_jsx_runtime});var v={};b(v,{default:()=>h,frontmatter:()=>w});var s=S(a()),w={title:\"State management in Lobechat\"};function d(n){let e={a:\"a\",code:\"code\",div:\"div\",h1:\"h1\",h2:\"h2\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:\"state-management-in-lobechat\",children:\"State management in Lobechat\"}),`\n`,(0,s.jsx)(e.p,{children:`State management is intertwined with the way you manage API layer.\\r\nIn this guide, we will analyze how the state is managed in Lobechat.`}),`\n`,(0,s.jsx)(e.p,{children:\"We have to take a closer look at operations such as:\"}),`\n`,(0,s.jsxs)(e.ol,{children:[`\n`,(0,s.jsx)(e.li,{children:\"Add a new assistant\"}),`\n`,(0,s.jsx)(e.li,{children:\"Fetching the list of assistant\"}),`\n`,(0,s.jsx)(e.li,{children:\"Adding a message to a chat\"}),`\n`,(0,s.jsx)(e.li,{children:\"Loading a chat\"}),`\n`]}),`\n`,(0,s.jsx)(e.p,{children:`These operations are specific to Lobechat, these operations vary based on an application.\\r\nIn cal.com, to understand how how state is managed, you would look at operations such as bookings list,\\r\nevent-types etc.,`}),`\n`,(0,s.jsx)(e.h2,{id:\"adding-a-new-assistant\",children:\"Adding a new assistant:\"}),`\n`,(0,s.jsx)(e.p,{children:`Search for \"New Assistant\" button in the source code, catch here is that Lobechat\\r\nhas internationalization  which means we need to find the key for \"New Assistant\", it is \"newAgent\".`}),`\n`,(0,s.jsxs)(e.p,{children:[`Search again across the codebase for \"newAgent\" and you will find it in this\\r\n`,(0,s.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/7d1e5c46aecc582308483d329b6007a8f8c76b70/src/app/(main)/chat/%40session/_layout/Desktop/SessionHeader.tsx#L36\",children:\"file\"})]}),`\n`,(0,s.jsx)(e.p,{children:\"How is newAgent variable used?\"}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:`<ActionIcon\\r\n  icon={MessageSquarePlus}\\r\n  loading={isValidating}\\r\n  onClick={() => mutate()}\\r\n  size={DESKTOP_HEADER_ICON_SIZE}\\r\n  style={{ flex: 'none' }}\\r\n  title={t('newAgent')}\\r\n/>\n`})}),`\n`,(0,s.jsxs)(e.p,{children:[`In the above code, newAgent is used as title which is a prop in ActionIcon. This is it, this is our\\r\nentry point that leads us to the state management. onClick calls a function named `,(0,s.jsx)(e.code,{children:\"mutate\"}),\".\"]}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:`const { mutate, isValidating } = useActionSWR('session.createSession', () => createSession());\n`})}),`\n`,(0,s.jsx)(e.p,{children:`Our focus is only on state management, checkout API Layer in LobeChat to learn more about useActionSWR,\\r\nmutate.`}),`\n`,(0,s.jsxs)(e.p,{children:[\"Where is \",(0,s.jsx)(e.code,{children:\"createSession\"}),\" coming from?\"]}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:`const [createSession] = useSessionStore((s) => [s.createSession]);\n`})}),`\n`,(0,s.jsxs)(e.p,{children:[\"This path is now leading us to discover where \",(0,s.jsx)(e.code,{children:\"useSessionStore\"}),\" is imported from.\"]}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:`import { useSessionStore } from '@/store/session';\n`})}),`\n`,(0,s.jsxs)(e.p,{children:[\"useSessionStore is imported from \",(0,s.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/tree/7d1e5c46aecc582308483d329b6007a8f8c76b70/src/store/session\",children:\"store/session.ts\"})]}),`\n`,(0,s.jsx)(e.p,{children:`[C:Session store]\\r\n[L: file structure]\\r\nFor us to understand the Session store in its entirety, let's start with the file structure.`}),`\n`,(0,s.jsx)(e.p,{children:\"You will find what each file is used for.\"}),`\n`,(0,s.jsxs)(e.p,{children:[\"The following file structure is from Lobechat's \",(0,s.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/tree/main/src/store/session\",children:\"store/session\"})]}),`\n`,(0,s.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,s.jsx)(e.pre,{\"data-language\":\"sh\",\"data-theme\":\"default\",children:(0,s.jsxs)(e.code,{\"data-language\":\"sh\",\"data-theme\":\"default\",children:[(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"+--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" store/session\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                    #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Main session store\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" slices\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                       #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Contains slices for session management\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" session\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                  #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Handles individual session logic\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" selectors\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"            #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Selectors for session data\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" index.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"         #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Exports session selectors\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" list.test.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"     #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Tests for session list selector\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" list.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"          #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Session list selector\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" meta.test.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"     #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Tests for session meta selector\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" meta.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"          #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Session meta selector\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" action.test.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"       #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Tests for session actions\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" action.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"            #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Session actions\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" helpers.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"           #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Helper functions for session\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" initialState.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"      #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Initial state for session\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" reducers.test.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"     #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Tests for session reducers\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" reducers.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"          #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Reducers for session\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" sessionGroup\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                 #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Manages session groups\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" action.test.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"           #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Tests for session group actions\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" action.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Session group actions\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" initialState.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"          #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Initial state for session group\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" reducer.test.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"          #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Tests for session group reducer\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" reducer.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"               #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Reducer for session group\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" selectors.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"             #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Selectors for session group\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" store.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                     #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Main store configuration for sessions\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"+--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" helpers.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                       #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Helper functions for the session store\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"+--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" index.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                         #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Entry point for the session store\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"+--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" initialState.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                  #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Initial state for the session store\"})]}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"+--\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" selectors.ts\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                     #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Selectors for the session store\"})]}),`\n`,(0,s.jsx)(e.span,{className:\"line\",children:\" \"})]})})}),`\n`,(0,s.jsx)(e.p,{children:\"This is for session store, Lobechat has a lot of other folder inside store\"}),`\n`,(0,s.jsx)(e.p,{children:\"[insert screenshot of lobechat store folder].\"}),`\n`,(0,s.jsx)(e.h1,{id:\"standard-file-structure\",children:\"Standard file structure\"}),`\n`,(0,s.jsx)(e.p,{children:`It looks it follows consistent file structure across these store folders. a store folder will have the\\r\nbelow file structure:`}),`\n`,(0,s.jsx)(e.h2,{id:\"store-folder---root-level\",children:\"Store folder - Root level\"}),`\n`,(0,s.jsx)(e.p,{children:`+-- slices\\r\n+-- helpers.ts\\r\n+-- index.ts\\r\n+-- initialState.ts\\r\n+-- selectors.ts or selectors being a folder\\r\n+-- reducers`}),`\n`,(0,s.jsx)(e.h2,{id:\"slicers-folder-structure\",children:\"slicers folder structure\"}),`\n`,(0,s.jsxs)(e.p,{children:[\"+-- \",slice-name,\" folder             # Here slice-name can be a store slice, for example, user store has auth, settings etc.,\"]}),`\n`,(0,s.jsx)(e.p,{children:`Each slice folder then follow the same file structure convention found at the root level, except there is one\\r\nadditional files called reducers.ts and action.ts`}),`\n`,(0,s.jsxs)(e.p,{children:[`[L: store/session explained]\\r\nIn this guide, we analyze the files in `,(0,s.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/tree/main/src/store/session\",children:\"store/session\"}),`\\r\nto understand how it all comes together and being used in a page/UI. Let's begin.`]}),`\n`,(0,s.jsx)(e.h2,{id:\"indexts\",children:\"index.ts\"}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:`export type { SessionStore } from './store';\\r\nexport { useSessionStore } from './store';\n`})}),`\n`,(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.code,{children:\"index.ts\"}),\" simply exports type and a hook named \",(0,s.jsx)(e.code,{children:\"useSessionStore\"}),`. This practice allows you to import\\r\n`,(0,s.jsx)(e.code,{children:\"useSessionStore\"}),\" by writing - \",(0,s.jsx)(e.code,{children:\"@/store/session\"}),\" instead of \",(0,s.jsx)(e.code,{children:\"@/store/session/store\"}),\" as \",(0,s.jsx)(e.code,{children:\"useSessionStore\"}),`\\r\nis in `,(0,s.jsx)(e.code,{children:\"store\"}),\" file.\"]}),`\n`,(0,s.jsx)(e.h2,{id:\"storets\",children:\"store.ts\"}),`\n`,(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/store/session/store.ts\",children:\"store.ts\"}),` has some advanced\\r\nZustand API. This store.ts is a perfect demonstration of quality.`]}),`\n`,(0,s.jsx)(e.p,{children:\"Let's first analyze how the store is created.\"}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:`const createStore: StateCreator<SessionStore, [['zustand/devtools', never]]> = (...parameters) => ({\\r\n  ...initialState,\\r\n  ...createSessionSlice(...parameters),\\r\n  ...createSessionGroupSlice(...parameters),\\r\n});\\r\n\\r\n//  ===============  implement useStore ============ //\\r\nconst devtools = createDevtools('session');\\r\n\\r\nexport const useSessionStore = createWithEqualityFn<SessionStore>()(\\r\n  subscribeWithSelector(\\r\n    devtools(createStore, {\\r\n      name: 'LobeChat_Session' + (isDev ? '_DEV' : ''),\\r\n    }),\\r\n  ),\\r\n  shallow,\\r\n);\n`})}),`\n`,(0,s.jsx)(e.p,{children:`You might be familiar with simple use case of Zustand but this example from Lobechat's session store shows\\r\nyou how you can leverage advanced API such as devTools, createWithEqualityFn, subscribeWithSelector.`}),`\n`,(0,s.jsx)(e.p,{children:\"We start off with the below code snippet:\"}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:`const createStore: StateCreator<SessionStore, [['zustand/devtools', never]]> = (...parameters) => ({\\r\n  ...initialState,\\r\n  ...createSessionSlice(...parameters),\\r\n  ...createSessionGroupSlice(...parameters),\\r\n});\n`})}),`\n`,(0,s.jsxs)(e.p,{children:[\"StateCreator is a type imported from \",(0,s.jsx)(e.code,{children:\"zustand/vanilla\"}),`. Lobechat uses slices pattern. In fact, what you see\\r\nin the above code snippet - `,(0,s.jsx)(e.code,{children:\"StateCreator<SessionStore, [['zustand/devtools', never]]>\"}),` is mentioned in\\r\n`,(0,s.jsx)(e.a,{href:\"https://zustand.docs.pmnd.rs/guides/typescript#slices-pattern\",children:\"Zustand documentation\"}),\". Check this \",(0,s.jsx)(e.a,{href:\"https://zustand.docs.pmnd.rs/guides/typescript#middlewares-and-their-mutators-reference\",children:`full list\\r\nof Middlewares and their mutators reference`}),`.\\r\nIt is also worth reading `,(0,s.jsx)(e.a,{href:\"https://zustand.docs.pmnd.rs/guides/typescript\",children:\"Zustand's TypeScript guide\"}),\".\"]}),`\n`,(0,s.jsxs)(e.p,{children:[`This createStore has initialState, createSessionSlice and createSessionGroupSlice. initialState is imported from a\\r\nfile named `,(0,s.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/store/session/initialState.ts\",children:\"initialState.ts\"}),`.\\r\ncreateSessionSlice is imported from `,(0,s.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/store/session/slices/session/action.ts\",children:\"session/action.ts\"}),`.\\r\ncreateSessionGroupSlice is imported from `,(0,s.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/store/session/slices/sessionGroup/action.ts\",children:\"sessionGroup/action.ts\"})]}),`\n`,(0,s.jsx)(e.p,{children:\"Let's now examine the devtools middleware\"}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:`const devtools = createDevtools('session');\n`})}),`\n`,(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:\"https://zustand.docs.pmnd.rs/middlewares/devtools#devtools\",children:\"devtools\"}),` middleware lets you use Redux DevTools Extension\\r\nwithout Redux. Read more about the benefits of using `,(0,s.jsx)(e.a,{href:\"https://redux.js.org/style-guide/#use-the-redux-devtools-extension-for-debugging\",children:\"Redux DevTools for debugging\"}),\".\"]}),`\n`,(0,s.jsxs)(e.p,{children:[\"In the code snippet below, you will find how the devTools and createStore are used to create \",(0,s.jsx)(e.code,{children:\"useSessionStore\"}),\".\"]}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:`export const useSessionStore = createWithEqualityFn<SessionStore>()(\\r\n  subscribeWithSelector(\\r\n    devtools(createStore, {\\r\n      name: 'LobeChat_Session' + (isDev ? '_DEV' : ''),\\r\n    }),\\r\n  ),\\r\n  shallow,\\r\n);\n`})}),`\n`,(0,s.jsxs)(e.p,{children:[\"You will find that \",(0,s.jsx)(e.code,{children:\"createWithEqualityFn\"}),\" is called with \",(0,s.jsx)(e.code,{children:\"subscribeWithSelector\"}),\". \",(0,s.jsx)(e.code,{children:\"subscribeWithSelector\"}),\" has \",(0,s.jsx)(e.code,{children:\"devTools\"}),` as its\\r\nonly param. devtools is a middleware with its first parameter being createStore function.`]}),`\n`,(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.a,{href:\"https://zustand.docs.pmnd.rs/apis/create-with-equality-fn\",children:\"createWithEqualityFn\"}),` createWithEqualityFn lets you create a React\\r\nHook with API utilities attached, just like create. However, it offers a way to define a custom equality check.\\r\nThis allows for more granular control over when components re-render, improving performance and responsiveness.`]}),`\n`,(0,s.jsx)(e.p,{children:(0,s.jsx)(e.a,{href:\"https://zustand.docs.pmnd.rs/middlewares/subscribe-with-selector\",children:\"subscribeWithSelector\"})}),`\n`,(0,s.jsx)(e.p,{children:\"[L: Sessions slice]\"}),`\n`,(0,s.jsx)(e.p,{children:`In this guide, we discuss Sessions slice in Zustand. You would need to understand slice in Zustand before\\r\nwe study state management in Lobechat.`}),`\n`,(0,s.jsx)(e.p,{children:\"Let's review a simple slice example from Zustand.\"}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:`// In a file named store/fishSlice.ts\\r\nexport const createFishSlice = (set) => ({\\r\n  fishes: 0,\\r\n  addFish: () => set((state) => ({ fishes: state.fishes + 1 })),\\r\n})\\r\n\\r\n// In a file named store/bearSlice.ts\\r\nexport const createBearSlice = (set) => ({\\r\n  bears: 0,\\r\n  addBear: () => set((state) => ({ bears: state.bears + 1 })),\\r\n  eatFish: () => set((state) => ({ fishes: state.fishes - 1 })),\\r\n})\\r\n\\r\n// In a file named store/index.ts\\r\nimport { create } from 'zustand'\\r\nimport { createBearSlice } from './bearSlice'\\r\nimport { createFishSlice } from './fishSlice'\\r\n\\r\nexport const useBoundStore = create((...a) => ({\\r\n  ...createBearSlice(...a),\\r\n  ...createFishSlice(...a),\\r\n}))\\r\n\n`})}),`\n`,(0,s.jsx)(e.p,{children:\"With the above configuration, let's look at how to access the store in a React component.\"}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:`import { useBoundStore } from './stores/useBoundStore'\\r\n\\r\nfunction App() {\\r\n  const bears = useBoundStore((state) => state.bears)\\r\n  const fishes = useBoundStore((state) => state.fishes)\\r\n  const addBear = useBoundStore((state) => state.addBear)\\r\n  return (\\r\n    <div>\\r\n      <h2>Number of bears: {bears}</h2>\\r\n      <h2>Number of fishes: {fishes}</h2>\\r\n      <button onClick={() => addBear()}>Add a bear</button>\\r\n    </div>\\r\n  )\\r\n}\\r\n\\r\nexport default App\n`})}),`\n`,(0,s.jsx)(e.p,{children:\"There isn't much changed in the API, you would access the store as if it were without slices.\"}),`\n`,(0,s.jsxs)(e.p,{children:[\"Read more about \",(0,s.jsx)(e.a,{href:\"https://zustand.docs.pmnd.rs/guides/slices-pattern\",children:\"slices pattern in Zustand\"}),\".\"]}),`\n`,(0,s.jsx)(e.p,{children:\"Now that we understand the basics of slices in Zustand, let's review the  Session Slice.\"}),`\n`,(0,s.jsx)(e.p,{children:`Since in this chapter, we are focusing on the state management in \"Adding a new assistant\". As explained in\\r\n[introduction](link to introduction), let's find out where createSession is defined in the session slice folder`}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:`const [createSession] = useSessionStore((s) => [s.createSession]);\n`})}),`\n`,(0,s.jsxs)(e.p,{children:[\"createSession is defined in \",(0,s.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/src/store/session/slices/session/action.ts#L103\",children:\"action.ts\"}),\".\"]}),`\n`,(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:`createSession: async (agent, isSwitchSession = true) => {\\r\n  const { switchSession, refreshSessions } = get();\\r\n\\r\n  // merge the defaultAgent in settings\\r\n  const defaultAgent = merge(\\r\n    DEFAULT_AGENT_LOBE_SESSION,\\r\n    settingsSelectors.defaultAgent(useUserStore.getState()),\\r\n  );\\r\n\\r\n  const newSession: LobeAgentSession = merge(defaultAgent, agent);\\r\n\\r\n  const id = await sessionService.createSession(LobeSessionType.Agent, newSession);\\r\n  await refreshSessions();\\r\n\\r\n  // Whether to goto  to the new session after creation, the default is to switch to\\r\n  if (isSwitchSession) switchSession(id);\\r\n\\r\n  return id;\\r\n},\n`})}),`\n`,(0,s.jsx)(e.p,{children:\"Notice how there is a service function used to create session. So you fire state action and this action calls a service function.\"}),`\n`,(0,s.jsx)(e.p,{children:\"References:\"}),`\n`,(0,s.jsxs)(e.ol,{children:[`\n`,(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/7d1e5c46aecc582308483d329b6007a8f8c76b70/src/app/(main)/chat/%40session/_layout/Desktop/SessionHeader.tsx#L36\",children:\"https://github.com/lobehub/lobe-chat/blob/7d1e5c46aecc582308483d329b6007a8f8c76b70/src/app/(main)/chat/%40session/_layout/Desktop/SessionHeader.tsx#L36\"})}),`\n`,(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:\"https://chat-preview.lobehub.com/chat?session=inbox\",children:\"https://chat-preview.lobehub.com/chat?session=inbox\"})}),`\n`,(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/tree/7d1e5c46aecc582308483d329b6007a8f8c76b70/src/store/session\",children:\"https://github.com/lobehub/lobe-chat/tree/7d1e5c46aecc582308483d329b6007a8f8c76b70/src/store/session\"})}),`\n`]})]})}function h(n={}){let{wrapper:e}=n.components||{};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}return g(v);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/lobechat/state-management/introduction.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/lobechat/state-management/introduction.mdx",
      "sourceFileName": "introduction.mdx",
      "sourceFileDir": "guide/codebase-architecture/lobechat/state-management",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/lobechat/state-management/introduction"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/lobechat/state-management/introduction",
    "slugAsParams": "codebase-architecture/lobechat/state-management/introduction"
  },
  {
    "title": "Tooling in Lobechat\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\nIn this guide, you will learn the tooling used in [Lobechat](https://github.com/lobehub/lobe-chat).\r\n\r\n# What's tooling?\r\nYou might be wondering what tooling means. If you check out [Bulletproof React's Project Standards](https://github.com/alan2207/bulletproof-react/blob/master/docs/project-standards.md),\r\nit describes tools such as ESLint, Prettier, Husky etc.,\r\n\r\nSimilarly, in this guide, we provide an in-depth Lobechat tooling analysis.\r\n\r\n# Lobechat tooling:\r\n\r\nLobechat is not a monorepo, you will find more information about Lobechat's project structure in project \r\nstructure guide. We provide analysis of the tooling used:\r\n1. [At root level](https://github.com/lobehub/lobe-chat) as there is only one Next.js project in Lobechat's repository,\r\nyou do not find  any additional workspaces or packages like in a monorepo. \r\n\r\nTooling might vary based on an app/workspace or packages or a single Next.js project.\r\n\r\n## Tooling used:\r\n- [.github](https://github.com/lobehub/lobe-chat/tree/main/.github)\r\n- [.husky](https://github.com/lobehub/lobe-chat/tree/main/.husky)\r\n- [.bunfig.toml](https://github.com/lobehub/lobe-chat/blob/main/.bunfig.toml)\r\n- [.changelogrc.js](https://github.com/lobehub/lobe-chat/blob/main/.changelogrc.js)\r\n- [.commitlintrc.js](https://github.com/lobehub/lobe-chat/blob/main/.commitlintrc.js)\r\n- [.dockerignore](https://github.com/lobehub/lobe-chat/blob/main/.dockerignore)\r\n- [.editorconfig](https://github.com/lobehub/lobe-chat/blob/main/.editorconfig)\r\n- [.eslintignore](https://github.com/lobehub/lobe-chat/blob/main/.eslintignore)\r\n- [.eslintrc.js](https://github.com/lobehub/lobe-chat/blob/main/.eslintrc.js)\r\n- [.i18nrc.js](https://github.com/lobehub/lobe-chat/blob/main/.i18nrc.js)\r\n- [.npmrc](https://github.com/lobehub/lobe-chat/blob/main/.npmrc)\r\n- [.nvmrc](https://github.com/lobehub/lobe-chat/blob/main/.nvmrc)\r\n- [.prettierignore](https://github.com/lobehub/lobe-chat/blob/main/.prettierignore)\r\n- [.prettierrc.js](https://github.com/lobehub/lobe-chat/blob/main/.prettierrc.js)\r\n- [.releaserc.js](https://github.com/lobehub/lobe-chat/blob/main/.releaserc.js)\r\n- [.remarkrc.js](https://github.com/lobehub/lobe-chat/blob/main/.remarkrc.js)\r\n- [.seorc.cjs](https://github.com/lobehub/lobe-chat/blob/main/.seorc.cjs)\r\n- [.stylelintrc.js](https://github.com/lobehub/lobe-chat/blob/main/.stylelintrc.js)\r\n- [Dockerfile](https://github.com/lobehub/lobe-chat/blob/main/Dockerfile)\r\n- [Dockerfile.database](https://github.com/lobehub/lobe-chat/blob/main/Dockerfile.database)\r\n- [codecov.yml](https://github.com/lobehub/lobe-chat/blob/main/codecov.yml)\r\n- [drizzle.config.ts](https://github.com/lobehub/lobe-chat/blob/main/drizzle.config.ts)\r\n- [netlify.toml](https://github.com/lobehub/lobe-chat/blob/main/netlify.toml)\r\n- [next.config.mjs](https://github.com/lobehub/lobe-chat/blob/main/next.config.mjs)\r\n- [renovate.json](https://github.com/lobehub/lobe-chat/blob/main/renovate.json)\r\n- [sentry.client.config.ts](https://github.com/lobehub/lobe-chat/blob/main/sentry.client.config.ts)\r\n- [sentry.edge.config.ts](https://github.com/lobehub/lobe-chat/blob/main/sentry.edge.config.ts)\r\n- [sentry.server.config.ts](https://github.com/lobehub/lobe-chat/blob/main/sentry.server.config.ts)\r\n- [tsconfig.json](https://github.com/lobehub/lobe-chat/blob/main/tsconfig.json)\r\n- [vercel.json](https://github.com/lobehub/lobe-chat/blob/main/vercel.json)\r\n- [vitest.config.ts](https://github.com/lobehub/lobe-chat/blob/main/vitest.config.ts)\r\n- [vitest.server.config.ts](https://github.com/lobehub/lobe-chat/blob/main/vitest.server.config.ts)",
      "code": "var Component=(()=>{var d=Object.create;var l=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var p=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),j=(t,e)=>{for(var n in e)l(t,n,{get:e[n],enumerable:!0})},c=(t,e,n,h)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of m(e))!f.call(t,o)&&o!==n&&l(t,o,{get:()=>e[o],enumerable:!(h=u(e,o))||h.enumerable});return t};var y=(t,e,n)=>(n=t!=null?d(g(t)):{},c(e||!t||!t.__esModule?l(n,\"default\",{value:t,enumerable:!0}):n,t)),v=t=>c(l({},\"__esModule\",{value:!0}),t);var b=p((L,r)=>{r.exports=_jsx_runtime});var x={};j(x,{default:()=>s,frontmatter:()=>k});var i=y(b()),k={title:\"Tooling in Lobechat\"};function a(t){let e={a:\"a\",h1:\"h1\",h2:\"h2\",li:\"li\",ol:\"ol\",p:\"p\",ul:\"ul\",...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:[\"In this guide, you will learn the tooling used in \",(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat\",children:\"Lobechat\"}),\".\"]}),`\n`,(0,i.jsx)(e.h1,{id:\"whats-tooling\",children:\"What's tooling?\"}),`\n`,(0,i.jsxs)(e.p,{children:[\"You might be wondering what tooling means. If you check out \",(0,i.jsx)(e.a,{href:\"https://github.com/alan2207/bulletproof-react/blob/master/docs/project-standards.md\",children:\"Bulletproof React's Project Standards\"}),`,\\r\nit describes tools such as ESLint, Prettier, Husky etc.,`]}),`\n`,(0,i.jsx)(e.p,{children:\"Similarly, in this guide, we provide an in-depth Lobechat tooling analysis.\"}),`\n`,(0,i.jsx)(e.h1,{id:\"lobechat-tooling\",children:\"Lobechat tooling:\"}),`\n`,(0,i.jsx)(e.p,{children:`Lobechat is not a monorepo, you will find more information about Lobechat's project structure in project\\r\nstructure guide. We provide analysis of the tooling used:`}),`\n`,(0,i.jsxs)(e.ol,{children:[`\n`,(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat\",children:\"At root level\"}),` as there is only one Next.js project in Lobechat's repository,\\r\nyou do not find  any additional workspaces or packages like in a monorepo.`]}),`\n`]}),`\n`,(0,i.jsx)(e.p,{children:\"Tooling might vary based on an app/workspace or packages or a single Next.js project.\"}),`\n`,(0,i.jsx)(e.h2,{id:\"tooling-used\",children:\"Tooling used:\"}),`\n`,(0,i.jsxs)(e.ul,{children:[`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/tree/main/.github\",children:\".github\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/tree/main/.husky\",children:\".husky\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/.bunfig.toml\",children:\".bunfig.toml\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/.changelogrc.js\",children:\".changelogrc.js\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/.commitlintrc.js\",children:\".commitlintrc.js\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/.dockerignore\",children:\".dockerignore\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/.editorconfig\",children:\".editorconfig\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/.eslintignore\",children:\".eslintignore\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/.eslintrc.js\",children:\".eslintrc.js\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/.i18nrc.js\",children:\".i18nrc.js\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/.npmrc\",children:\".npmrc\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/.nvmrc\",children:\".nvmrc\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/.prettierignore\",children:\".prettierignore\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/.prettierrc.js\",children:\".prettierrc.js\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/.releaserc.js\",children:\".releaserc.js\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/.remarkrc.js\",children:\".remarkrc.js\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/.seorc.cjs\",children:\".seorc.cjs\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/.stylelintrc.js\",children:\".stylelintrc.js\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/Dockerfile\",children:\"Dockerfile\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/Dockerfile.database\",children:\"Dockerfile.database\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/codecov.yml\",children:\"codecov.yml\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/drizzle.config.ts\",children:\"drizzle.config.ts\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/netlify.toml\",children:\"netlify.toml\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/next.config.mjs\",children:\"next.config.mjs\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/renovate.json\",children:\"renovate.json\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/sentry.client.config.ts\",children:\"sentry.client.config.ts\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/sentry.edge.config.ts\",children:\"sentry.edge.config.ts\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/sentry.server.config.ts\",children:\"sentry.server.config.ts\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/tsconfig.json\",children:\"tsconfig.json\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/vercel.json\",children:\"vercel.json\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/vitest.config.ts\",children:\"vitest.config.ts\"})}),`\n`,(0,i.jsx)(e.li,{children:(0,i.jsx)(e.a,{href:\"https://github.com/lobehub/lobe-chat/blob/main/vitest.server.config.ts\",children:\"vitest.server.config.ts\"})}),`\n`]})]})}function s(t={}){let{wrapper:e}=t.components||{};return e?(0,i.jsx)(e,{...t,children:(0,i.jsx)(a,{...t})}):a(t)}return v(x);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/lobechat/tooling/introduction.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/lobechat/tooling/introduction.mdx",
      "sourceFileName": "introduction.mdx",
      "sourceFileDir": "guide/codebase-architecture/lobechat/tooling",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/lobechat/tooling/introduction"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/lobechat/tooling/introduction",
    "slugAsParams": "codebase-architecture/lobechat/tooling/introduction"
  },
  {
    "title": "Charts Page",
    "description": "Components Structure In Charts Page.\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\n[C: shadcn-ui/ui]\r\n[L: Charts Page]\r\n\r\nIn this lesson, we are only focusing on the folder structure, \r\nfile naming conventions used in [Charts page](https://ui.shadcn.com/charts)\r\n\r\n# Charts Page\r\n\r\nThis Charts Page source code is found at [www/app/(app)/charts/page.tsx](https://github.com/shadcn-ui/ui/blob/main/apps/www/app/(app)/charts/page.tsx).\r\n\r\n## Components imported\r\n\r\nThe following components are imported in the charts page, found at [www/app/(app)/charts/page.tsx](https://github.com/shadcn-ui/ui/blob/main/apps/www/app/(app)/charts/page.tsx).\r\n\r\n```js\r\nimport { THEMES } from \"@/lib/themes\"\r\nimport { ChartDisplay } from \"@/components/chart-display\"\r\nimport { ChartsNav } from \"@/components/charts-nav\"\r\nimport { ThemesSwitcher } from \"@/components/themes-selector\"\r\nimport { ThemesStyle } from \"@/components/themes-styles\"\r\nimport { Separator } from \"@/registry/new-york/ui/separator\"\r\nimport * as Charts from \"@/app/(app)/charts/charts\"\r\n```\r\n\r\nThere are few observations that can be made here:\r\n\r\n- @/components folder:\r\n\r\nChartDisplay, ChartsNav, ThemesSwitcher, ThemesStyle are imported from generic [components folder](https://github.com/shadcn-ui/ui/tree/main/apps/www/components) that is at the root level.\r\n\r\nYou could place the components such as ChartDisplay, ChartsNav in a folder named components \r\nthat could be created in `app/(app)/charts` for colocating purposes. \r\n\r\n- charts components:\r\n[www/app/(app)/charts/charts.tsx](https://github.com/shadcn-ui/ui/blob/main/apps/www/app/(app)/charts/charts.tsx) contains a\r\nlot of chart components imported from `@/registry/new-york/block/chart-area-default`\r\n\r\n\r\n# Conclusion:\r\nYou make the best judgement based on what works for you. Across the shadcn-ui/ui, components used in pages are located in\r\ncomponents folder at the root level so they can be imported using `@/components`.\r\n\r\nWe picked the special use cases such as Charts Page, Mail Example page where you will find some components imported from with\r\nin the route folder.",
      "code": "var Component=(()=>{var d=Object.create;var l=Object.defineProperty;var F=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var f=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),g=(r,e)=>{for(var s in e)l(r,s,{get:e[s],enumerable:!0})},t=(r,e,s,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of m(e))!u.call(r,o)&&o!==s&&l(r,o,{get:()=>e[o],enumerable:!(a=F(e,o))||a.enumerable});return r};var w=(r,e,s)=>(s=r!=null?d(y(r)):{},t(e||!r||!r.__esModule?l(s,\"default\",{value:r,enumerable:!0}):s,r)),C=r=>t(l({},\"__esModule\",{value:!0}),r);var i=f((N,c)=>{c.exports=_jsx_runtime});var x={};g(x,{default:()=>p,frontmatter:()=>b});var n=w(i()),b={title:\"Charts Page\",description:\"Components Structure In Charts Page.\"};function h(r){let e={a:\"a\",code:\"code\",div:\"div\",h1:\"h1\",h2:\"h2\",li:\"li\",p:\"p\",pre:\"pre\",span:\"span\",ul:\"ul\",...r.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:`[C: shadcn-ui/ui]\\r\n[L: Charts Page]`}),`\n`,(0,n.jsxs)(e.p,{children:[`In this lesson, we are only focusing on the folder structure,\\r\nfile naming conventions used in `,(0,n.jsx)(e.a,{href:\"https://ui.shadcn.com/charts\",children:\"Charts page\"})]}),`\n`,(0,n.jsx)(e.h1,{id:\"charts-page\",children:\"Charts Page\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"This Charts Page source code is found at \",(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/apps/www/app/(app)/charts/page.tsx\",children:\"www/app/(app)/charts/page.tsx\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"components-imported\",children:\"Components imported\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The following components are imported in the charts page, found at \",(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/apps/www/app/(app)/charts/page.tsx\",children:\"www/app/(app)/charts/page.tsx\"}),\".\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"js\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"js\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"import\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" {\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" THEMES \"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"}\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" from\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:' \"@/lib/themes\"'})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"import\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" {\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" ChartDisplay \"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"}\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" from\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:' \"@/components/chart-display\"'})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"import\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" {\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" ChartsNav \"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"}\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" from\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:' \"@/components/charts-nav\"'})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"import\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" {\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" ThemesSwitcher \"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"}\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" from\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:' \"@/components/themes-selector\"'})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"import\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" {\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" ThemesStyle \"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"}\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" from\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:' \"@/components/themes-styles\"'})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"import\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" {\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" Separator \"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"}\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" from\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:' \"@/registry/new-york/ui/separator\"'})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"import\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" *\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" as\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" Charts \"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"from\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:' \"@/app/(app)/charts/charts\"'})]})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"There are few observations that can be made here:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"@/components folder:\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"ChartDisplay, ChartsNav, ThemesSwitcher, ThemesStyle are imported from generic \",(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/apps/www/components\",children:\"components folder\"}),\" that is at the root level.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[`You could place the components such as ChartDisplay, ChartsNav in a folder named components\\r\nthat could be created in `,(0,n.jsx)(e.code,{children:\"app/(app)/charts\"}),\" for colocating purposes.\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`charts components:\\r\n`,(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/apps/www/app/(app)/charts/charts.tsx\",children:\"www/app/(app)/charts/charts.tsx\"}),` contains a\\r\nlot of chart components imported from `,(0,n.jsx)(e.code,{children:\"@/registry/new-york/block/chart-area-default\"})]}),`\n`]}),`\n`,(0,n.jsx)(e.h1,{id:\"conclusion\",children:\"Conclusion:\"}),`\n`,(0,n.jsxs)(e.p,{children:[`You make the best judgement based on what works for you. Across the shadcn-ui/ui, components used in pages are located in\\r\ncomponents folder at the root level so they can be imported using `,(0,n.jsx)(e.code,{children:\"@/components\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:`We picked the special use cases such as Charts Page, Mail Example page where you will find some components imported from with\\r\nin the route folder.`})]})}function p(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,{...r,children:(0,n.jsx)(h,{...r})}):h(r)}return C(x);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/shadcn-ui/components-structure/charts-page.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/shadcn-ui/components-structure/charts-page.mdx",
      "sourceFileName": "charts-page.mdx",
      "sourceFileDir": "guide/codebase-architecture/shadcn-ui/components-structure",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/shadcn-ui/components-structure/charts-page"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/shadcn-ui/components-structure/charts-page",
    "slugAsParams": "codebase-architecture/shadcn-ui/components-structure/charts-page"
  },
  {
    "title": "Home Page",
    "description": "Components Structure In Home Page.\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "[C: shadcn-ui/ui]\r\n[L: Home Page]\r\n\r\nShadcn-ui/ui provides beautifully designed components that you can copy and paste into your apps.\r\n\r\nIn this lesson, we are only focusing on the folder structure, file naming conventions and how the page is built.\r\nTo begin with, we picked https://ui.shadcn.com/, that is, the home page.\r\n\r\n# Home Page\r\n\r\nThis home page source code is found at [app/(app)/page.tsx](https://github.com/shadcn-ui/ui/blob/main/apps/www/app/(app)/page.tsx).\r\n\r\n## Components imported\r\n\r\nThe following components are imported in the home page, found at [app/(app)/page.tsx](https://github.com/shadcn-ui/ui/blob/main/apps/www/app/(app)/page.tsx)\r\n\r\n```js\r\nimport { Announcement } from \"@/components/announcement\"\r\nimport { ExamplesNav } from \"@/components/examples-nav\"\r\nimport {\r\n  PageActions,\r\n  PageHeader,\r\n  PageHeaderDescription,\r\n  PageHeaderHeading,\r\n} from \"@/components/page-header\"\r\nimport { Button } from \"@/registry/new-york/ui/button\"\r\nimport MailPage from \"@/app/(app)/examples/mail/page\"\r\n```\r\n\r\nThere are few observations that can be made here:\r\n\r\n- Component name follows PascalCase naming convention.\r\nExample: `Announcement`, `ExamplesNav`, `PageActions`, `PageHeader`, `PageHeaderDescription` etc.,\r\n\r\n- Import alias used.\r\nYou will find the below code snippet in [tsconfig.json](https://github.com/shadcn-ui/ui/blob/main/apps/www/tsconfig.json#L19C5-L20C22)\r\n\r\n```json\r\n\"paths\": {\r\n      \"@/*\": [\"./*\"],\r\n}\r\n```\r\n\r\n\"@/\" is the default import alias in Next.js.\r\n\r\n- File naming convention.\r\nFile names such as `examples-nav`, `page-header` seem to be following kebab-case convention.\r\n\r\n- Folder structure\r\nComponents used in this home page are found to be imported from \r\n\r\n1. `components` folder\r\n\r\n![Shadcn-ui/ui Components Structure](/components-structure/shadcn-components-folder.png)\r\n\r\nComponents folder does not have any nested folders. All the components that are used across the shadcn-ui/ui are located in this folder.\r\n\r\nThese components are different from what you see on https://ui.shadcn.com/docs/components. \r\nDifferent how? https://ui.shadcn.com/docs/components provides the components that can be copied and pasted and these reside in [`registry`](https://github.com/shadcn-ui/ui/tree/main/apps/www/registry). \r\nHowever, `components` provides building blocks that are built using components from registry and are used in pages.\r\n\r\n\r\n2. `registry/new-york/ui` folder\r\n\r\n[registry/new-york/ui](https://github.com/shadcn-ui/ui/tree/main/apps/www/registry/new-york/ui) contains the components \r\nthe components that you see at https://ui.shadcn.com/docs/components.\r\n\r\nThis ui folder is what you get when you initialise shadcn-ui/ui via the CLI.\r\nThere's no need to create a folder named registry and put your ui components in there because shadcn-ui/ui already \r\ndoes this for you via the CLI.\r\n\r\n\r\n3. `@/app/(app)/examples/mail` folder \r\n\r\n[@/app/(app)/examples/mail](https://github.com/shadcn-ui/ui/tree/main/apps/www/app/(app)/examples/mail) this is an interesting\r\nuse case because this imports the whole MailPage.\r\n\r\nWhat does this tell us? it means, you can use a page as a component, \r\nthat is MailPage in this case, by importing in another page. \r\n\r\n# Conclusion:\r\n\r\nYou will find this common pattern across the entire shadcn-ui/ui pages using the app router. Components used are either imported \r\nfrom components folder or imported registry/new-york/ui folder which is the exact folder that shadcn-ui/ui creates for you\r\nin your project when you initialise it via CLI. There is one special use case where a MailPage is imported in Home Page\r\nto show MailPage on the landing page.",
      "code": "var Component=(()=>{var p=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var F=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var y=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),f=(o,e)=>{for(var s in e)a(o,s,{get:e[s],enumerable:!0})},l=(o,e,s,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of F(e))!g.call(o,i)&&i!==s&&a(o,i,{get:()=>e[i],enumerable:!(r=m(e,i))||r.enumerable});return o};var w=(o,e,s)=>(s=o!=null?p(u(o)):{},l(e||!o||!o.__esModule?a(s,\"default\",{value:o,enumerable:!0}):s,o)),b=o=>l(a({},\"__esModule\",{value:!0}),o);var t=y((C,c)=>{c.exports=_jsx_runtime});var v={};f(v,{default:()=>h,frontmatter:()=>x});var n=w(t()),x={title:\"Home Page\",description:\"Components Structure In Home Page.\"};function d(o){let e={a:\"a\",code:\"code\",div:\"div\",h1:\"h1\",h2:\"h2\",img:\"img\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",ul:\"ul\",...o.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:`[C: shadcn-ui/ui]\\r\n[L: Home Page]`}),`\n`,(0,n.jsx)(e.p,{children:\"Shadcn-ui/ui provides beautifully designed components that you can copy and paste into your apps.\"}),`\n`,(0,n.jsxs)(e.p,{children:[`In this lesson, we are only focusing on the folder structure, file naming conventions and how the page is built.\\r\nTo begin with, we picked `,(0,n.jsx)(e.a,{href:\"https://ui.shadcn.com/\",children:\"https://ui.shadcn.com/\"}),\", that is, the home page.\"]}),`\n`,(0,n.jsx)(e.h1,{id:\"home-page\",children:\"Home Page\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"This home page source code is found at \",(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/apps/www/app/(app)/page.tsx\",children:\"app/(app)/page.tsx\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"components-imported\",children:\"Components imported\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The following components are imported in the home page, found at \",(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/apps/www/app/(app)/page.tsx\",children:\"app/(app)/page.tsx\"})]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"js\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"js\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"import\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" {\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" Announcement \"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"}\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" from\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:' \"@/components/announcement\"'})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"import\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" {\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" ExamplesNav \"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"}\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" from\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:' \"@/components/examples-nav\"'})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"import\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\"  PageActions\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\",\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\"  PageHeader\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\",\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\"  PageHeaderDescription\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\",\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\"  PageHeaderHeading\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\",\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"}\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" from\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:' \"@/components/page-header\"'})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"import\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" {\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" Button \"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"}\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" from\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:' \"@/registry/new-york/ui/button\"'})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"import\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" MailPage \"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"from\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:' \"@/app/(app)/examples/mail/page\"'})]})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"There are few observations that can be made here:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[`Component name follows PascalCase naming convention.\\r\nExample: `,(0,n.jsx)(e.code,{children:\"Announcement\"}),\", \",(0,n.jsx)(e.code,{children:\"ExamplesNav\"}),\", \",(0,n.jsx)(e.code,{children:\"PageActions\"}),\", \",(0,n.jsx)(e.code,{children:\"PageHeader\"}),\", \",(0,n.jsx)(e.code,{children:\"PageHeaderDescription\"}),\" etc.,\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[`Import alias used.\\r\nYou will find the below code snippet in `,(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/apps/www/tsconfig.json#L19C5-L20C22\",children:\"tsconfig.json\"})]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"json\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"json\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:'\"paths\"'}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\": \"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"{\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:'      \"'}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\"@/*\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:'\"'}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\":\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" [\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:'\"./*\"'}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"],\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"}\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:'\"@/\" is the default import alias in Next.js.'}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[`File naming convention.\\r\nFile names such as `,(0,n.jsx)(e.code,{children:\"examples-nav\"}),\", \",(0,n.jsx)(e.code,{children:\"page-header\"}),\" seem to be following kebab-case convention.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:`Folder structure\\r\nComponents used in this home page are found to be imported from`}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"components\"}),\" folder\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/components-structure/shadcn-components-folder.png\",alt:\"Shadcn-ui/ui Components Structure\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Components folder does not have any nested folders. All the components that are used across the shadcn-ui/ui are located in this folder.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"These components are different from what you see on \",(0,n.jsx)(e.a,{href:\"https://ui.shadcn.com/docs/components\",children:\"https://ui.shadcn.com/docs/components\"}),`.\\r\nDifferent how? `,(0,n.jsx)(e.a,{href:\"https://ui.shadcn.com/docs/components\",children:\"https://ui.shadcn.com/docs/components\"}),\" provides the components that can be copied and pasted and these reside in \",(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/apps/www/registry\",children:(0,n.jsx)(e.code,{children:\"registry\"})}),`.\\r\nHowever, `,(0,n.jsx)(e.code,{children:\"components\"}),\" provides building blocks that are built using components from registry and are used in pages.\"]}),`\n`,(0,n.jsxs)(e.ol,{start:\"2\",children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"registry/new-york/ui\"}),\" folder\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/apps/www/registry/new-york/ui\",children:\"registry/new-york/ui\"}),` contains the components\\r\nthe components that you see at `,(0,n.jsx)(e.a,{href:\"https://ui.shadcn.com/docs/components\",children:\"https://ui.shadcn.com/docs/components\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:`This ui folder is what you get when you initialise shadcn-ui/ui via the CLI.\\r\nThere's no need to create a folder named registry and put your ui components in there because shadcn-ui/ui already\\r\ndoes this for you via the CLI.`}),`\n`,(0,n.jsxs)(e.ol,{start:\"3\",children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.code,{children:\"@/app/(app)/examples/mail\"}),\" folder\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/apps/www/app/(app)/examples/mail\",children:\"@/app/(app)/examples/mail\"}),` this is an interesting\\r\nuse case because this imports the whole MailPage.`]}),`\n`,(0,n.jsx)(e.p,{children:`What does this tell us? it means, you can use a page as a component,\\r\nthat is MailPage in this case, by importing in another page.`}),`\n`,(0,n.jsx)(e.h1,{id:\"conclusion\",children:\"Conclusion:\"}),`\n`,(0,n.jsx)(e.p,{children:`You will find this common pattern across the entire shadcn-ui/ui pages using the app router. Components used are either imported\\r\nfrom components folder or imported registry/new-york/ui folder which is the exact folder that shadcn-ui/ui creates for you\\r\nin your project when you initialise it via CLI. There is one special use case where a MailPage is imported in Home Page\\r\nto show MailPage on the landing page.`})]})}function h(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,{...o,children:(0,n.jsx)(d,{...o})}):d(o)}return b(v);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/shadcn-ui/components-structure/home-page.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/shadcn-ui/components-structure/home-page.mdx",
      "sourceFileName": "home-page.mdx",
      "sourceFileDir": "guide/codebase-architecture/shadcn-ui/components-structure",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/shadcn-ui/components-structure/home-page"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/shadcn-ui/components-structure/home-page",
    "slugAsParams": "codebase-architecture/shadcn-ui/components-structure/home-page"
  },
  {
    "title": "Introduction\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\nIn this guide, you will learn how components are organized in shadcn-ui/ui\r\n\r\nBy components, here we mean the building blocks of the user interface or more precisely, the building blocks used in a page.\r\n\r\nOur focus is primarily on the folder structure and file naming conventions used. \r\nIn order to establish a common pattern and to understand components structure better, \r\nwe will study few pages/routes in the Shadcn-ui/ui.\r\n\r\nOur approach is to pick a route, locate the route in the source code and from there on, we will look at \r\n1. Where the imported components are located in a project\r\n2. Folder structure and naming conventions used  \r\n3. How the \"page\" is built using these imported components\r\n\r\nThere will be screenshots and links pointing to folders and components that belong to a project. \r\n\r\nUse this free guide to learn how components are organized in Shadcn-ui/ui.",
      "code": "var Component=(()=>{var h=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var w=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),b=(n,e)=>{for(var o in e)i(n,o,{get:e[o],enumerable:!0})},c=(n,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!f.call(n,r)&&r!==o&&i(n,r,{get:()=>e[r],enumerable:!(s=p(e,r))||s.enumerable});return n};var x=(n,e,o)=>(o=n!=null?h(g(n)):{},c(e||!n||!n.__esModule?i(o,\"default\",{value:n,enumerable:!0}):o,n)),j=n=>c(i({},\"__esModule\",{value:!0}),n);var a=w((F,l)=>{l.exports=_jsx_runtime});var y={};b(y,{default:()=>u,frontmatter:()=>_});var t=x(a()),_={title:\"Introduction\"};function d(n){let e={li:\"li\",ol:\"ol\",p:\"p\",...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:\"In this guide, you will learn how components are organized in shadcn-ui/ui\"}),`\n`,(0,t.jsx)(e.p,{children:\"By components, here we mean the building blocks of the user interface or more precisely, the building blocks used in a page.\"}),`\n`,(0,t.jsx)(e.p,{children:`Our focus is primarily on the folder structure and file naming conventions used.\\r\nIn order to establish a common pattern and to understand components structure better,\\r\nwe will study few pages/routes in the Shadcn-ui/ui.`}),`\n`,(0,t.jsx)(e.p,{children:\"Our approach is to pick a route, locate the route in the source code and from there on, we will look at\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsx)(e.li,{children:\"Where the imported components are located in a project\"}),`\n`,(0,t.jsx)(e.li,{children:\"Folder structure and naming conventions used\"}),`\n`,(0,t.jsx)(e.li,{children:'How the \"page\" is built using these imported components'}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"There will be screenshots and links pointing to folders and components that belong to a project.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Use this free guide to learn how components are organized in Shadcn-ui/ui.\"})]})}function u(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}return j(y);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/shadcn-ui/components-structure/introduction.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/shadcn-ui/components-structure/introduction.mdx",
      "sourceFileName": "introduction.mdx",
      "sourceFileDir": "guide/codebase-architecture/shadcn-ui/components-structure",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/shadcn-ui/components-structure/introduction"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/shadcn-ui/components-structure/introduction",
    "slugAsParams": "codebase-architecture/shadcn-ui/components-structure/introduction"
  },
  {
    "title": "Mail Example Page",
    "description": "Components Structure In Mail Example Page.\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\n[C: shadcn-ui/ui]\r\n[L: Mail Example Page]\r\n\r\nIn this lesson, we are only focusing on the folder structure, file naming conventions and \r\nhow the Mail Example Page is built.\r\n\r\n# Mail Example Page\r\n\r\nThis Mail Example Page source code is found at [www/app/(app)/examples/mail](https://github.com/shadcn-ui/ui/tree/main/apps/www/app/(app)/examples/mail).\r\n\r\n## Components imported\r\n\r\nThe following components are imported in the mail page, found at [www/app/(app)/examples/mail](https://github.com/shadcn-ui/ui/blob/main/apps/www/app/(app)/examples/mail/page.tsx).\r\n\r\n```js\r\nimport { Mail } from \"@/app/(app)/examples/mail/components/mail\"\r\nimport { accounts, mails } from \"@/app/(app)/examples/mail/data\"\r\n```\r\n\r\nThere are few observations that can be made here:\r\n\r\n- Mail component\r\nMail component seems to be imported from mail/components. What does this tell you? components specific to a page are \r\ncolocated with in examples/mail folder. In the previous lesson, we mentioned about components folder that contains components\r\nthat can be used across the app.\r\n\r\nThere are some more components imported in [www/app/(app)/examples/mail/components/mail](https://github.com/shadcn-ui/ui/tree/main/apps/www/app/(app)/examples/mail/components)\r\n\r\n```\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Input } from \"@/registry/new-york/ui/input\"\r\nimport {\r\n  ResizableHandle,\r\n  ResizablePanel,\r\n  ResizablePanelGroup,\r\n} from \"@/registry/new-york/ui/resizable\"\r\nimport { Separator } from \"@/registry/new-york/ui/separator\"\r\nimport {\r\n  Tabs,\r\n  TabsContent,\r\n  TabsList,\r\n  TabsTrigger,\r\n} from \"@/registry/new-york/ui/tabs\"\r\nimport { TooltipProvider } from \"@/registry/new-york/ui/tooltip\"\r\nimport { AccountSwitcher } from \"@/app/(app)/examples/mail/components/account-switcher\"\r\nimport { MailDisplay } from \"@/app/(app)/examples/mail/components/mail-display\"\r\nimport { MailList } from \"@/app/(app)/examples/mail/components/mail-list\"\r\nimport { Nav } from \"@/app/(app)/examples/mail/components/nav\"\r\nimport { type Mail } from \"@/app/(app)/examples/mail/data\"\r\nimport { useMail } from \"@/app/(app)/examples/mail/use-mail\"\r\n```\r\nRemember, our focus is on folder structure.\r\n\r\n- @/registry/new-york/ui:\r\n@/registry/new-york/ui is used in the shadcn-ui/ui codebase to reuse ui blocks. this ui folder is automatically generated when \r\nyou install shadcn-ui/ui via CLI\r\n\r\n- `examples/mail/components/` folder:\r\nThis folder contains the following files:\r\n1. account-switcher.tsx\r\n2. mail-display.tsx\r\n3. mail-list.tsx\r\n4. mail.tsx\r\n5. nav.tsx\r\n\r\nmail.tsx is the base of MailPage as it imports the other building blocks/components to form the Mail Page.\r\n\r\n- data folder\r\nThis [data file](https://github.com/shadcn-ui/ui/blob/main/apps/www/app/(app)/examples/mail/data.tsx) contains static data \r\nthat is used in Mail Example page. You could write your server data fetching actions in a file like this that is specific to \r\na page, colocated with in a folder, like in this case \"mail\" as this is related to Mail page.  \r\n\r\n- use-mail.ts custom hook:\r\nYou will also a find a custom hook, [use-mail.ts](https://github.com/shadcn-ui/ui/blob/main/apps/www/app/(app)/examples/mail/use-mail.ts)\r\nThis hook uses Jotai to manage state.",
      "code": "var Component=(()=>{var h=Object.create;var r=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,w=Object.prototype.hasOwnProperty;var g=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),F=(a,e)=>{for(var i in e)r(a,i,{get:e[i],enumerable:!0})},t=(a,e,i,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of u(e))!w.call(a,l)&&l!==i&&r(a,l,{get:()=>e[l],enumerable:!(o=d(e,l))||o.enumerable});return a};var x=(a,e,i)=>(i=a!=null?h(f(a)):{},t(e||!a||!a.__esModule?r(i,\"default\",{value:a,enumerable:!0}):i,a)),y=a=>t(r({},\"__esModule\",{value:!0}),a);var p=g((T,s)=>{s.exports=_jsx_runtime});var M={};F(M,{default:()=>m,frontmatter:()=>b});var n=x(p()),b={title:\"Mail Example Page\",description:\"Components Structure In Mail Example Page.\"};function c(a){let e={a:\"a\",code:\"code\",div:\"div\",h1:\"h1\",h2:\"h2\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",ul:\"ul\",...a.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:`[C: shadcn-ui/ui]\\r\n[L: Mail Example Page]`}),`\n`,(0,n.jsx)(e.p,{children:`In this lesson, we are only focusing on the folder structure, file naming conventions and\\r\nhow the Mail Example Page is built.`}),`\n`,(0,n.jsx)(e.h1,{id:\"mail-example-page\",children:\"Mail Example Page\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"This Mail Example Page source code is found at \",(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/apps/www/app/(app)/examples/mail\",children:\"www/app/(app)/examples/mail\"}),\".\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"components-imported\",children:\"Components imported\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The following components are imported in the mail page, found at \",(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/apps/www/app/(app)/examples/mail/page.tsx\",children:\"www/app/(app)/examples/mail\"}),\".\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"js\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"js\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"import\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" {\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" Mail \"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"}\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" from\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:' \"@/app/(app)/examples/mail/components/mail\"'})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"import\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" {\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" accounts\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\",\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" mails \"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"}\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" from\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:' \"@/app/(app)/examples/mail/data\"'})]})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"There are few observations that can be made here:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:`Mail component\\r\nMail component seems to be imported from mail/components. What does this tell you? components specific to a page are\\r\ncolocated with in examples/mail folder. In the previous lesson, we mentioned about components folder that contains components\\r\nthat can be used across the app.`}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"There are some more components imported in \",(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/apps/www/app/(app)/examples/mail/components\",children:\"www/app/(app)/examples/mail/components/mail\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import { cn } from \"@/lib/utils\"\\r\nimport { Input } from \"@/registry/new-york/ui/input\"\\r\nimport {\\r\n  ResizableHandle,\\r\n  ResizablePanel,\\r\n  ResizablePanelGroup,\\r\n} from \"@/registry/new-york/ui/resizable\"\\r\nimport { Separator } from \"@/registry/new-york/ui/separator\"\\r\nimport {\\r\n  Tabs,\\r\n  TabsContent,\\r\n  TabsList,\\r\n  TabsTrigger,\\r\n} from \"@/registry/new-york/ui/tabs\"\\r\nimport { TooltipProvider } from \"@/registry/new-york/ui/tooltip\"\\r\nimport { AccountSwitcher } from \"@/app/(app)/examples/mail/components/account-switcher\"\\r\nimport { MailDisplay } from \"@/app/(app)/examples/mail/components/mail-display\"\\r\nimport { MailList } from \"@/app/(app)/examples/mail/components/mail-list\"\\r\nimport { Nav } from \"@/app/(app)/examples/mail/components/nav\"\\r\nimport { type Mail } from \"@/app/(app)/examples/mail/data\"\\r\nimport { useMail } from \"@/app/(app)/examples/mail/use-mail\"\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Remember, our focus is on folder structure.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:`@/registry/new-york/ui:\\r\n@/registry/new-york/ui is used in the shadcn-ui/ui codebase to reuse ui blocks. this ui folder is automatically generated when\\r\nyou install shadcn-ui/ui via CLI`}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"examples/mail/components/\"}),` folder:\\r\nThis folder contains the following files:`]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"account-switcher.tsx\"}),`\n`,(0,n.jsx)(e.li,{children:\"mail-display.tsx\"}),`\n`,(0,n.jsx)(e.li,{children:\"mail-list.tsx\"}),`\n`,(0,n.jsx)(e.li,{children:\"mail.tsx\"}),`\n`,(0,n.jsx)(e.li,{children:\"nav.tsx\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"mail.tsx is the base of MailPage as it imports the other building blocks/components to form the Mail Page.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[`data folder\\r\nThis `,(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/apps/www/app/(app)/examples/mail/data.tsx\",children:\"data file\"}),` contains static data\\r\nthat is used in Mail Example page. You could write your server data fetching actions in a file like this that is specific to\\r\na page, colocated with in a folder, like in this case \"mail\" as this is related to Mail page.`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[`use-mail.ts custom hook:\\r\nYou will also a find a custom hook, `,(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/apps/www/app/(app)/examples/mail/use-mail.ts\",children:\"use-mail.ts\"}),`\\r\nThis hook uses Jotai to manage state.`]}),`\n`]}),`\n`]})]})}function m(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,{...a,children:(0,n.jsx)(c,{...a})}):c(a)}return y(M);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/shadcn-ui/components-structure/mail-example-page.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/shadcn-ui/components-structure/mail-example-page.mdx",
      "sourceFileName": "mail-example-page.mdx",
      "sourceFileDir": "guide/codebase-architecture/shadcn-ui/components-structure",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/shadcn-ui/components-structure/mail-example-page"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/shadcn-ui/components-structure/mail-example-page",
    "slugAsParams": "codebase-architecture/shadcn-ui/components-structure/mail-example-page"
  },
  {
    "title": "Shadcn/ui Project Structure\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\n[L: apps/www Structure]\r\n\r\nThis workspace structure is different to what you find in CRUD based Next.js app. Shadcn/ui provides \r\nreusable components that you can copy/paste and also install these components via CLI. This is the \r\nworkspace used to build the [Shadcn/ui website](https://ui.shadcn.com/).\r\n\r\nSince this usecase does not involve any database as there is no authentication or to save user information, \r\nShadcn/ui has the below structure in `www` workspace:\r\n\r\nThis apps/www workspace structure as follows:\r\n\r\n```\r\n__registry__           # Files inside this directory are autogenerated by ./scripts/build-registry.ts\r\n|\r\nactions                # Contains edit-in-v0 button that makes API calls using fetch\r\n|\r\napp                    # app folder contains route groups, components, pages, layouts \r\n|\r\nassets/fonts           # assets/fonts contains the fonts used in Shadcn/ui\r\n| \r\ncomponents             # Contains the components that are used across the pages inside the app folder\r\n|\r\nconfig                 # Contains site.ts that has the meta information and docs.ts to configure the docs\r\n|\r\ncontent/docs           # Contains content for the documentation, this gets rendered statically on https://ui.shadcn.com/docs\r\n|\r\nhooks                  # Contains hook files that are used across the app\r\n|\r\nlib                    # lib folder has the helper functions such as charts.ts, toc.ts etc that perform crucial operations\r\n|\r\npages/api              # Contains api that sends a components.json\r\n|\r\npublic                 # Contains static asstes such as images, site.webmanifest, favicon etc.,\r\n|\r\nregistry               # This folder is very important and is used in scripts/build-registry to __registry__ that is used in CLI\r\n|\r\nscripts                # scripts folder has files such as build-registry, capture-registry and fix-import. These are used in scripts in package.json\r\n|\r\nstyles                 # Contains styles such as globals.css and mdx.css \r\n|\r\ntypes                  # Contains types such as nav.ts, uninst.ts\r\n```\r\n\r\nShadcn/ui does not use tRPC or database, it does have pages/api but that sends a components.json via \r\na GET request and is found to be using fetch to make external calls to v0.\r\n",
      "code": "var Component=(()=>{var u=Object.create;var r=Object.defineProperty;var l=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var y=(t,s)=>()=>(s||t((s={exports:{}}).exports,s),s.exports),b=(t,s)=>{for(var e in s)r(t,e,{get:s[e],enumerable:!0})},i=(t,s,e,o)=>{if(s&&typeof s==\"object\"||typeof s==\"function\")for(let a of f(s))!g.call(t,a)&&a!==e&&r(t,a,{get:()=>s[a],enumerable:!(o=l(s,a))||o.enumerable});return t};var w=(t,s,e)=>(e=t!=null?u(m(t)):{},i(s||!t||!t.__esModule?r(e,\"default\",{value:t,enumerable:!0}):e,t)),C=t=>i(r({},\"__esModule\",{value:!0}),t);var d=y((j,c)=>{c.exports=_jsx_runtime});var x={};b(x,{default:()=>p,frontmatter:()=>_});var n=w(d()),_={title:\"Shadcn/ui Project Structure\"};function h(t){let s={a:\"a\",code:\"code\",p:\"p\",pre:\"pre\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.p,{children:\"[L: apps/www Structure]\"}),`\n`,(0,n.jsxs)(s.p,{children:[`This workspace structure is different to what you find in CRUD based Next.js app. Shadcn/ui provides\\r\nreusable components that you can copy/paste and also install these components via CLI. This is the\\r\nworkspace used to build the `,(0,n.jsx)(s.a,{href:\"https://ui.shadcn.com/\",children:\"Shadcn/ui website\"}),\".\"]}),`\n`,(0,n.jsxs)(s.p,{children:[`Since this usecase does not involve any database as there is no authentication or to save user information,\\r\nShadcn/ui has the below structure in `,(0,n.jsx)(s.code,{children:\"www\"}),\" workspace:\"]}),`\n`,(0,n.jsx)(s.p,{children:\"This apps/www workspace structure as follows:\"}),`\n`,(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{children:`__registry__           # Files inside this directory are autogenerated by ./scripts/build-registry.ts\\r\n|\\r\nactions                # Contains edit-in-v0 button that makes API calls using fetch\\r\n|\\r\napp                    # app folder contains route groups, components, pages, layouts \\r\n|\\r\nassets/fonts           # assets/fonts contains the fonts used in Shadcn/ui\\r\n| \\r\ncomponents             # Contains the components that are used across the pages inside the app folder\\r\n|\\r\nconfig                 # Contains site.ts that has the meta information and docs.ts to configure the docs\\r\n|\\r\ncontent/docs           # Contains content for the documentation, this gets rendered statically on https://ui.shadcn.com/docs\\r\n|\\r\nhooks                  # Contains hook files that are used across the app\\r\n|\\r\nlib                    # lib folder has the helper functions such as charts.ts, toc.ts etc that perform crucial operations\\r\n|\\r\npages/api              # Contains api that sends a components.json\\r\n|\\r\npublic                 # Contains static asstes such as images, site.webmanifest, favicon etc.,\\r\n|\\r\nregistry               # This folder is very important and is used in scripts/build-registry to __registry__ that is used in CLI\\r\n|\\r\nscripts                # scripts folder has files such as build-registry, capture-registry and fix-import. These are used in scripts in package.json\\r\n|\\r\nstyles                 # Contains styles such as globals.css and mdx.css \\r\n|\\r\ntypes                  # Contains types such as nav.ts, uninst.ts\n`})}),`\n`,(0,n.jsx)(s.p,{children:`Shadcn/ui does not use tRPC or database, it does have pages/api but that sends a components.json via\\r\na GET request and is found to be using fetch to make external calls to v0.`})]})}function p(t={}){let{wrapper:s}=t.components||{};return s?(0,n.jsx)(s,{...t,children:(0,n.jsx)(h,{...t})}):h(t)}return C(x);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/shadcn-ui/project-structure/apps-www.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/shadcn-ui/project-structure/apps-www.mdx",
      "sourceFileName": "apps-www.mdx",
      "sourceFileDir": "guide/codebase-architecture/shadcn-ui/project-structure",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/shadcn-ui/project-structure/apps-www"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/shadcn-ui/project-structure/apps-www",
    "slugAsParams": "codebase-architecture/shadcn-ui/project-structure/apps-www"
  },
  {
    "title": "Shadcn/ui Project Structure\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\nShadcn/ui provides beautifully designed accessible, customizable components that you can copy and paste into \r\nyour apps.\r\n\r\nShadcn/ui codebase size is decent, not as large as the likes of Supabase, Cal.com, Lobechat. In this guide, \r\nyou will learn the project structure used in [Shadcn/ui](https://github.com/shadcn-ui/ui).\r\n\r\nInspired by \r\n[Bulletproof-react's Project Structure](https://github.com/alan2207/bulletproof-react/blob/master/docs/project-structure.md), \r\nWe provide an overview of the project's folder structure.\r\n\r\nShadcn/ui is a monorepo and uses [Turborepo build system](https://turbo.build/repo/docs)\r\n\r\nIn this guide, we study the project structure in this order:\r\n- [Root level structure](https://github.com/shadcn-ui/ui)\r\n- [apps/www](https://github.com/shadcn-ui/ui/tree/main/apps/www)\r\n- [packages](https://github.com/shadcn-ui/ui/tree/main/packages)\r\n- [scripts](https://github.com/shadcn-ui/ui/tree/main/scripts)\r\n- [templates/monorepo-next](https://github.com/shadcn-ui/ui/tree/main/templates/monorepo-next)\r\n\r\nYou will find additional tooling and configuration at the root level, \r\nthese are analyzed and documented in [Shadcn/ui tooling](link-to-tooling).\r\n\r\n# References:\r\n1. https://turbo.build/repo/docs\r\n2. https://github.com/alan2207/bulletproof-react/blob/master/docs/project-structure.md\r\n3. https://github.com/shadcn-ui/ui",
      "code": "var Component=(()=>{var d=Object.create;var c=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),j=(n,e)=>{for(var r in e)c(n,r,{get:e[r],enumerable:!0})},h=(n,e,r,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of m(e))!f.call(n,i)&&i!==r&&c(n,i,{get:()=>e[i],enumerable:!(o=p(e,i))||o.enumerable});return n};var w=(n,e,r)=>(r=n!=null?d(b(n)):{},h(e||!n||!n.__esModule?c(r,\"default\",{value:n,enumerable:!0}):r,n)),x=n=>h(c({},\"__esModule\",{value:!0}),n);var a=g((v,s)=>{s.exports=_jsx_runtime});var S={};j(S,{default:()=>u,frontmatter:()=>y});var t=w(a()),y={title:\"Shadcn/ui Project Structure\"};function l(n){let e={a:\"a\",h1:\"h1\",li:\"li\",ol:\"ol\",p:\"p\",ul:\"ul\",...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:`Shadcn/ui provides beautifully designed accessible, customizable components that you can copy and paste into\\r\nyour apps.`}),`\n`,(0,t.jsxs)(e.p,{children:[`Shadcn/ui codebase size is decent, not as large as the likes of Supabase, Cal.com, Lobechat. In this guide,\\r\nyou will learn the project structure used in `,(0,t.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui\",children:\"Shadcn/ui\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[`Inspired by\\r\n`,(0,t.jsx)(e.a,{href:\"https://github.com/alan2207/bulletproof-react/blob/master/docs/project-structure.md\",children:\"Bulletproof-react's Project Structure\"}),`,\\r\nWe provide an overview of the project's folder structure.`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Shadcn/ui is a monorepo and uses \",(0,t.jsx)(e.a,{href:\"https://turbo.build/repo/docs\",children:\"Turborepo build system\"})]}),`\n`,(0,t.jsx)(e.p,{children:\"In this guide, we study the project structure in this order:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui\",children:\"Root level structure\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/apps/www\",children:\"apps/www\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/packages\",children:\"packages\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/scripts\",children:\"scripts\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/templates/monorepo-next\",children:\"templates/monorepo-next\"})}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[`You will find additional tooling and configuration at the root level,\\r\nthese are analyzed and documented in `,(0,t.jsx)(e.a,{href:\"link-to-tooling\",children:\"Shadcn/ui tooling\"}),\".\"]}),`\n`,(0,t.jsx)(e.h1,{id:\"references\",children:\"References:\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://turbo.build/repo/docs\",children:\"https://turbo.build/repo/docs\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/alan2207/bulletproof-react/blob/master/docs/project-structure.md\",children:\"https://github.com/alan2207/bulletproof-react/blob/master/docs/project-structure.md\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui\",children:\"https://github.com/shadcn-ui/ui\"})}),`\n`]})]})}function u(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(l,{...n})}):l(n)}return x(S);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/shadcn-ui/project-structure/introduction.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/shadcn-ui/project-structure/introduction.mdx",
      "sourceFileName": "introduction.mdx",
      "sourceFileDir": "guide/codebase-architecture/shadcn-ui/project-structure",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/shadcn-ui/project-structure/introduction"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/shadcn-ui/project-structure/introduction",
    "slugAsParams": "codebase-architecture/shadcn-ui/project-structure/introduction"
  },
  {
    "title": "Shadcn/ui Project Structure\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\n[L: packages folder]\r\n\r\nThis [packages folder](https://github.com/shadcn-ui/ui/tree/main/packages) has two folders as shown below:\r\n\r\n```\r\ncli           # This package is going to be deprecated soon, used to be a CLI tool to add components.\r\n|\r\nshadcn        # A CLI for adding components to your project.\r\n```\r\n\r\nLet's analyse each of these packages structure.\r\n\r\n# cli package\r\n\r\n[cli package](https://github.com/shadcn-ui/ui/tree/main/packages/cli) has the following structure\r\n\r\n```\r\nsrc           \r\n|\r\n+-- commands            # has the commands used in CLI\r\n|  |\r\n|  +-- add.ts           # add commmand\r\n|  +-- diff.ts          # diff command\r\n|  +-- init.ts          # init command\r\n+-- utils               # contains the utils\r\n|  |\r\n|  +-- registry/        # registry related folder\r\n|  +-- transformer/     # transformer related\r\n|  ...\r\n+-- deprecated.ts       # has the deprecation message\r\n|\r\n+-- index.ts            \r\n|\r\ntest                    # contains CLI testing code\r\n| \r\n+-- commands\r\n|\r\n+-- fixtures\r\n|\r\n+-- utils        \r\n```\r\n\r\n# shadcn package\r\n\r\n[shadcn package](https://github.com/shadcn-ui/ui/tree/main/packages/shadcn) has the following structure\r\n\r\n```\r\nsrc           \r\n|\r\n+-- commands            # has the commands used in CLI\r\n|  |\r\n|  +-- add.ts           # add commmand\r\n|  +-- diff.ts          # diff command\r\n|  +-- init.ts          # init command\r\n+-- migrations          # contains migrate-icons file that migrates icons from one source to another\r\n|\r\n+-- preflights          # this folder has init, migrate and add that do some configuration checking\r\n|\r\n+-- utils               # contains the utils\r\n|  |\r\n|  +-- registry/        # registry related folder\r\n|  +-- transformer/     # transformer related\r\n|  ...\r\n+-- index.ts            \r\n|\r\ntest                    # contains CLI testing code\r\n| \r\n+-- commands\r\n|\r\n+-- fixtures\r\n|\r\n+-- utils        \r\n```\r\n",
      "code": "var Component=(()=>{var l=Object.create;var s=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var k=(r,n)=>()=>(n||r((n={exports:{}}).exports,n),n.exports),x=(r,n)=>{for(var t in n)s(r,t,{get:n[t],enumerable:!0})},i=(r,n,t,c)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let a of p(n))!f.call(r,a)&&a!==t&&s(r,a,{get:()=>n[a],enumerable:!(c=u(n,a))||c.enumerable});return r};var L=(r,n,t)=>(t=r!=null?l(g(r)):{},i(n||!r||!r.__esModule?s(t,\"default\",{value:r,enumerable:!0}):t,r)),C=r=>i(s({},\"__esModule\",{value:!0}),r);var d=k((b,o)=>{o.exports=_jsx_runtime});var y={};x(y,{default:()=>m,frontmatter:()=>j});var e=L(d()),j={title:\"Shadcn/ui Project Structure\"};function h(r){let n={a:\"a\",code:\"code\",h1:\"h1\",p:\"p\",pre:\"pre\",...r.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.p,{children:\"[L: packages folder]\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"This \",(0,e.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/packages\",children:\"packages folder\"}),\" has two folders as shown below:\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{children:`cli           # This package is going to be deprecated soon, used to be a CLI tool to add components.\\r\n|\\r\nshadcn        # A CLI for adding components to your project.\n`})}),`\n`,(0,e.jsx)(n.p,{children:\"Let's analyse each of these packages structure.\"}),`\n`,(0,e.jsx)(n.h1,{id:\"cli-package\",children:\"cli package\"}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/packages/cli\",children:\"cli package\"}),\" has the following structure\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{children:`src           \\r\n|\\r\n+-- commands            # has the commands used in CLI\\r\n|  |\\r\n|  +-- add.ts           # add commmand\\r\n|  +-- diff.ts          # diff command\\r\n|  +-- init.ts          # init command\\r\n+-- utils               # contains the utils\\r\n|  |\\r\n|  +-- registry/        # registry related folder\\r\n|  +-- transformer/     # transformer related\\r\n|  ...\\r\n+-- deprecated.ts       # has the deprecation message\\r\n|\\r\n+-- index.ts            \\r\n|\\r\ntest                    # contains CLI testing code\\r\n| \\r\n+-- commands\\r\n|\\r\n+-- fixtures\\r\n|\\r\n+-- utils        \n`})}),`\n`,(0,e.jsx)(n.h1,{id:\"shadcn-package\",children:\"shadcn package\"}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/packages/shadcn\",children:\"shadcn package\"}),\" has the following structure\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{children:`src           \\r\n|\\r\n+-- commands            # has the commands used in CLI\\r\n|  |\\r\n|  +-- add.ts           # add commmand\\r\n|  +-- diff.ts          # diff command\\r\n|  +-- init.ts          # init command\\r\n+-- migrations          # contains migrate-icons file that migrates icons from one source to another\\r\n|\\r\n+-- preflights          # this folder has init, migrate and add that do some configuration checking\\r\n|\\r\n+-- utils               # contains the utils\\r\n|  |\\r\n|  +-- registry/        # registry related folder\\r\n|  +-- transformer/     # transformer related\\r\n|  ...\\r\n+-- index.ts            \\r\n|\\r\ntest                    # contains CLI testing code\\r\n| \\r\n+-- commands\\r\n|\\r\n+-- fixtures\\r\n|\\r\n+-- utils        \n`})})]})}function m(r={}){let{wrapper:n}=r.components||{};return n?(0,e.jsx)(n,{...r,children:(0,e.jsx)(h,{...r})}):h(r)}return C(y);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/shadcn-ui/project-structure/packages.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/shadcn-ui/project-structure/packages.mdx",
      "sourceFileName": "packages.mdx",
      "sourceFileDir": "guide/codebase-architecture/shadcn-ui/project-structure",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/shadcn-ui/project-structure/packages"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/shadcn-ui/project-structure/packages",
    "slugAsParams": "codebase-architecture/shadcn-ui/project-structure/packages"
  },
  {
    "title": "Shadcn/ui Project Structure\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\n[L: Root level structure]\r\nLet's look at an overview of the project structure of [Shadcn/ui at root level](https://github.com/shadcn-ui/ui).\r\n\r\n```sh\r\napps/www               # `apps/www` folder is workspace.\r\n|\r\npackages               # `packages` folder contains two folders - cli, shadcn.\r\n|\r\nscripts                # `scripts` has only one file named sync-templates.sh.\r\n|\r\ntemplates              # `templates` folder contains monorepo-next template.\r\n```\r\n\r\n> Only folders are listed here, for configuration details please check out Tooling in Shadcn/ui ",
      "code": "var Component=(()=>{var p=Object.create;var o=Object.defineProperty;var F=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var y=(l,e)=>()=>(e||l((e={exports:{}}).exports,e),e.exports),g=(l,e)=>{for(var t in e)o(l,t,{get:e[t],enumerable:!0})},c=(l,e,t,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of u(e))!f.call(l,s)&&s!==t&&o(l,s,{get:()=>e[s],enumerable:!(a=F(e,s))||a.enumerable});return l};var w=(l,e,t)=>(t=l!=null?p(m(l)):{},c(e||!l||!l.__esModule?o(t,\"default\",{value:l,enumerable:!0}):t,l)),x=l=>c(o({},\"__esModule\",{value:!0}),l);var i=y((v,r)=>{r.exports=_jsx_runtime});var k={};g(k,{default:()=>h,frontmatter:()=>b});var n=w(i()),b={title:\"Shadcn/ui Project Structure\"};function d(l){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",div:\"div\",p:\"p\",pre:\"pre\",span:\"span\",...l.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[`[L: Root level structure]\\r\nLet's look at an overview of the project structure of `,(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui\",children:\"Shadcn/ui at root level\"}),\".\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"sh\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"sh\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"apps/www\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"               #\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" `apps/www` folder is workspace.\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"})}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"packages\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"               #\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" `packages` folder contains two folders - cli, shadcn.\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"})}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"scripts\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                #\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" `scripts` has only one file named sync-templates.sh.\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"})}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"templates\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"              #\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" `templates` folder contains monorepo-next template.\"})]})]})})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Only folders are listed here, for configuration details please check out Tooling in Shadcn/ui\"}),`\n`]})]})}function h(l={}){let{wrapper:e}=l.components||{};return e?(0,n.jsx)(e,{...l,children:(0,n.jsx)(d,{...l})}):d(l)}return x(k);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/shadcn-ui/project-structure/root-level.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/shadcn-ui/project-structure/root-level.mdx",
      "sourceFileName": "root-level.mdx",
      "sourceFileDir": "guide/codebase-architecture/shadcn-ui/project-structure",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/shadcn-ui/project-structure/root-level"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/shadcn-ui/project-structure/root-level",
    "slugAsParams": "codebase-architecture/shadcn-ui/project-structure/root-level"
  },
  {
    "title": "Shadcn/ui Project Structure\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\n[L: scripts folder]\r\n\r\nThis [scripts folder](https://github.com/shadcn-ui/ui/tree/main/scripts) has the following structure:\r\n\r\n```\r\nsync-templates.sh        # This script is used in [package.json](https://github.com/shadcn-ui/ui/blob/main/package.json#L39) to sync templates \r\n``` ",
      "code": "var Component=(()=>{var d=Object.create;var c=Object.defineProperty;var l=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var j=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),g=(e,t)=>{for(var s in t)c(e,s,{get:t[s],enumerable:!0})},i=(e,t,s,o)=>{if(t&&typeof t==\"object\"||typeof t==\"function\")for(let r of m(t))!x.call(e,r)&&r!==s&&c(e,r,{get:()=>t[r],enumerable:!(o=l(t,r))||o.enumerable});return e};var _=(e,t,s)=>(s=e!=null?d(f(e)):{},i(t||!e||!e.__esModule?c(s,\"default\",{value:e,enumerable:!0}):s,e)),b=e=>i(c({},\"__esModule\",{value:!0}),e);var h=j((k,a)=>{a.exports=_jsx_runtime});var L={};g(L,{default:()=>u,frontmatter:()=>y});var n=_(h()),y={title:\"Shadcn/ui Project Structure\"};function p(e){let t={a:\"a\",code:\"code\",p:\"p\",pre:\"pre\",...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:\"[L: scripts folder]\"}),`\n`,(0,n.jsxs)(t.p,{children:[\"This \",(0,n.jsx)(t.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/scripts\",children:\"scripts folder\"}),\" has the following structure:\"]}),`\n`,(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{children:`sync-templates.sh        # This script is used in [package.json](https://github.com/shadcn-ui/ui/blob/main/package.json#L39) to sync templates \n`})})]})}function u(e={}){let{wrapper:t}=e.components||{};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}return b(L);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/shadcn-ui/project-structure/scripts.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/shadcn-ui/project-structure/scripts.mdx",
      "sourceFileName": "scripts.mdx",
      "sourceFileDir": "guide/codebase-architecture/shadcn-ui/project-structure",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/shadcn-ui/project-structure/scripts"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/shadcn-ui/project-structure/scripts",
    "slugAsParams": "codebase-architecture/shadcn-ui/project-structure/scripts"
  },
  {
    "title": "Shadcn/ui Project Structure\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\n[L: templates folder]\r\n\r\nThis [templates folder](https://github.com/shadcn-ui/ui/tree/main/templates) has the following structure:\r\n\r\n```\r\nmonorepo-next        # This is a monorepo template generated using [Turbo](https://turbo.build/repo/docs) \r\n``` ",
      "code": "var Component=(()=>{var l=Object.create;var s=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var x=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var _=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=>{for(var r in e)s(t,r,{get:e[r],enumerable:!0})},a=(t,e,r,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of m(e))!f.call(t,o)&&o!==r&&s(t,o,{get:()=>e[o],enumerable:!(c=h(e,o))||c.enumerable});return t};var j=(t,e,r)=>(r=t!=null?l(x(t)):{},a(e||!t||!t.__esModule?s(r,\"default\",{value:t,enumerable:!0}):r,t)),b=t=>a(s({},\"__esModule\",{value:!0}),t);var d=_((C,i)=>{i.exports=_jsx_runtime});var T={};g(T,{default:()=>u,frontmatter:()=>M});var n=j(d()),M={title:\"Shadcn/ui Project Structure\"};function p(t){let e={a:\"a\",code:\"code\",p:\"p\",pre:\"pre\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"[L: templates folder]\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"This \",(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/templates\",children:\"templates folder\"}),\" has the following structure:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`monorepo-next        # This is a monorepo template generated using [Turbo](https://turbo.build/repo/docs) \n`})})]})}function u(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(p,{...t})}):p(t)}return b(T);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/shadcn-ui/project-structure/templates.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/shadcn-ui/project-structure/templates.mdx",
      "sourceFileName": "templates.mdx",
      "sourceFileDir": "guide/codebase-architecture/shadcn-ui/project-structure",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/shadcn-ui/project-structure/templates"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/shadcn-ui/project-structure/templates",
    "slugAsParams": "codebase-architecture/shadcn-ui/project-structure/templates"
  },
  {
    "title": "Supabase Project Structure\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\n[L: apps structure]\r\nLet's look at an overview of the [apps folder structure in Supabase]https://github.com/supabase/supabase/tree/master/apps).\r\n\r\n```sh\r\ndesign-system              # May be code prototypes? I am not sure, could not find a site where this is hosted.\r\n|\r\ndocs                       # Microfrontend hosted at https://supabase.com/docs\r\n|\r\nstudio                     # Microfrontend hosted at https://supabase.com/dashboard\r\n|\r\nwww                        # Microfrontend hosted at https://supabase.com\r\n```\r\n\r\nI wrote an [article about how Supabase uses micro-frontend systems](https://medium.com/@thinkthroo/how-supabase-implemented-micro-frontends-using-multi-zones-in-next-js-0033d740b9d6), \r\ncheck it out",
      "code": "var Component=(()=>{var h=Object.create;var o=Object.defineProperty;var F=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var y=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),b=(n,e)=>{for(var t in e)o(n,t,{get:e[t],enumerable:!0})},l=(n,e,t,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of u(e))!f.call(n,a)&&a!==t&&o(n,a,{get:()=>e[a],enumerable:!(r=F(e,a))||r.enumerable});return n};var g=(n,e,t)=>(t=n!=null?h(m(n)):{},l(e||!n||!n.__esModule?o(t,\"default\",{value:n,enumerable:!0}):t,n)),x=n=>l(o({},\"__esModule\",{value:!0}),n);var d=y((N,c)=>{c.exports=_jsx_runtime});var j={};b(j,{default:()=>p,frontmatter:()=>w});var s=g(d()),w={title:\"Supabase Project Structure\"};function i(n){let e={a:\"a\",code:\"code\",div:\"div\",p:\"p\",pre:\"pre\",span:\"span\",...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.p,{children:[`[L: apps structure]\\r\nLet's look at an overview of the [apps folder structure in Supabase]`,(0,s.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/master/apps\",children:\"https://github.com/supabase/supabase/tree/master/apps\"}),\").\"]}),`\n`,(0,s.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,s.jsx)(e.pre,{\"data-language\":\"sh\",\"data-theme\":\"default\",children:(0,s.jsxs)(e.code,{\"data-language\":\"sh\",\"data-theme\":\"default\",children:[(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"design-system\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"              #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" May be code prototypes? I am not sure, could not find a site where this is hosted.\"})]}),`\n`,(0,s.jsx)(e.span,{className:\"line\",children:(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"})}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"docs\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                       #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Microfrontend hosted at https://supabase.com/docs\"})]}),`\n`,(0,s.jsx)(e.span,{className:\"line\",children:(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"})}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"studio\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                     #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Microfrontend hosted at https://supabase.com/dashboard\"})]}),`\n`,(0,s.jsx)(e.span,{className:\"line\",children:(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"})}),`\n`,(0,s.jsxs)(e.span,{className:\"line\",children:[(0,s.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"www\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                        #\"}),(0,s.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" Microfrontend hosted at https://supabase.com\"})]})]})})}),`\n`,(0,s.jsxs)(e.p,{children:[\"I wrote an \",(0,s.jsx)(e.a,{href:\"https://medium.com/@thinkthroo/how-supabase-implemented-micro-frontends-using-multi-zones-in-next-js-0033d740b9d6\",children:\"article about how Supabase uses micro-frontend systems\"}),`,\\r\ncheck it out`]})]})}function p(n={}){let{wrapper:e}=n.components||{};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(i,{...n})}):i(n)}return x(j);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/supabase/project-structure/apps-structure.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/supabase/project-structure/apps-structure.mdx",
      "sourceFileName": "apps-structure.mdx",
      "sourceFileDir": "guide/codebase-architecture/supabase/project-structure",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/supabase/project-structure/apps-structure"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/supabase/project-structure/apps-structure",
    "slugAsParams": "codebase-architecture/supabase/project-structure/apps-structure"
  },
  {
    "title": "Supabase Project Structure\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "[Architecture: Supabase Project Structure]\r\n[L: Introduction]\r\n\r\nSupabase is an open source Firebase alternative and gives you a dedicated Postgres \r\ndatabase to build your web, mobile, and AI applications.\r\n\r\nSupabase codebase is quite large. In this guide, you will learn the project structure \r\nused in [Supabase](https://github.com/supabase/supabase).\r\n\r\nInspired by \r\n[Bulletproof-react's Project Structure](https://github.com/alan2207/bulletproof-react/blob/master/docs/project-structure.md)\r\n, We provide an overview of the folder structure.\r\n\r\nSupabase is a monorepo and uses [Turborepo build system](https://turbo.build/repo/docs)\r\n\r\nIn this guide, we study the project structure in this order:\r\n1. [Root level structure](https://github.com/supabase/supabase)\r\n2. [apps structure](https://github.com/supabase/supabase/tree/master/apps)\r\n3. [docker structure](https://github.com/supabase/supabase/tree/master/docker)\r\n4. [examples structure](https://github.com/supabase/supabase/tree/master/examples)\r\n5. [i18n structure](https://github.com/supabase/supabase/tree/master/i18n)\r\n6. [packages structure](https://github.com/supabase/supabase/tree/master/packages)\r\n7. [playwright-tests](https://github.com/supabase/supabase/tree/master/playwright-tests)\r\n8. [scripts](https://github.com/supabase/supabase/tree/master/scripts)\r\n9. [supabase](https://github.com/supabase/supabase/tree/master/supabase)\r\n10. [tests](https://github.com/supabase/supabase/tree/master/tests)\r\n11. [vale/styles](https://github.com/supabase/supabase/tree/master/vale/styles)\r\n\r\nYou will find additional tooling and configuration at the root level, \r\nthese are analyzed and documented in Supabase tooling.\r\n\r\n# References:\r\n1. https://turbo.build/repo/docs\r\n2. https://github.com/alan2207/bulletproof-react/blob/master/docs/project-structure.md\r\n3. https://github.com/supabase/supabase",
      "code": "var Component=(()=>{var p=Object.create;var n=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),j=(r,e)=>{for(var s in e)n(r,s,{get:e[s],enumerable:!0})},c=(r,e,s,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of b(e))!f.call(r,a)&&a!==s&&n(r,a,{get:()=>e[a],enumerable:!(i=d(e,a))||i.enumerable});return r};var y=(r,e,s)=>(s=r!=null?p(m(r)):{},c(e||!r||!r.__esModule?n(s,\"default\",{value:r,enumerable:!0}):s,r)),x=r=>c(n({},\"__esModule\",{value:!0}),r);var h=g((_,u)=>{u.exports=_jsx_runtime});var v={};j(v,{default:()=>o,frontmatter:()=>S});var t=y(h()),S={title:\"Supabase Project Structure\"};function l(r){let e={a:\"a\",h1:\"h1\",li:\"li\",ol:\"ol\",p:\"p\",...r.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:`[Architecture: Supabase Project Structure]\\r\n[L: Introduction]`}),`\n`,(0,t.jsx)(e.p,{children:`Supabase is an open source Firebase alternative and gives you a dedicated Postgres\\r\ndatabase to build your web, mobile, and AI applications.`}),`\n`,(0,t.jsxs)(e.p,{children:[`Supabase codebase is quite large. In this guide, you will learn the project structure\\r\nused in `,(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase\",children:\"Supabase\"}),\".\"]}),`\n`,(0,t.jsxs)(e.p,{children:[`Inspired by\\r\n`,(0,t.jsx)(e.a,{href:\"https://github.com/alan2207/bulletproof-react/blob/master/docs/project-structure.md\",children:\"Bulletproof-react's Project Structure\"}),`\\r\n, We provide an overview of the folder structure.`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Supabase is a monorepo and uses \",(0,t.jsx)(e.a,{href:\"https://turbo.build/repo/docs\",children:\"Turborepo build system\"})]}),`\n`,(0,t.jsx)(e.p,{children:\"In this guide, we study the project structure in this order:\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase\",children:\"Root level structure\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/master/apps\",children:\"apps structure\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/master/docker\",children:\"docker structure\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/master/examples\",children:\"examples structure\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/master/i18n\",children:\"i18n structure\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/master/packages\",children:\"packages structure\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/master/playwright-tests\",children:\"playwright-tests\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/master/scripts\",children:\"scripts\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/master/supabase\",children:\"supabase\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/master/tests\",children:\"tests\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/master/vale/styles\",children:\"vale/styles\"})}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:`You will find additional tooling and configuration at the root level,\\r\nthese are analyzed and documented in Supabase tooling.`}),`\n`,(0,t.jsx)(e.h1,{id:\"references\",children:\"References:\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://turbo.build/repo/docs\",children:\"https://turbo.build/repo/docs\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/alan2207/bulletproof-react/blob/master/docs/project-structure.md\",children:\"https://github.com/alan2207/bulletproof-react/blob/master/docs/project-structure.md\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase\",children:\"https://github.com/supabase/supabase\"})}),`\n`]})]})}function o(r={}){let{wrapper:e}=r.components||{};return e?(0,t.jsx)(e,{...r,children:(0,t.jsx)(l,{...r})}):l(r)}return x(v);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/supabase/project-structure/introduction.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/supabase/project-structure/introduction.mdx",
      "sourceFileName": "introduction.mdx",
      "sourceFileDir": "guide/codebase-architecture/supabase/project-structure",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/supabase/project-structure/introduction"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/supabase/project-structure/introduction",
    "slugAsParams": "codebase-architecture/supabase/project-structure/introduction"
  },
  {
    "title": "Supabase Project Structure\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\n[L: Root level structure]\r\nLet's look at an overview of the project structure of [Supabase at root level](https://github.com/supabase/supabase).\r\n\r\n```sh\r\napps                   # `apps` folder contains applications/systems. [Read more](link-to-guide)\r\n|\r\ndocker                 # `docker` folder contains docker related code for self hosting purposes. [Read more](link-to-guide)\r\n|\r\nexamples               # `examples` folder contains Supabase usage examples. [Read more](link-to-guide)\r\n|\r\ni18n                   # `i18n` folder contains README.md in mutiple languages. [Read more](link-to-guide)\r\n|\r\npackages               # `packages` folder contains shareable internal packages used across the monorepo. [Read more](link-to-guide) \r\n|\r\nplaywright-tests       # `playwright-tests` contains tests that test features commonly used in local studio [Read more](link-to-guide)\r\n|\r\nscripts                # `scripts` is an internal-use only folder [Read more](link-to-guide)\r\n|\r\nsupabase\r\n|\r\ntests\r\n|\r\nvale/styles\r\n+-- app               # application layer containing:\r\n|   |                 # this folder might differ based on the meta framework used\r\n|   +-- routes        # application routes / can also be pages\r\n|   +-- app.tsx       # main application component\r\n|   +-- provider.tsx  # application provider that wraps the entire application with different global providers - this might also differ based on meta framework used\r\n|   +-- router.tsx    # application router configuration\r\n+-- assets            # assets folder can contain all the static files such as images, fonts, etc.\r\n|\r\n+-- components        # shared components used across the entire application\r\n```\r\n\r\n# References:\r\n1. https://github.com/supabase/supabase\r\n2. https://turbo.build/repo/docs/crafting-your-repository",
      "code": "var Component=(()=>{var p=Object.create;var a=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var f=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),g=(n,e)=>{for(var s in e)a(n,s,{get:e[s],enumerable:!0})},c=(n,e,s,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of y(e))!u.call(n,o)&&o!==s&&a(n,o,{get:()=>e[o],enumerable:!(r=h(e,o))||r.enumerable});return n};var b=(n,e,s)=>(s=n!=null?p(m(n)):{},c(e||!n||!n.__esModule?a(s,\"default\",{value:n,enumerable:!0}):s,n)),N=n=>c(a({},\"__esModule\",{value:!0}),n);var i=f((v,t)=>{t.exports=_jsx_runtime});var k={};g(k,{default:()=>d,frontmatter:()=>W});var l=b(i()),W={title:\"Supabase Project Structure\"};function F(n){let e={a:\"a\",code:\"code\",div:\"div\",h1:\"h1\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",...n.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(e.p,{children:[`[L: Root level structure]\\r\nLet's look at an overview of the project structure of `,(0,l.jsx)(e.a,{href:\"https://github.com/supabase/supabase\",children:\"Supabase at root level\"}),\".\"]}),`\n`,(0,l.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,l.jsx)(e.pre,{\"data-language\":\"sh\",\"data-theme\":\"default\",children:(0,l.jsxs)(e.code,{\"data-language\":\"sh\",\"data-theme\":\"default\",children:[(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"apps\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                   #\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" `apps` folder contains applications/systems. [Read more](link-to-guide)\"})]}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"})}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"docker\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                 #\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" `docker` folder contains docker related code for self hosting purposes. [Read more](link-to-guide)\"})]}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"})}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"examples\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"               #\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" `examples` folder contains Supabase usage examples. [Read more](link-to-guide)\"})]}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"})}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"i18n\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                   #\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" `i18n` folder contains README.md in mutiple languages. [Read more](link-to-guide)\"})]}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"})}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"packages\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"               #\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" `packages` folder contains shareable internal packages used across the monorepo. [Read more](link-to-guide) \"})]}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"})}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"playwright-tests\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"       #\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" `playwright-tests` contains tests that test features commonly used in local studio [Read more](link-to-guide)\"})]}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"})}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"scripts\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                #\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" `scripts` is an internal-use only folder [Read more](link-to-guide)\"})]}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"supabase\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"tests\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"})}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"vale/styles\"})}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"+--\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" app\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"               #\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" application layer containing:\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"   |\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"                 #\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" this folder might differ based on the meta framework used\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" routes\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"        #\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" application routes / can also be pages\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" app.tsx\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"       #\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" main application component\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" provider.tsx\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"  #\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" application provider that wraps the entire application with different global providers - this might also differ based on meta framework used\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"   +--\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" router.tsx\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"    #\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" application router configuration\"})]}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"+--\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" assets\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"            #\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" assets folder can contain all the static files such as images, fonts, etc.\"})]}),`\n`,(0,l.jsx)(e.span,{className:\"line\",children:(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"|\"})}),`\n`,(0,l.jsxs)(e.span,{className:\"line\",children:[(0,l.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\"+--\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" components\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"        #\"}),(0,l.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" shared components used across the entire application\"})]})]})})}),`\n`,(0,l.jsx)(e.h1,{id:\"references\",children:\"References:\"}),`\n`,(0,l.jsxs)(e.ol,{children:[`\n`,(0,l.jsx)(e.li,{children:(0,l.jsx)(e.a,{href:\"https://github.com/supabase/supabase\",children:\"https://github.com/supabase/supabase\"})}),`\n`,(0,l.jsx)(e.li,{children:(0,l.jsx)(e.a,{href:\"https://turbo.build/repo/docs/crafting-your-repository\",children:\"https://turbo.build/repo/docs/crafting-your-repository\"})}),`\n`]})]})}function d(n={}){let{wrapper:e}=n.components||{};return e?(0,l.jsx)(e,{...n,children:(0,l.jsx)(F,{...n})}):F(n)}return N(k);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/supabase/project-structure/root-level-structure.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/supabase/project-structure/root-level-structure.mdx",
      "sourceFileName": "root-level-structure.mdx",
      "sourceFileDir": "guide/codebase-architecture/supabase/project-structure",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/supabase/project-structure/root-level-structure"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/supabase/project-structure/root-level-structure",
    "slugAsParams": "codebase-architecture/supabase/project-structure/root-level-structure"
  },
  {
    "title": "Tooling In Shadcn-ui/ui\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\n# Tooling at root level\r\n\r\nYou will be learning the configuration used in this large monorepo. Read through this guide to understand how these tools work together.\r\n\r\n## Tools used at root level:\r\n- [.editorconfig](https://github.com/shadcn-ui/ui/blob/main/.editorconfig) \r\n- [.eslintrc.json](https://github.com/shadcn-ui/ui/blob/main/.eslintrc.json)\r\n- [.kodiak.toml](https://github.com/shadcn-ui/ui/blob/main/.kodiak.toml)\r\n- [.npmrc](https://github.com/shadcn-ui/ui/blob/main/.npmrc)\r\n- [.nvmrc](https://github.com/shadcn-ui/ui/blob/main/.nvmrc)\r\n- [.prettierignore](https://github.com/shadcn-ui/ui/blob/main/.prettierignore)\r\n- [package.json](https://github.com/shadcn-ui/ui/blob/main/package.json)\r\n- [pnpm-lock.yaml](https://github.com/shadcn-ui/ui/blob/main/pnpm-lock.yaml)\r\n- [pnpm-workspace.yaml](https://github.com/shadcn-ui/ui/blob/main/pnpm-workspace.yaml)\r\n- [postcss.config.cjs](https://github.com/shadcn-ui/ui/blob/main/postcss.config.cjs)\r\n- [prettier.config.cjs](https://github.com/shadcn-ui/ui/blob/main/prettier.config.cjs)\r\n- [tailwind.config.cjs](https://github.com/shadcn-ui/ui/blob/main/tailwind.config.cjs)\r\n- [tsconfig.json](https://github.com/shadcn-ui/ui/blob/main/tsconfig.json)\r\n- [turbo.json](https://github.com/shadcn-ui/ui/blob/main/turbo.json)\r\n- [vitest.config.ts](https://github.com/shadcn-ui/ui/blob/main/vitest.config.ts)\r\n",
      "code": "var Component=(()=>{var u=Object.create;var h=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var f=(t,i)=>()=>(i||t((i={exports:{}}).exports,i),i.exports),j=(t,i)=>{for(var o in i)h(t,o,{get:i[o],enumerable:!0})},l=(t,i,o,c)=>{if(i&&typeof i==\"object\"||typeof i==\"function\")for(let e of b(i))!p.call(t,e)&&e!==o&&h(t,e,{get:()=>i[e],enumerable:!(c=m(i,e))||c.enumerable});return t};var k=(t,i,o)=>(o=t!=null?u(g(t)):{},l(i||!t||!t.__esModule?h(o,\"default\",{value:t,enumerable:!0}):o,t)),x=t=>l(h({},\"__esModule\",{value:!0}),t);var s=f((y,r)=>{r.exports=_jsx_runtime});var w={};j(w,{default:()=>d,frontmatter:()=>v});var n=k(s()),v={title:\"Tooling In Shadcn-ui/ui\"};function a(t){let i={a:\"a\",h1:\"h1\",h2:\"h2\",li:\"li\",p:\"p\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(i.h1,{id:\"tooling-at-root-level\",children:\"Tooling at root level\"}),`\n`,(0,n.jsx)(i.p,{children:\"You will be learning the configuration used in this large monorepo. Read through this guide to understand how these tools work together.\"}),`\n`,(0,n.jsx)(i.h2,{id:\"tools-used-at-root-level\",children:\"Tools used at root level:\"}),`\n`,(0,n.jsxs)(i.ul,{children:[`\n`,(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/.editorconfig\",children:\".editorconfig\"})}),`\n`,(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/.eslintrc.json\",children:\".eslintrc.json\"})}),`\n`,(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/.kodiak.toml\",children:\".kodiak.toml\"})}),`\n`,(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/.npmrc\",children:\".npmrc\"})}),`\n`,(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/.nvmrc\",children:\".nvmrc\"})}),`\n`,(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/.prettierignore\",children:\".prettierignore\"})}),`\n`,(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/package.json\",children:\"package.json\"})}),`\n`,(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/pnpm-lock.yaml\",children:\"pnpm-lock.yaml\"})}),`\n`,(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/pnpm-workspace.yaml\",children:\"pnpm-workspace.yaml\"})}),`\n`,(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/postcss.config.cjs\",children:\"postcss.config.cjs\"})}),`\n`,(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/prettier.config.cjs\",children:\"prettier.config.cjs\"})}),`\n`,(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/tailwind.config.cjs\",children:\"tailwind.config.cjs\"})}),`\n`,(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/tsconfig.json\",children:\"tsconfig.json\"})}),`\n`,(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/turbo.json\",children:\"turbo.json\"})}),`\n`,(0,n.jsx)(i.li,{children:(0,n.jsx)(i.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/vitest.config.ts\",children:\"vitest.config.ts\"})}),`\n`]})]})}function d(t={}){let{wrapper:i}=t.components||{};return i?(0,n.jsx)(i,{...t,children:(0,n.jsx)(a,{...t})}):a(t)}return x(w);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/shadcn-ui/tooling/1-1-root-level.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/shadcn-ui/tooling/1-1-root-level.mdx",
      "sourceFileName": "1-1-root-level.mdx",
      "sourceFileDir": "guide/codebase-architecture/shadcn-ui/tooling",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/shadcn-ui/tooling/1-1-root-level"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/shadcn-ui/tooling/1-1-root-level",
    "slugAsParams": "codebase-architecture/shadcn-ui/tooling/1-1-root-level"
  },
  {
    "title": "Tooling In Shadcn-ui/ui\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\n## Tools used in `apps/www` app:\r\n- [.prettierignore](https://github.com/shadcn-ui/ui/blob/main/apps/www/.prettierignore)\r\n- [.prettierignore](https://github.com/shadcn-ui/ui/blob/main/apps/www/.prettierignore)\r\n- [contentlayer.config.js](https://github.com/shadcn-ui/ui/blob/main/apps/www/contentlayer.config.js)\r\n- [next-env.d.ts](https://github.com/shadcn-ui/ui/blob/main/apps/www/next-env.d.ts)\r\n- [next.config.mjs](https://github.com/shadcn-ui/ui/blob/main/apps/www/next.config.mjs)\r\n- [package.json](https://github.com/shadcn-ui/ui/blob/main/apps/www/package.json)\r\n- [postcss.config.cjs](https://github.com/shadcn-ui/ui/blob/main/apps/www/postcss.config.cjs)\r\n- [postcss.config.cjs](https://github.com/shadcn-ui/ui/blob/main/apps/www/postcss.config.cjs)\r\n- [tailwind.config.cjs](https://github.com/shadcn-ui/ui/blob/main/apps/www/tailwind.config.cjs)\r\n- [tsconfig.json](https://github.com/shadcn-ui/ui/blob/main/apps/www/tsconfig.json)\r\n- [tsconfig.scripts.json](https://github.com/shadcn-ui/ui/blob/main/apps/www/tsconfig.scripts.json)\r\n",
      "code": "var Component=(()=>{var d=Object.create;var e=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var m=(t,n)=>()=>(n||t((n={exports:{}}).exports,n),n.exports),f=(t,n)=>{for(var c in n)e(t,c,{get:n[c],enumerable:!0})},h=(t,n,c,o)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let s of w(n))!b.call(t,s)&&s!==c&&e(t,s,{get:()=>n[s],enumerable:!(o=u(n,s))||o.enumerable});return t};var j=(t,n,c)=>(c=t!=null?d(g(t)):{},h(n||!t||!t.__esModule?e(c,\"default\",{value:t,enumerable:!0}):c,t)),x=t=>h(e({},\"__esModule\",{value:!0}),t);var r=m((k,a)=>{a.exports=_jsx_runtime});var y={};f(y,{default:()=>p,frontmatter:()=>_});var i=j(r()),_={title:\"Tooling In Shadcn-ui/ui\"};function l(t){let n={a:\"a\",code:\"code\",h2:\"h2\",li:\"li\",ul:\"ul\",...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h2,{id:\"tools-used-in-appswww-app\",children:[\"Tools used in \",(0,i.jsx)(n.code,{children:\"apps/www\"}),\" app:\"]}),`\n`,(0,i.jsxs)(n.ul,{children:[`\n`,(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/apps/www/.prettierignore\",children:\".prettierignore\"})}),`\n`,(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/apps/www/.prettierignore\",children:\".prettierignore\"})}),`\n`,(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/apps/www/contentlayer.config.js\",children:\"contentlayer.config.js\"})}),`\n`,(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/apps/www/next-env.d.ts\",children:\"next-env.d.ts\"})}),`\n`,(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/apps/www/next.config.mjs\",children:\"next.config.mjs\"})}),`\n`,(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/apps/www/package.json\",children:\"package.json\"})}),`\n`,(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/apps/www/postcss.config.cjs\",children:\"postcss.config.cjs\"})}),`\n`,(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/apps/www/postcss.config.cjs\",children:\"postcss.config.cjs\"})}),`\n`,(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/apps/www/tailwind.config.cjs\",children:\"tailwind.config.cjs\"})}),`\n`,(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/apps/www/tsconfig.json\",children:\"tsconfig.json\"})}),`\n`,(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/apps/www/tsconfig.scripts.json\",children:\"tsconfig.scripts.json\"})}),`\n`]})]})}function p(t={}){let{wrapper:n}=t.components||{};return n?(0,i.jsx)(n,{...t,children:(0,i.jsx)(l,{...t})}):l(t)}return x(y);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/shadcn-ui/tooling/1-2-apps-level.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/shadcn-ui/tooling/1-2-apps-level.mdx",
      "sourceFileName": "1-2-apps-level.mdx",
      "sourceFileDir": "guide/codebase-architecture/shadcn-ui/tooling",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/shadcn-ui/tooling/1-2-apps-level"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/shadcn-ui/tooling/1-2-apps-level",
    "slugAsParams": "codebase-architecture/shadcn-ui/tooling/1-2-apps-level"
  },
  {
    "title": "Tooling In Shadcn-ui/ui\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\n## Tools used in `packages/cli` app:\r\n- [.prettierignore](https://github.com/shadcn-ui/ui/blob/main/packages/cli/.prettierignore)\r\n- [CHANGELOG.md](https://github.com/shadcn-ui/ui/blob/main/packages/cli/CHANGELOG.md) \r\n- [package.json](https://github.com/shadcn-ui/ui/blob/main/packages/cli/package.json)\r\n- [tsconfig.json](https://github.com/shadcn-ui/ui/blob/main/packages/cli/tsconfig.json)\r\n- [tsup.config.ts](https://github.com/shadcn-ui/ui/blob/main/packages/cli/tsup.config.ts)\r\n\r\n## Tools used in `packages/shadcn` app:\r\n- [.prettierignore](https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/.prettierignore)\r\n- [CHANGELOG.md](https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/CHANGELOG.md)\r\n- [package.json](https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/package.json)\r\n- [tsconfig.json](https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/tsconfig.json)\r\n- [tsup.config.ts](https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/tsup.config.ts)",
      "code": "var Component=(()=>{var u=Object.create;var s=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var f=(c,n)=>()=>(n||c((n={exports:{}}).exports,n),n.exports),k=(c,n)=>{for(var e in n)s(c,e,{get:n[e],enumerable:!0})},h=(c,n,e,t)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let a of g(n))!b.call(c,a)&&a!==e&&s(c,a,{get:()=>n[a],enumerable:!(t=p(n,a))||t.enumerable});return c};var j=(c,n,e)=>(e=c!=null?u(m(c)):{},h(n||!c||!c.__esModule?s(e,\"default\",{value:c,enumerable:!0}):e,c)),x=c=>h(s({},\"__esModule\",{value:!0}),c);var l=f((L,o)=>{o.exports=_jsx_runtime});var _={};k(_,{default:()=>d,frontmatter:()=>G});var i=j(l()),G={title:\"Tooling In Shadcn-ui/ui\"};function r(c){let n={a:\"a\",code:\"code\",h2:\"h2\",li:\"li\",ul:\"ul\",...c.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h2,{id:\"tools-used-in-packagescli-app\",children:[\"Tools used in \",(0,i.jsx)(n.code,{children:\"packages/cli\"}),\" app:\"]}),`\n`,(0,i.jsxs)(n.ul,{children:[`\n`,(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/packages/cli/.prettierignore\",children:\".prettierignore\"})}),`\n`,(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/packages/cli/CHANGELOG.md\",children:\"CHANGELOG.md\"})}),`\n`,(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/packages/cli/package.json\",children:\"package.json\"})}),`\n`,(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/packages/cli/tsconfig.json\",children:\"tsconfig.json\"})}),`\n`,(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/packages/cli/tsup.config.ts\",children:\"tsup.config.ts\"})}),`\n`]}),`\n`,(0,i.jsxs)(n.h2,{id:\"tools-used-in-packagesshadcn-app\",children:[\"Tools used in \",(0,i.jsx)(n.code,{children:\"packages/shadcn\"}),\" app:\"]}),`\n`,(0,i.jsxs)(n.ul,{children:[`\n`,(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/.prettierignore\",children:\".prettierignore\"})}),`\n`,(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/CHANGELOG.md\",children:\"CHANGELOG.md\"})}),`\n`,(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/package.json\",children:\"package.json\"})}),`\n`,(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/tsconfig.json\",children:\"tsconfig.json\"})}),`\n`,(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/tsup.config.ts\",children:\"tsup.config.ts\"})}),`\n`]})]})}function d(c={}){let{wrapper:n}=c.components||{};return n?(0,i.jsx)(n,{...c,children:(0,i.jsx)(r,{...c})}):r(c)}return x(_);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/shadcn-ui/tooling/1-3-packages-level.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/shadcn-ui/tooling/1-3-packages-level.mdx",
      "sourceFileName": "1-3-packages-level.mdx",
      "sourceFileDir": "guide/codebase-architecture/shadcn-ui/tooling",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/shadcn-ui/tooling/1-3-packages-level"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/shadcn-ui/tooling/1-3-packages-level",
    "slugAsParams": "codebase-architecture/shadcn-ui/tooling/1-3-packages-level"
  },
  {
    "title": "Tooling In Shadcn-ui/ui\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\nIn this guide, you will learn the tooling used in [Shadcn-ui/ui repository](https://github.com/shadcn-ui/ui).\r\n\r\n# What's Tooling?\r\nYou might be wondering what tooling means. If you check out [Bulletproof React's Project Standards](https://github.com/alan2207/bulletproof-react/blob/master/docs/project-standards.md),\r\nit describes tools such as ESLint, Prettier, Husky etc.,\r\n\r\nSimilarly, in this guide, we provide an in-depth shadcn-ui/ui tooling analysis.\r\n\r\n# Shadcn-ui/ui Tooling \r\n\r\nShadcn-ui/ui is a monorepo, you will find more information about monorepo in [Project Structure](https://app.thinkthroo.com/architecture#project-structure).\r\n\r\nFor us to study the tooling used in this monorepo, we would have to study the tooling used:\r\n1. At [root level](https://github.com/shadcn-ui/ui)\r\n2. In [apps in shadcn-ui/ui monorepo.](https://github.com/shadcn-ui/ui/tree/main/apps/www)\r\n3. In [packages in shadcn-ui/ui monorepo.](https://github.com/shadcn-ui/ui/tree/main/packages)\r\n\r\nTooling might vary based on an app or packages.\r\n\r\nReferences:\r\n1. https://github.com/shadcn-ui/ui/tree/main/apps/www\r\n2. https://github.com/shadcn-ui/ui/tree/main/packages\r\n3. https://github.com/alan2207/bulletproof-react/blob/master/docs/project-standards.md",
      "code": "var Component=(()=>{var u=Object.create;var r=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var f=(t,n)=>()=>(n||t((n={exports:{}}).exports,n),n.exports),w=(t,n)=>{for(var e in n)r(t,e,{get:n[e],enumerable:!0})},h=(t,n,e,a)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let o of m(n))!b.call(t,o)&&o!==e&&r(t,o,{get:()=>n[o],enumerable:!(a=p(n,o))||a.enumerable});return t};var j=(t,n,e)=>(e=t!=null?u(g(t)):{},h(n||!t||!t.__esModule?r(e,\"default\",{value:t,enumerable:!0}):e,t)),y=t=>h(r({},\"__esModule\",{value:!0}),t);var s=f((_,c)=>{c.exports=_jsx_runtime});var k={};w(k,{default:()=>d,frontmatter:()=>x});var i=j(s()),x={title:\"Tooling In Shadcn-ui/ui\"};function l(t){let n={a:\"a\",h1:\"h1\",li:\"li\",ol:\"ol\",p:\"p\",...t.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:[\"In this guide, you will learn the tooling used in \",(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui\",children:\"Shadcn-ui/ui repository\"}),\".\"]}),`\n`,(0,i.jsx)(n.h1,{id:\"whats-tooling\",children:\"What's Tooling?\"}),`\n`,(0,i.jsxs)(n.p,{children:[\"You might be wondering what tooling means. If you check out \",(0,i.jsx)(n.a,{href:\"https://github.com/alan2207/bulletproof-react/blob/master/docs/project-standards.md\",children:\"Bulletproof React's Project Standards\"}),`,\\r\nit describes tools such as ESLint, Prettier, Husky etc.,`]}),`\n`,(0,i.jsx)(n.p,{children:\"Similarly, in this guide, we provide an in-depth shadcn-ui/ui tooling analysis.\"}),`\n`,(0,i.jsx)(n.h1,{id:\"shadcn-uiui-tooling\",children:\"Shadcn-ui/ui Tooling\"}),`\n`,(0,i.jsxs)(n.p,{children:[\"Shadcn-ui/ui is a monorepo, you will find more information about monorepo in \",(0,i.jsx)(n.a,{href:\"https://app.thinkthroo.com/architecture#project-structure\",children:\"Project Structure\"}),\".\"]}),`\n`,(0,i.jsx)(n.p,{children:\"For us to study the tooling used in this monorepo, we would have to study the tooling used:\"}),`\n`,(0,i.jsxs)(n.ol,{children:[`\n`,(0,i.jsxs)(n.li,{children:[\"At \",(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui\",children:\"root level\"})]}),`\n`,(0,i.jsxs)(n.li,{children:[\"In \",(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/apps/www\",children:\"apps in shadcn-ui/ui monorepo.\"})]}),`\n`,(0,i.jsxs)(n.li,{children:[\"In \",(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/packages\",children:\"packages in shadcn-ui/ui monorepo.\"})]}),`\n`]}),`\n`,(0,i.jsx)(n.p,{children:\"Tooling might vary based on an app or packages.\"}),`\n`,(0,i.jsx)(n.p,{children:\"References:\"}),`\n`,(0,i.jsxs)(n.ol,{children:[`\n`,(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/apps/www\",children:\"https://github.com/shadcn-ui/ui/tree/main/apps/www\"})}),`\n`,(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/packages\",children:\"https://github.com/shadcn-ui/ui/tree/main/packages\"})}),`\n`,(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:\"https://github.com/alan2207/bulletproof-react/blob/master/docs/project-standards.md\",children:\"https://github.com/alan2207/bulletproof-react/blob/master/docs/project-standards.md\"})}),`\n`]})]})}function d(t={}){let{wrapper:n}=t.components||{};return n?(0,i.jsx)(n,{...t,children:(0,i.jsx)(l,{...t})}):l(t)}return y(k);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/shadcn-ui/tooling/introduction.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/shadcn-ui/tooling/introduction.mdx",
      "sourceFileName": "introduction.mdx",
      "sourceFileDir": "guide/codebase-architecture/shadcn-ui/tooling",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/shadcn-ui/tooling/introduction"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/shadcn-ui/tooling/introduction",
    "slugAsParams": "codebase-architecture/shadcn-ui/tooling/introduction"
  },
  {
    "title": "Supabase Security\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\nIn this guide, we look at security practices used in Supabase. \r\n\r\nFollowing these resources, \r\n- [Security in Next.js](https://nextjs.org/blog/security-nextjs-server-components-actions) \r\n- [Bulletproof React's Security](https://github.com/alan2207/bulletproof-react/blob/master/docs/security.md)\r\n- [Strap's authentication guide](https://strapi.io/integrations/nextjs-cms/topics/next-js-authentication)\r\n\r\nWe analyze the following concepts in the Supabase source code:\r\n\r\n1. Authentication\r\n2. Authorization\r\n3. Data Handling Model\r\n\r\n[L: Authentication]\r\nSupabase makes authentication easy to implement but have you ever wondered how Supabase implemented its own authentication on their\r\napplication?\r\n\r\nIn this guide, we will analyze the Authentication mechanism in Supabase.\r\n\r\nSupabase uses pages router, at the time of writing this guide. Let's first analyze the sign in with email and password\r\n\r\n[Insert screenshot of email and password screen here]\r\n\r\nThere is [pages/sign-in.tsx](https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx), it has a lot of\r\nimports, but in this guide, out focus is on [SigninForm](https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx#L51)\r\n\r\n[Insert screenshot of Line - https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx#L51]\r\n\r\n## SigninForm\r\n\r\n[sign-in page](https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx#L51) has a component named [SigninForm](https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/SignIn/SignInForm.tsx#L22)\r\n\r\nLet's analyze sign-in form.\r\n\r\n```\r\n<Form\r\n      validateOnBlur\r\n      id=\"signIn-form\"\r\n      initialValues={{ email: '', password: '' }}\r\n      validationSchema={signInSchema}\r\n      onSubmit={onSignIn}\r\n    >\r\n      {({ isSubmitting }: { isSubmitting: boolean }) => {\r\n        return (\r\n          <div className=\"flex flex-col gap-4\">\r\n            <Input\r\n              id=\"email\"\r\n              name=\"email\"\r\n              type=\"email\"\r\n              label=\"Email\"\r\n              placeholder=\"you@example.com\"\r\n              disabled={isSubmitting}\r\n              autoComplete=\"email\"\r\n            />\r\n\r\n            <div className=\"relative\">\r\n              <Input\r\n                id=\"password\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                placeholder=\"&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;\"\r\n                disabled={isSubmitting}\r\n                autoComplete=\"current-password\"\r\n              />\r\n\r\n              {/* positioned using absolute instead of labelOptional prop so tabbing between inputs works smoothly */}\r\n              <Link\r\n                href=\"/forgot-password\"\r\n                className=\"absolute top-0 right-0 text-sm text-foreground-lighter\"\r\n              >\r\n                Forgot Password?\r\n              </Link>\r\n            </div>\r\n\r\n            <div className=\"self-center\">\r\n              <HCaptcha\r\n                ref={captchaRef}\r\n                sitekey={process.env.NEXT_PUBLIC_HCAPTCHA_SITE_KEY!}\r\n                size=\"invisible\"\r\n                onVerify={(token) => {\r\n                  setCaptchaToken(token)\r\n                }}\r\n                onExpire={() => {\r\n                  setCaptchaToken(null)\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            <LastSignInWrapper type=\"email\">\r\n              <Button\r\n                block\r\n                form=\"signIn-form\"\r\n                htmlType=\"submit\"\r\n                size=\"large\"\r\n                disabled={isSubmitting}\r\n                loading={isSubmitting}\r\n              >\r\n                Sign In\r\n              </Button>\r\n            </LastSignInWrapper>\r\n          </div>\r\n        )\r\n      }}\r\n    </Form>\r\n```\r\n\r\nForm, Input, Button are imported from [internal package ui](link-to-ui-package).\r\n\r\nLet's focus on the following functionalities:\r\n1. validationSchema\r\n2. onSubmit\r\n3. HCaptcha\r\n\r\n### validationSchema\r\n\r\n```\r\nconst signInSchema = object({\r\n  email: string().email('Must be a valid email').required('Email is required'),\r\n  password: string().required('Password is required'),\r\n})\r\n```\r\n\r\nSupabase uses [yup](https://www.npmjs.com/package/yup), a schema builder for runtime value parsing and validation\r\n\r\n[Insert screenshot of this line - https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/SignIn/SignInForm.tsx#L87C13-L87C38]\r\n\r\n## onSubmit\r\n\r\nonSubmit calls a function named `onSignIn`.\r\n\r\n[Insert screenshot of line - https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/SignIn/SignInForm.tsx#L88]\r\n\r\nThere's a lot happening inside [onSignIn function](https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/SignIn/SignInForm.tsx#L30).\r\n\r\n```\r\nconst toastId = toast.loading('Signing in...')\r\n\r\nlet token = captchaToken\r\nif (!token) {\r\n      const captchaResponse = await captchaRef.current?.execute({ async: true })\r\n      token = captchaResponse?.response ?? null\r\n}\r\n``` \r\ntoast is from [sonner package](https://www.npmjs.com/package/sonner)\r\n\r\n```\r\nlet token = captchaToken\r\nif (!token) {\r\n      const captchaResponse = await captchaRef.current?.execute({ async: true })\r\n      token = captchaResponse?.response ?? null\r\n}\r\n```\r\n\r\ncaptchaRef is reference to HCaptcha element\r\n\r\n```\r\n      <HCaptcha\r\n            ref={captchaRef}\r\n            sitekey={process.env.NEXT_PUBLIC_HCAPTCHA_SITE_KEY!}\r\n            size=\"invisible\"\r\n            onVerify={(token) => {\r\n            setCaptchaToken(token)\r\n            }}\r\n            onExpire={() => {\r\n            setCaptchaToken(null)\r\n            }}\r\n      />\r\n```\r\nHCaptcha is imported at the top of the file.\r\n\r\n```\r\nimport HCaptcha from '@hcaptcha/react-hcaptcha'\r\n```\r\n\r\nToken is updated based on captchaResponse.\r\n\r\nWith HCaptcha, you can send upto 1 million requests per month on free plan.\r\n\r\n```\r\nconst { error } = await auth.signInWithPassword({\r\n      email,\r\n      password,\r\n      options: { captchaToken: token ?? undefined },\r\n})\r\n```\r\n\r\n`auth` is imported from `lib/gotrue`\r\n\r\n```\r\nimport { auth, buildPathWithParams, getReturnToPath } from 'lib/gotrue'\r\n```\r\n\r\n> Note: Our focus is on the way the authentication is implemented. This means, we look at the sequence of operations performed,\r\nat a high level.\r\n\r\n### When the auth succeeds\r\n\r\nWhen the auth succeeds, the following are operations are performed based on error flag.\r\n\r\n```\r\nif (!error) {\r\n      setLastSignIn('email')\r\n      try {\r\n        const data = await getMfaAuthenticatorAssuranceLevel()\r\n        if (data) {\r\n          if (data.currentLevel !== data.nextLevel) {\r\n            toast.success(`You need to provide your second factor authentication`, { id: toastId })\r\n            const url = buildPathWithParams('/sign-in-mfa')\r\n            router.replace(url)\r\n            return\r\n          }\r\n        }\r\n\r\n        toast.success(`Signed in successfully!`, { id: toastId })\r\n        await queryClient.resetQueries()\r\n        const returnTo = getReturnToPath()\r\n        // since we're already on the /sign-in page, prevent redirect loops\r\n        router.push(returnTo === '/sign-in' ? '/projects' : returnTo)\r\n      } catch (error: any) {\r\n        toast.error(`Failed to sign in: ${(error as AuthError).message}`, { id: toastId })\r\n        Sentry.captureMessage('[CRITICAL] Failed to sign in via EP: ' + error.message)\r\n      }\r\n    }\r\n```\r\n\r\nLet's analyze the operations in the above snippet.\r\n\r\n```\r\nsetLastSignIn('email')\r\ntry {\r\n  const data = await getMfaAuthenticatorAssuranceLevel()\r\n  if (data) {\r\n    if (data.currentLevel !== data.nextLevel) {\r\n      toast.success(`You need to provide your second factor authentication`, { id: toastId })\r\n      const url = buildPathWithParams('/sign-in-mfa')\r\n      router.replace(url)\r\n      return\r\n    }\r\n  }\r\n```\r\nThis code handles the second factor authentication, notice how it redirects to a different url - `/sign-in-mfa`\r\nbased on the data returned by [getMfaAuthenticatorAssuranceLevel](https://github.com/supabase/supabase/blob/master/apps/studio/data/profile/mfa-authenticator-assurance-level-query.ts#L9)\r\n\r\n```\r\ntoast.success(`Signed in successfully!`, { id: toastId })\r\nawait queryClient.resetQueries()\r\nconst returnTo = getReturnToPath()\r\n// since we're already on the /sign-in page, prevent redirect loops\r\nrouter.push(returnTo === '/sign-in' ? '/projects' : returnTo)\r\n```\r\n\r\ntoast is shown, queryClient resets queries, supabase uses a query param - `returnTo` to redirect a user\r\nto the page they came from to \"signin\".\r\n\r\nThe comment there explains the mechanism to prevent redirect loops.\r\n\r\n```\r\ncatch (error: any) {\r\n  toast.error(`Failed to sign in: ${(error as AuthError).message}`, { id: toastId })\r\n  Sentry.captureMessage('[CRITICAL] Failed to sign in via EP: ' + error.message)\r\n}\r\n```\r\n\r\nWhen the sign in fails, it is reported to Sentry vai `captureMessage`.\r\n\r\n```\r\nelse {\r\n      setCaptchaToken(null)\r\n      captchaRef.current?.resetCaptcha()\r\n      \r\n      if (error.message.toLowerCase() === 'email not confirmed') {\r\n        return toast.error(\r\n          'Account has not been verified, please check the link sent to your email',\r\n          { id: toastId }\r\n        )\r\n      }\r\n      \r\n      toast.error(error.message, { id: toastId })\r\n      }\r\n}\r\n```\r\n\r\n`setCaptchaToken` is set to null, captchaRef is reset.\r\n\r\n`if (error.message.toLowerCase() === 'email not confirmed') {` - this checks if the error message contains 'email not confirmed'\r\nand shows a toast.error with a message.\r\n\r\nSummary of onSubmit operations:\r\n1. Show a toaster\r\n2. Get token from captchaResponse\r\n3. Call the signinWithPassword function\r\n4. If there's no error, check if the 2FA is enabled and redirect to get the 2FA code.\r\n5. If there's no 2FA, `router.push` based on redirectTo but with ternary operation to prevent redirect loop\r\n6. If for any reason steps 4, 5 fail, error is reported to Sentry via `captureMessage`\r\n7. If there's an error in signin, captcha is reset. In case the account is not verified, a toaster is shown\r\n\r\n\r\n# References:\r\n1. https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx\r\n2. https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/SignIn/SignInForm.tsx#L22\r\n3. https://www.hcaptcha.com/\r\n4. https://github.com/supabase/supabase/blob/master/apps/studio/lib/gotrue.ts\r\n5. https://github.com/supabase/supabase/blob/master/apps/studio/data/profile/mfa-authenticator-assurance-level-query.ts#L9",
      "code": "var Component=(()=>{var d=Object.create;var a=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),S=(r,e)=>{for(var t in e)a(r,t,{get:e[t],enumerable:!0})},o=(r,e,t,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of m(e))!g.call(r,s)&&s!==t&&a(r,s,{get:()=>e[s],enumerable:!(i=u(e,s))||i.enumerable});return r};var w=(r,e,t)=>(t=r!=null?d(b(r)):{},o(e||!r||!r.__esModule?a(t,\"default\",{value:r,enumerable:!0}):t,r)),I=r=>o(a({},\"__esModule\",{value:!0}),r);var l=f((L,c)=>{c.exports=_jsx_runtime});var v={};S(v,{default:()=>p,frontmatter:()=>y});var n=w(l()),y={title:\"Supabase Security\"};function h(r){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",ul:\"ul\",...r.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"In this guide, we look at security practices used in Supabase.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Following these resources,\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://nextjs.org/blog/security-nextjs-server-components-actions\",children:\"Security in Next.js\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/alan2207/bulletproof-react/blob/master/docs/security.md\",children:\"Bulletproof React's Security\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://strapi.io/integrations/nextjs-cms/topics/next-js-authentication\",children:\"Strap's authentication guide\"})}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"We analyze the following concepts in the Supabase source code:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Authentication\"}),`\n`,(0,n.jsx)(e.li,{children:\"Authorization\"}),`\n`,(0,n.jsx)(e.li,{children:\"Data Handling Model\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:`[L: Authentication]\\r\nSupabase makes authentication easy to implement but have you ever wondered how Supabase implemented its own authentication on their\\r\napplication?`}),`\n`,(0,n.jsx)(e.p,{children:\"In this guide, we will analyze the Authentication mechanism in Supabase.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Supabase uses pages router, at the time of writing this guide. Let's first analyze the sign in with email and password\"}),`\n`,(0,n.jsx)(e.p,{children:\"[Insert screenshot of email and password screen here]\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"There is \",(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx\",children:\"pages/sign-in.tsx\"}),`, it has a lot of\\r\nimports, but in this guide, out focus is on `,(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx#L51\",children:\"SigninForm\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert screenshot of Line - \",(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx#L51\",children:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx#L51\"}),\"]\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"signinform\",children:\"SigninForm\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx#L51\",children:\"sign-in page\"}),\" has a component named \",(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/SignIn/SignInForm.tsx#L22\",children:\"SigninForm\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"Let's analyze sign-in form.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`<Form\\r\n      validateOnBlur\\r\n      id=\"signIn-form\"\\r\n      initialValues={{ email: '', password: '' }}\\r\n      validationSchema={signInSchema}\\r\n      onSubmit={onSignIn}\\r\n    >\\r\n      {({ isSubmitting }: { isSubmitting: boolean }) => {\\r\n        return (\\r\n          <div className=\"flex flex-col gap-4\">\\r\n            <Input\\r\n              id=\"email\"\\r\n              name=\"email\"\\r\n              type=\"email\"\\r\n              label=\"Email\"\\r\n              placeholder=\"you@example.com\"\\r\n              disabled={isSubmitting}\\r\n              autoComplete=\"email\"\\r\n            />\\r\n\\r\n            <div className=\"relative\">\\r\n              <Input\\r\n                id=\"password\"\\r\n                name=\"password\"\\r\n                type=\"password\"\\r\n                label=\"Password\"\\r\n                placeholder=\"&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;\"\\r\n                disabled={isSubmitting}\\r\n                autoComplete=\"current-password\"\\r\n              />\\r\n\\r\n              {/* positioned using absolute instead of labelOptional prop so tabbing between inputs works smoothly */}\\r\n              <Link\\r\n                href=\"/forgot-password\"\\r\n                className=\"absolute top-0 right-0 text-sm text-foreground-lighter\"\\r\n              >\\r\n                Forgot Password?\\r\n              </Link>\\r\n            </div>\\r\n\\r\n            <div className=\"self-center\">\\r\n              <HCaptcha\\r\n                ref={captchaRef}\\r\n                sitekey={process.env.NEXT_PUBLIC_HCAPTCHA_SITE_KEY!}\\r\n                size=\"invisible\"\\r\n                onVerify={(token) => {\\r\n                  setCaptchaToken(token)\\r\n                }}\\r\n                onExpire={() => {\\r\n                  setCaptchaToken(null)\\r\n                }}\\r\n              />\\r\n            </div>\\r\n\\r\n            <LastSignInWrapper type=\"email\">\\r\n              <Button\\r\n                block\\r\n                form=\"signIn-form\"\\r\n                htmlType=\"submit\"\\r\n                size=\"large\"\\r\n                disabled={isSubmitting}\\r\n                loading={isSubmitting}\\r\n              >\\r\n                Sign In\\r\n              </Button>\\r\n            </LastSignInWrapper>\\r\n          </div>\\r\n        )\\r\n      }}\\r\n    </Form>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Form, Input, Button are imported from \",(0,n.jsx)(e.a,{href:\"link-to-ui-package\",children:\"internal package ui\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Let's focus on the following functionalities:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"validationSchema\"}),`\n`,(0,n.jsx)(e.li,{children:\"onSubmit\"}),`\n`,(0,n.jsx)(e.li,{children:\"HCaptcha\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"validationschema\",children:\"validationSchema\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const signInSchema = object({\\r\n  email: string().email('Must be a valid email').required('Email is required'),\\r\n  password: string().required('Password is required'),\\r\n})\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Supabase uses \",(0,n.jsx)(e.a,{href:\"https://www.npmjs.com/package/yup\",children:\"yup\"}),\", a schema builder for runtime value parsing and validation\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert screenshot of this line - \",(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/SignIn/SignInForm.tsx#L87C13-L87C38\",children:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/SignIn/SignInForm.tsx#L87C13-L87C38\"}),\"]\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"onsubmit\",children:\"onSubmit\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"onSubmit calls a function named \",(0,n.jsx)(e.code,{children:\"onSignIn\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert screenshot of line - \",(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/SignIn/SignInForm.tsx#L88\",children:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/SignIn/SignInForm.tsx#L88\"}),\"]\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"There's a lot happening inside \",(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/SignIn/SignInForm.tsx#L30\",children:\"onSignIn function\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const toastId = toast.loading('Signing in...')\\r\n\\r\nlet token = captchaToken\\r\nif (!token) {\\r\n      const captchaResponse = await captchaRef.current?.execute({ async: true })\\r\n      token = captchaResponse?.response ?? null\\r\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"toast is from \",(0,n.jsx)(e.a,{href:\"https://www.npmjs.com/package/sonner\",children:\"sonner package\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`let token = captchaToken\\r\nif (!token) {\\r\n      const captchaResponse = await captchaRef.current?.execute({ async: true })\\r\n      token = captchaResponse?.response ?? null\\r\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"captchaRef is reference to HCaptcha element\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`      <HCaptcha\\r\n            ref={captchaRef}\\r\n            sitekey={process.env.NEXT_PUBLIC_HCAPTCHA_SITE_KEY!}\\r\n            size=\"invisible\"\\r\n            onVerify={(token) => {\\r\n            setCaptchaToken(token)\\r\n            }}\\r\n            onExpire={() => {\\r\n            setCaptchaToken(null)\\r\n            }}\\r\n      />\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"HCaptcha is imported at the top of the file.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import HCaptcha from '@hcaptcha/react-hcaptcha'\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Token is updated based on captchaResponse.\"}),`\n`,(0,n.jsx)(e.p,{children:\"With HCaptcha, you can send upto 1 million requests per month on free plan.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const { error } = await auth.signInWithPassword({\\r\n      email,\\r\n      password,\\r\n      options: { captchaToken: token ?? undefined },\\r\n})\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"auth\"}),\" is imported from \",(0,n.jsx)(e.code,{children:\"lib/gotrue\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import { auth, buildPathWithParams, getReturnToPath } from 'lib/gotrue'\n`})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:`Note: Our focus is on the way the authentication is implemented. This means, we look at the sequence of operations performed,\\r\nat a high level.`}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"when-the-auth-succeeds\",children:\"When the auth succeeds\"}),`\n`,(0,n.jsx)(e.p,{children:\"When the auth succeeds, the following are operations are performed based on error flag.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`if (!error) {\\r\n      setLastSignIn('email')\\r\n      try {\\r\n        const data = await getMfaAuthenticatorAssuranceLevel()\\r\n        if (data) {\\r\n          if (data.currentLevel !== data.nextLevel) {\\r\n            toast.success(\\`You need to provide your second factor authentication\\`, { id: toastId })\\r\n            const url = buildPathWithParams('/sign-in-mfa')\\r\n            router.replace(url)\\r\n            return\\r\n          }\\r\n        }\\r\n\\r\n        toast.success(\\`Signed in successfully!\\`, { id: toastId })\\r\n        await queryClient.resetQueries()\\r\n        const returnTo = getReturnToPath()\\r\n        // since we're already on the /sign-in page, prevent redirect loops\\r\n        router.push(returnTo === '/sign-in' ? '/projects' : returnTo)\\r\n      } catch (error: any) {\\r\n        toast.error(\\`Failed to sign in: \\${(error as AuthError).message}\\`, { id: toastId })\\r\n        Sentry.captureMessage('[CRITICAL] Failed to sign in via EP: ' + error.message)\\r\n      }\\r\n    }\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Let's analyze the operations in the above snippet.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`setLastSignIn('email')\\r\ntry {\\r\n  const data = await getMfaAuthenticatorAssuranceLevel()\\r\n  if (data) {\\r\n    if (data.currentLevel !== data.nextLevel) {\\r\n      toast.success(\\`You need to provide your second factor authentication\\`, { id: toastId })\\r\n      const url = buildPathWithParams('/sign-in-mfa')\\r\n      router.replace(url)\\r\n      return\\r\n    }\\r\n  }\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This code handles the second factor authentication, notice how it redirects to a different url - \",(0,n.jsx)(e.code,{children:\"/sign-in-mfa\"}),`\\r\nbased on the data returned by `,(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/data/profile/mfa-authenticator-assurance-level-query.ts#L9\",children:\"getMfaAuthenticatorAssuranceLevel\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`toast.success(\\`Signed in successfully!\\`, { id: toastId })\\r\nawait queryClient.resetQueries()\\r\nconst returnTo = getReturnToPath()\\r\n// since we're already on the /sign-in page, prevent redirect loops\\r\nrouter.push(returnTo === '/sign-in' ? '/projects' : returnTo)\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"toast is shown, queryClient resets queries, supabase uses a query param - \",(0,n.jsx)(e.code,{children:\"returnTo\"}),` to redirect a user\\r\nto the page they came from to \"signin\".`]}),`\n`,(0,n.jsx)(e.p,{children:\"The comment there explains the mechanism to prevent redirect loops.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`catch (error: any) {\\r\n  toast.error(\\`Failed to sign in: \\${(error as AuthError).message}\\`, { id: toastId })\\r\n  Sentry.captureMessage('[CRITICAL] Failed to sign in via EP: ' + error.message)\\r\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"When the sign in fails, it is reported to Sentry vai \",(0,n.jsx)(e.code,{children:\"captureMessage\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`else {\\r\n      setCaptchaToken(null)\\r\n      captchaRef.current?.resetCaptcha()\\r\n      \\r\n      if (error.message.toLowerCase() === 'email not confirmed') {\\r\n        return toast.error(\\r\n          'Account has not been verified, please check the link sent to your email',\\r\n          { id: toastId }\\r\n        )\\r\n      }\\r\n      \\r\n      toast.error(error.message, { id: toastId })\\r\n      }\\r\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"setCaptchaToken\"}),\" is set to null, captchaRef is reset.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"if (error.message.toLowerCase() === 'email not confirmed') {\"}),` - this checks if the error message contains 'email not confirmed'\\r\nand shows a toast.error with a message.`]}),`\n`,(0,n.jsx)(e.p,{children:\"Summary of onSubmit operations:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Show a toaster\"}),`\n`,(0,n.jsx)(e.li,{children:\"Get token from captchaResponse\"}),`\n`,(0,n.jsx)(e.li,{children:\"Call the signinWithPassword function\"}),`\n`,(0,n.jsx)(e.li,{children:\"If there's no error, check if the 2FA is enabled and redirect to get the 2FA code.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"If there's no 2FA, \",(0,n.jsx)(e.code,{children:\"router.push\"}),\" based on redirectTo but with ternary operation to prevent redirect loop\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"If for any reason steps 4, 5 fail, error is reported to Sentry via \",(0,n.jsx)(e.code,{children:\"captureMessage\"})]}),`\n`,(0,n.jsx)(e.li,{children:\"If there's an error in signin, captcha is reset. In case the account is not verified, a toaster is shown\"}),`\n`]}),`\n`,(0,n.jsx)(e.h1,{id:\"references\",children:\"References:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx\",children:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/SignIn/SignInForm.tsx#L22\",children:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/SignIn/SignInForm.tsx#L22\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.hcaptcha.com/\",children:\"https://www.hcaptcha.com/\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/lib/gotrue.ts\",children:\"https://github.com/supabase/supabase/blob/master/apps/studio/lib/gotrue.ts\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/data/profile/mfa-authenticator-assurance-level-query.ts#L9\",children:\"https://github.com/supabase/supabase/blob/master/apps/studio/data/profile/mfa-authenticator-assurance-level-query.ts#L9\"})}),`\n`]})]})}function p(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,{...r,children:(0,n.jsx)(h,{...r})}):h(r)}return I(v);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/supabase/security/introduction.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/supabase/security/introduction.mdx",
      "sourceFileName": "introduction.mdx",
      "sourceFileDir": "guide/codebase-architecture/supabase/security",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/supabase/security/introduction"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/supabase/security/introduction",
    "slugAsParams": "codebase-architecture/supabase/security/introduction"
  },
  {
    "title": "Tooling in Supabase\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\nIn this guide, you will learn the tooling used in [Supabase repository](https://github.com/supabase/supabase).\r\n\r\n# What's Tooling?\r\nYou might be wondering what tooling means. If you check out [Bulletproof React's Project Standards](https://github.com/alan2207/bulletproof-react/blob/master/docs/project-standards.md),\r\nit describes tools such as ESLint, Prettier, Husky etc.,\r\n\r\nSimilarly, in this guide, we provide an in-depth Supabase tooling analysis.\r\n\r\n# Supabase Tooling\r\n\r\nSupabase is a monorepo, you will find more information about monorepo in [Project Structure](https://app.thinkthroo.com/architecture#project-structure).\r\n\r\nFor us to study the tooling used in this monorepo, we would have to study the tooling used:\r\n1. At [root level](https://github.com/supabase/supabase)\r\n2. In [apps in supabase monorepo.](https://github.com/supabase/supabase/tree/master/apps)\r\n3. In [packages in supabase monorepo.](https://github.com/supabase/supabase/tree/master/packages)\r\n\r\nTooling might vary based on an app or packages.\r\n\r\n## Tools used at root level:\r\n- [.github](https://github.com/supabase/supabase/tree/master/.github)\r\n- [.dockerignore](https://github.com/supabase/supabase/blob/master/.dockerignore)\r\n- [.gitignore](https://github.com/supabase/supabase/blob/master/.gitignore)\r\n- [.misspell-fixer.ignore](https://github.com/supabase/supabase/blob/master/.misspell-fixer.ignore)\r\n- [.npmrc](https://github.com/supabase/supabase/blob/master/.npmrc)\r\n- [.nvmrc](https://github.com/supabase/supabase/blob/master/.nvmrc)\r\n- [.prettierignore](https://github.com/supabase/supabase/blob/master/.prettierignore)\r\n- [.prettierrc](https://github.com/supabase/supabase/blob/master/.prettierrc)\r\n- [.vale.ini](https://github.com/supabase/supabase/blob/master/.vale.ini)\r\n- [Makefile](https://github.com/supabase/supabase/blob/master/Makefile)\r\n- [babel.config.js](https://github.com/supabase/supabase/blob/master/babel.config.js)\r\n- [package.json](https://github.com/supabase/supabase/blob/master/package.json)\r\n- [tsconfig.json](https://github.com/supabase/supabase/blob/master/tsconfig.json)\r\n- [turbo.json](https://github.com/supabase/supabase/blob/master/turbo.json)\r\n\r\n## Tools used in `apps/www`:\r\n\r\n## Tools used in `apps/studio`:\r\n\r\n## Tools used in `apps/docs`:\r\n\r\n## Tools used in `apps/design-system`:\r\n\r\n## Tools used in `packages/ai-commands`:\r\n\r\n## Tools used in `packages/api-types`:\r\n\r\n## Tools used in `packages/build-icons`:\r\n\r\n## Tools used in `common`:\r\n\r\n## Tools used in `config`:\r\n\r\n## Tools used in `eslint-config-supabase`:\r\n\r\n## Tools used in `generator`:\r\n\r\n## Tools used in `icons`:\r\n\r\n## Tools used in `pg-meta`:\r\n\r\n## Tools used in `shared-data`:\r\n\r\n## Tools used in `tsconfig`:\r\n\r\n## Tools used in `ui-patterns`:\r\n\r\n## Tools used in `ui`:",
      "code": "var Component=(()=>{var u=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var f=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),T=(i,e)=>{for(var n in e)a(i,n,{get:e[n],enumerable:!0})},r=(i,e,n,t)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of b(e))!m.call(i,o)&&o!==n&&a(i,o,{get:()=>e[o],enumerable:!(t=p(e,o))||t.enumerable});return i};var k=(i,e,n)=>(n=i!=null?u(g(i)):{},r(e||!i||!i.__esModule?a(n,\"default\",{value:i,enumerable:!0}):n,i)),j=i=>r(a({},\"__esModule\",{value:!0}),i);var d=f((v,l)=>{l.exports=_jsx_runtime});var y={};T(y,{default:()=>c,frontmatter:()=>w});var s=k(d()),w={title:\"Tooling in Supabase\"};function h(i){let e={a:\"a\",code:\"code\",h1:\"h1\",h2:\"h2\",li:\"li\",ol:\"ol\",p:\"p\",ul:\"ul\",...i.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(e.p,{children:[\"In this guide, you will learn the tooling used in \",(0,s.jsx)(e.a,{href:\"https://github.com/supabase/supabase\",children:\"Supabase repository\"}),\".\"]}),`\n`,(0,s.jsx)(e.h1,{id:\"whats-tooling\",children:\"What's Tooling?\"}),`\n`,(0,s.jsxs)(e.p,{children:[\"You might be wondering what tooling means. If you check out \",(0,s.jsx)(e.a,{href:\"https://github.com/alan2207/bulletproof-react/blob/master/docs/project-standards.md\",children:\"Bulletproof React's Project Standards\"}),`,\\r\nit describes tools such as ESLint, Prettier, Husky etc.,`]}),`\n`,(0,s.jsx)(e.p,{children:\"Similarly, in this guide, we provide an in-depth Supabase tooling analysis.\"}),`\n`,(0,s.jsx)(e.h1,{id:\"supabase-tooling\",children:\"Supabase Tooling\"}),`\n`,(0,s.jsxs)(e.p,{children:[\"Supabase is a monorepo, you will find more information about monorepo in \",(0,s.jsx)(e.a,{href:\"https://app.thinkthroo.com/architecture#project-structure\",children:\"Project Structure\"}),\".\"]}),`\n`,(0,s.jsx)(e.p,{children:\"For us to study the tooling used in this monorepo, we would have to study the tooling used:\"}),`\n`,(0,s.jsxs)(e.ol,{children:[`\n`,(0,s.jsxs)(e.li,{children:[\"At \",(0,s.jsx)(e.a,{href:\"https://github.com/supabase/supabase\",children:\"root level\"})]}),`\n`,(0,s.jsxs)(e.li,{children:[\"In \",(0,s.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/master/apps\",children:\"apps in supabase monorepo.\"})]}),`\n`,(0,s.jsxs)(e.li,{children:[\"In \",(0,s.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/master/packages\",children:\"packages in supabase monorepo.\"})]}),`\n`]}),`\n`,(0,s.jsx)(e.p,{children:\"Tooling might vary based on an app or packages.\"}),`\n`,(0,s.jsx)(e.h2,{id:\"tools-used-at-root-level\",children:\"Tools used at root level:\"}),`\n`,(0,s.jsxs)(e.ul,{children:[`\n`,(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/master/.github\",children:\".github\"})}),`\n`,(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/.dockerignore\",children:\".dockerignore\"})}),`\n`,(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/.gitignore\",children:\".gitignore\"})}),`\n`,(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/.misspell-fixer.ignore\",children:\".misspell-fixer.ignore\"})}),`\n`,(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/.npmrc\",children:\".npmrc\"})}),`\n`,(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/.nvmrc\",children:\".nvmrc\"})}),`\n`,(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/.prettierignore\",children:\".prettierignore\"})}),`\n`,(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/.prettierrc\",children:\".prettierrc\"})}),`\n`,(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/.vale.ini\",children:\".vale.ini\"})}),`\n`,(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/Makefile\",children:\"Makefile\"})}),`\n`,(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/babel.config.js\",children:\"babel.config.js\"})}),`\n`,(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/package.json\",children:\"package.json\"})}),`\n`,(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/tsconfig.json\",children:\"tsconfig.json\"})}),`\n`,(0,s.jsx)(e.li,{children:(0,s.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/turbo.json\",children:\"turbo.json\"})}),`\n`]}),`\n`,(0,s.jsxs)(e.h2,{id:\"tools-used-in-appswww\",children:[\"Tools used in \",(0,s.jsx)(e.code,{children:\"apps/www\"}),\":\"]}),`\n`,(0,s.jsxs)(e.h2,{id:\"tools-used-in-appsstudio\",children:[\"Tools used in \",(0,s.jsx)(e.code,{children:\"apps/studio\"}),\":\"]}),`\n`,(0,s.jsxs)(e.h2,{id:\"tools-used-in-appsdocs\",children:[\"Tools used in \",(0,s.jsx)(e.code,{children:\"apps/docs\"}),\":\"]}),`\n`,(0,s.jsxs)(e.h2,{id:\"tools-used-in-appsdesign-system\",children:[\"Tools used in \",(0,s.jsx)(e.code,{children:\"apps/design-system\"}),\":\"]}),`\n`,(0,s.jsxs)(e.h2,{id:\"tools-used-in-packagesai-commands\",children:[\"Tools used in \",(0,s.jsx)(e.code,{children:\"packages/ai-commands\"}),\":\"]}),`\n`,(0,s.jsxs)(e.h2,{id:\"tools-used-in-packagesapi-types\",children:[\"Tools used in \",(0,s.jsx)(e.code,{children:\"packages/api-types\"}),\":\"]}),`\n`,(0,s.jsxs)(e.h2,{id:\"tools-used-in-packagesbuild-icons\",children:[\"Tools used in \",(0,s.jsx)(e.code,{children:\"packages/build-icons\"}),\":\"]}),`\n`,(0,s.jsxs)(e.h2,{id:\"tools-used-in-common\",children:[\"Tools used in \",(0,s.jsx)(e.code,{children:\"common\"}),\":\"]}),`\n`,(0,s.jsxs)(e.h2,{id:\"tools-used-in-config\",children:[\"Tools used in \",(0,s.jsx)(e.code,{children:\"config\"}),\":\"]}),`\n`,(0,s.jsxs)(e.h2,{id:\"tools-used-in-eslint-config-supabase\",children:[\"Tools used in \",(0,s.jsx)(e.code,{children:\"eslint-config-supabase\"}),\":\"]}),`\n`,(0,s.jsxs)(e.h2,{id:\"tools-used-in-generator\",children:[\"Tools used in \",(0,s.jsx)(e.code,{children:\"generator\"}),\":\"]}),`\n`,(0,s.jsxs)(e.h2,{id:\"tools-used-in-icons\",children:[\"Tools used in \",(0,s.jsx)(e.code,{children:\"icons\"}),\":\"]}),`\n`,(0,s.jsxs)(e.h2,{id:\"tools-used-in-pg-meta\",children:[\"Tools used in \",(0,s.jsx)(e.code,{children:\"pg-meta\"}),\":\"]}),`\n`,(0,s.jsxs)(e.h2,{id:\"tools-used-in-shared-data\",children:[\"Tools used in \",(0,s.jsx)(e.code,{children:\"shared-data\"}),\":\"]}),`\n`,(0,s.jsxs)(e.h2,{id:\"tools-used-in-tsconfig\",children:[\"Tools used in \",(0,s.jsx)(e.code,{children:\"tsconfig\"}),\":\"]}),`\n`,(0,s.jsxs)(e.h2,{id:\"tools-used-in-ui-patterns\",children:[\"Tools used in \",(0,s.jsx)(e.code,{children:\"ui-patterns\"}),\":\"]}),`\n`,(0,s.jsxs)(e.h2,{id:\"tools-used-in-ui\",children:[\"Tools used in \",(0,s.jsx)(e.code,{children:\"ui\"}),\":\"]})]})}function c(i={}){let{wrapper:e}=i.components||{};return e?(0,s.jsx)(e,{...i,children:(0,s.jsx)(h,{...i})}):h(i)}return j(y);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/supabase/tooling/introduction.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/supabase/tooling/introduction.mdx",
      "sourceFileName": "introduction.mdx",
      "sourceFileDir": "guide/codebase-architecture/supabase/tooling",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/supabase/tooling/introduction"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/supabase/tooling/introduction",
    "slugAsParams": "codebase-architecture/supabase/tooling/introduction"
  },
  {
    "title": "State management in Supabase\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\n[C: State management in creating a new project in Supabase]\r\n\r\nIn this guide, we analyse how adding a new project in your Supabase dashboard is handled. We \r\nreview the code behind this action and find out how the state is managed once a new project \r\nis added.\r\n\r\n# Where is the Create Project button?\r\n\r\nLocating where the \"Create Project\" button in the Supabase codebase is a good start. On the UI, you\r\nwill find this button at the route `/dashboard/projects`.\r\n\r\n[Insert screenshot of - Create Project button]\r\n\r\nIn the [projects.tsx, at line 171](https://github.com/supabase/supabase/blob/master/apps/studio/pages/projects.tsx#L71),\r\nyou will find this below code:\r\n\r\n```js\r\n{!navLayoutV2 && (\r\n  <div className=\"p-5\">\r\n    {IS_PLATFORM && projectCreationEnabled && isSuccess && (\r\n      <HomePageActions\r\n        search={search}\r\n        filterStatus={filterStatus}\r\n        setSearch={setSearch}\r\n        setFilterStatus={setFilterStatus}\r\n        organizations={organizations}\r\n      />\r\n    )}\r\n  </div>\r\n}\r\n```\r\n\r\n[HomePageActions.tsx](https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/HomePageActions.tsx#L33)\r\nrenders this below shown elements.\r\n\r\n[Insert screenshot of list of actions above projects]\r\n\r\nIt is time to locate the code for to \"New Project\" button. In the [HomePageActions.tsx](https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/HomePageActions.tsx#L47),\r\nyou will find this below code snippet - \r\n\r\n```\r\n<DropdownMenu>\r\n    <DropdownMenuTrigger asChild>\r\n      <Button type=\"primary\">\r\n        <span>New project</span>\r\n      </Button>\r\n    </DropdownMenuTrigger>\r\n    <DropdownMenuContent side=\"bottom\" align=\"center\">\r\n      <>\r\n        <DropdownMenuLabel>Choose organization</DropdownMenuLabel>\r\n        {organizations\r\n          .sort((a, b) => a.name.localeCompare(b.name))\r\n          .map((x) => (\r\n            <DropdownMenuItem key={x.slug} onClick={() => router.push(`/new/${x.slug}`)}>\r\n              {x.name}\r\n            </DropdownMenuItem>\r\n          ))}\r\n      </>\r\n    </DropdownMenuContent>\r\n</DropdownMenu>\r\n```\r\n\r\nWhen you click on New Project, what you see is a dropdown asking to choose the organization to which you will add\r\na project. At this point, there is no state management in place. A simple redirect to `/new/x.slug` occurs, here \r\nx.slug belongs to a organization's slug.\r\n\r\nWe still haven't learnt what happens after you add a new project, so far we found out that a redirect to \r\n`/new/{x.slug}` occurs. We now need to find the page.tsx based on this route.\r\n\r\n# new/[slug].tsx\r\n\r\nFollowing along the redirect to `/new/[slug].tsx`, we need to find the source code for this page. In the \r\n[pages/new/[slug].tsx](https://github.com/supabase/supabase/blob/master/apps/studio/pages/new/%5Bslug%5D.tsx), you\r\nwill find the code that renders this route.\r\n\r\nThis page shows a form and onSubmit, it redirects you to `/project/${res.ref}/building`. This below code snippet\r\nis picked from [/new/[slug].tsx](https://github.com/supabase/supabase/blob/master/apps/studio/pages/new/%5Bslug%5D.tsx#L371)\r\n\r\n```\r\n return (\r\n    <Form_Shadcn_ {...form}>\r\n      <form onSubmit={form.handleSubmit(onSubmit)}>\r\n        <Panel\r\n          loading={!isOrganizationsSuccess || isLoadingFreeProjectLimitCheck}\r\n          title={\r\n            <div key=\"panel-title\">\r\n              <h3>Create a new project</h3>\r\n```\r\n\r\n[handleSubmit function](https://github.com/supabase/supabase/blob/master/apps/studio/pages/new/%5Bslug%5D.tsx#L327) \r\ncalls a method named createProject at the end of the function.\r\n\r\n```\r\nfunction onSubmit() {\r\n  // ...\r\n  if (postgresVersion) {\r\n      if (!postgresVersion.match(/1[2-9]\\..*/)) {\r\n        toast.error(\r\n          `Invalid Postgres version, should start with a number between 12-19, a dot and additional characters, i.e. 15.2 or 15.2.0-3`\r\n        )\r\n      }\r\n\r\n      data['customSupabaseRequest'] = {\r\n        ami: { search_tags: { 'tag:postgresVersion': postgresVersion } },\r\n      }\r\n    }\r\n\r\n    createProject(data)\r\n}\r\n```\r\n\r\n[createProject function](https://github.com/supabase/supabase/blob/master/apps/studio/pages/new/%5Bslug%5D.tsx#L180) \r\nis a mutate function returned by `useProjectCreateMutation` hook. Check out the API layer to learn more about \r\nthese hooks.\r\n\r\n```\r\nconst {\r\n  mutate: createProject,\r\n  isLoading: isCreatingNewProject,\r\n  isSuccess: isSuccessNewProject,\r\n} = useProjectCreateMutation({\r\n  onSuccess: (res) => {\r\n    router.push(`/project/${res.ref}/building`)\r\n  },\r\n})\r\n```\r\n\r\nYou add project information such as name etc., and on sumit, you are redirected to a different page. There isn't much \r\nhassle and no complicated state management.",
      "code": "var Component=(()=>{var p=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var F=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var b=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),y=(r,e)=>{for(var t in e)o(r,t,{get:e[t],enumerable:!0})},l=(r,e,t,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of F(e))!g.call(r,s)&&s!==t&&o(r,s,{get:()=>e[s],enumerable:!(a=u(e,s))||a.enumerable});return r};var w=(r,e,t)=>(t=r!=null?p(m(r)):{},l(e||!r||!r.__esModule?o(t,\"default\",{value:r,enumerable:!0}):t,r)),f=r=>l(o({},\"__esModule\",{value:!0}),r);var i=b((P,c)=>{c.exports=_jsx_runtime});var x={};y(x,{default:()=>h,frontmatter:()=>j});var n=w(i()),j={title:\"State management in Supabase\"};function d(r){let e={a:\"a\",code:\"code\",div:\"div\",h1:\"h1\",p:\"p\",pre:\"pre\",span:\"span\",...r.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"[C: State management in creating a new project in Supabase]\"}),`\n`,(0,n.jsx)(e.p,{children:`In this guide, we analyse how adding a new project in your Supabase dashboard is handled. We\\r\nreview the code behind this action and find out how the state is managed once a new project\\r\nis added.`}),`\n`,(0,n.jsx)(e.h1,{id:\"where-is-the-create-project-button\",children:\"Where is the Create Project button?\"}),`\n`,(0,n.jsxs)(e.p,{children:[`Locating where the \"Create Project\" button in the Supabase codebase is a good start. On the UI, you\\r\nwill find this button at the route `,(0,n.jsx)(e.code,{children:\"/dashboard/projects\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"[Insert screenshot of - Create Project button]\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In the \",(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/projects.tsx#L71\",children:\"projects.tsx, at line 171\"}),`,\\r\nyou will find this below code:`]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"js\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"js\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"{!\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\"navLayoutV2 \"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"&&\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" (\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"  <\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\"div className\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:'\"p-5\"'}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\">\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"    {\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\"IS_PLATFORM \"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"&&\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" projectCreationEnabled \"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"&&\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" isSuccess \"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"&&\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" (\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"      <\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\"HomePageActions\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\"        search\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"={\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\"search\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"}\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\"        filterStatus\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"={\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\"filterStatus\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"}\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\"        setSearch\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"={\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\"setSearch\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"}\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\"        setFilterStatus\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"={\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\"setFilterStatus\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"}\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\"        organizations\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"={\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\"organizations\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"}\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"      />\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"    )}\"})}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"  </\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\"div\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\">\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\"}\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/HomePageActions.tsx#L33\",children:\"HomePageActions.tsx\"}),`\\r\nrenders this below shown elements.`]}),`\n`,(0,n.jsx)(e.p,{children:\"[Insert screenshot of list of actions above projects]\"}),`\n`,(0,n.jsxs)(e.p,{children:['It is time to locate the code for to \"New Project\" button. In the ',(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/HomePageActions.tsx#L47\",children:\"HomePageActions.tsx\"}),`,\\r\nyou will find this below code snippet -`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`<DropdownMenu>\\r\n    <DropdownMenuTrigger asChild>\\r\n      <Button type=\"primary\">\\r\n        <span>New project</span>\\r\n      </Button>\\r\n    </DropdownMenuTrigger>\\r\n    <DropdownMenuContent side=\"bottom\" align=\"center\">\\r\n      <>\\r\n        <DropdownMenuLabel>Choose organization</DropdownMenuLabel>\\r\n        {organizations\\r\n          .sort((a, b) => a.name.localeCompare(b.name))\\r\n          .map((x) => (\\r\n            <DropdownMenuItem key={x.slug} onClick={() => router.push(\\`/new/\\${x.slug}\\`)}>\\r\n              {x.name}\\r\n            </DropdownMenuItem>\\r\n          ))}\\r\n      </>\\r\n    </DropdownMenuContent>\\r\n</DropdownMenu>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[`When you click on New Project, what you see is a dropdown asking to choose the organization to which you will add\\r\na project. At this point, there is no state management in place. A simple redirect to `,(0,n.jsx)(e.code,{children:\"/new/x.slug\"}),` occurs, here\\r\nx.slug belongs to a organization's slug.`]}),`\n`,(0,n.jsxs)(e.p,{children:[`We still haven't learnt what happens after you add a new project, so far we found out that a redirect to\\r\n`,(0,n.jsx)(e.code,{children:\"/new/{x.slug}\"}),\" occurs. We now need to find the page.tsx based on this route.\"]}),`\n`,(0,n.jsx)(e.h1,{id:\"newslugtsx\",children:\"new/[slug].tsx\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Following along the redirect to \",(0,n.jsx)(e.code,{children:\"/new/[slug].tsx\"}),`, we need to find the source code for this page. In the\\r\n`,(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/new/%5Bslug%5D.tsx\",children:\"pages/new/[slug].tsx\"}),`, you\\r\nwill find the code that renders this route.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"This page shows a form and onSubmit, it redirects you to \",(0,n.jsx)(e.code,{children:\"/project/${res.ref}/building\"}),`. This below code snippet\\r\nis picked from `,(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/new/%5Bslug%5D.tsx#L371\",children:\"/new/[slug].tsx\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:` return (\\r\n    <Form_Shadcn_ {...form}>\\r\n      <form onSubmit={form.handleSubmit(onSubmit)}>\\r\n        <Panel\\r\n          loading={!isOrganizationsSuccess || isLoadingFreeProjectLimitCheck}\\r\n          title={\\r\n            <div key=\"panel-title\">\\r\n              <h3>Create a new project</h3>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/new/%5Bslug%5D.tsx#L327\",children:\"handleSubmit function\"}),`\\r\ncalls a method named createProject at the end of the function.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`function onSubmit() {\\r\n  // ...\\r\n  if (postgresVersion) {\\r\n      if (!postgresVersion.match(/1[2-9]\\\\..*/)) {\\r\n        toast.error(\\r\n          \\`Invalid Postgres version, should start with a number between 12-19, a dot and additional characters, i.e. 15.2 or 15.2.0-3\\`\\r\n        )\\r\n      }\\r\n\\r\n      data['customSupabaseRequest'] = {\\r\n        ami: { search_tags: { 'tag:postgresVersion': postgresVersion } },\\r\n      }\\r\n    }\\r\n\\r\n    createProject(data)\\r\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/new/%5Bslug%5D.tsx#L180\",children:\"createProject function\"}),`\\r\nis a mutate function returned by `,(0,n.jsx)(e.code,{children:\"useProjectCreateMutation\"}),` hook. Check out the API layer to learn more about\\r\nthese hooks.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const {\\r\n  mutate: createProject,\\r\n  isLoading: isCreatingNewProject,\\r\n  isSuccess: isSuccessNewProject,\\r\n} = useProjectCreateMutation({\\r\n  onSuccess: (res) => {\\r\n    router.push(\\`/project/\\${res.ref}/building\\`)\\r\n  },\\r\n})\n`})}),`\n`,(0,n.jsx)(e.p,{children:`You add project information such as name etc., and on sumit, you are redirected to a different page. There isn't much\\r\nhassle and no complicated state management.`})]})}function h(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,{...r,children:(0,n.jsx)(d,{...r})}):d(r)}return f(x);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/supabase/state-management/create-project.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/supabase/state-management/create-project.mdx",
      "sourceFileName": "create-project.mdx",
      "sourceFileDir": "guide/codebase-architecture/supabase/state-management",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/supabase/state-management/create-project"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/supabase/state-management/create-project",
    "slugAsParams": "codebase-architecture/supabase/state-management/create-project"
  },
  {
    "title": "State management in Supabase\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\n[C: State management in creating a table in Supabase]\r\n\r\nIn this guide, we analyse how state management in creating a new table in Table Editor works. We review the \r\ncode behind this action and find out how the state is managed once a new table is added.\r\n\r\n# Where is the New Table button? \r\n\r\nLocating the \"New Table\" button in the Supabase codebase is a good start. On the UI, you will find this \r\nbutton at the route `dashboard/project/{projectId}/editor`.\r\n\r\n[Insert screenshot of - New Table button]\r\n\r\nSupabase, at the time of writing this guide, uses `pages` router. You get the hint from the url, this button\r\nwill be found `project/[some-id]/editor`. There is [/studio/pages/project/[ref]/editor/index.tsx](https://github.com/supabase/supabase/blob/master/apps/studio/pages/project/%5Bref%5D/editor/index.tsx#L1)\r\nbut it is straight forward to locate the \"New Table\" because this button is not found in this file, \r\nbut by looking at the below we could make some assumptions and try to locate this button. \r\n\r\n```\r\nconst TableEditorPage: NextPageWithLayout = () => {\r\n  const { ref: projectRef } = useParams()\r\n  const router = useRouter()\r\n\r\n  const onTableCreated = (table: { id: number }) => {\r\n    router.push(`/project/${projectRef}/editor/${table.id}`)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <EmptyState />\r\n      <SidePanelEditor onTableCreated={onTableCreated} />\r\n    </>\r\n  )\r\n}\r\n\r\nTableEditorPage.getLayout = (page) => (\r\n  <ProjectContextFromParamsProvider>\r\n    <TableEditorLayout>{page}</TableEditorLayout>\r\n  </ProjectContextFromParamsProvider>\r\n)\r\n```\r\n\r\n`Empty State` also shows a button that lets you create new table. `SidePanelEditor` is the side panel editor\r\nthat provides you a form to fill out the table information. We will need to understand how the state is \r\nmanaged in this form soon. \r\n\r\nAt this point, we should look at [TableEditorLayout](https://github.com/supabase/supabase/blob/master/apps/studio/components/layouts/TableEditorLayout/TableEditorLayout.tsx#L9).\r\nAt [line 13 in TableEditorLayout](https://github.com/supabase/supabase/blob/master/apps/studio/components/layouts/TableEditorLayout/TableEditorLayout.tsx#L13),\r\nyou will find this below line:\r\n\r\n```\r\nconst tableEditorMenu = useMemo(() => <TableEditorMenu />, [])\r\n```\r\n\r\nFinally in [TableEditorMenu.tsx](https://github.com/supabase/supabase/blob/master/apps/studio/components/layouts/TableEditorLayout/TableEditorMenu.tsx#L131),\r\nyou will find the New Table button.\r\n\r\n```\r\n<ButtonTooltip\r\n  block\r\n  title=\"Create a new table\"\r\n  name=\"New table\"\r\n  disabled={!canCreateTables}\r\n  size=\"tiny\"\r\n  icon={<Plus size={14} strokeWidth={1.5} className=\"text-foreground-muted\" />}\r\n  type=\"default\"\r\n  className=\"justify-start\"\r\n  onClick={snap.onAddTable}\r\n  tooltip={{\r\n    content: {\r\n      side: 'bottom',\r\n      text: !canCreateTables\r\n        ? 'You need additional permissions to create tables'\r\n        : undefined,\r\n    },\r\n  }}\r\n>\r\n  New table\r\n</ButtonTooltip>\r\n```\r\n\r\n# What happens on clicking New Table button?\r\n\r\nIn this below code, you see that onClick calls a function `snap.onAddTable`\r\n\r\n```\r\n<ButtonTooltip\r\n  block\r\n  title=\"Create a new table\"\r\n  name=\"New table\"\r\n  disabled={!canCreateTables}\r\n  size=\"tiny\"\r\n  icon={<Plus size={14} strokeWidth={1.5} className=\"text-foreground-muted\" />}\r\n  type=\"default\"\r\n  className=\"justify-start\"\r\n  onClick={snap.onAddTable}\r\n  tooltip={{\r\n    content: {\r\n      side: 'bottom',\r\n      text: !canCreateTables\r\n        ? 'You need additional permissions to create tables'\r\n        : undefined,\r\n    },\r\n  }}\r\n>\r\n  New table\r\n</ButtonTooltip>\r\n```\r\n\r\nAt [line 46](https://github.com/supabase/supabase/blob/master/apps/studio/components/layouts/TableEditorLayout/TableEditorMenu.tsx#L46), \r\nyou will see that snap is a value returned by a function `useTableEditorStateSnapshot`.\r\n\r\n```\r\nconst snap = useTableEditorStateSnapshot()\r\n```",
      "code": "var Component=(()=>{var b=Object.create;var r=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var w=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),T=(n,e)=>{for(var o in e)r(n,o,{get:e[o],enumerable:!0})},s=(n,e,o,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of p(e))!f.call(n,a)&&a!==o&&r(n,a,{get:()=>e[a],enumerable:!(i=h(e,a))||i.enumerable});return n};var y=(n,e,o)=>(o=n!=null?b(m(n)):{},s(e||!n||!n.__esModule?r(o,\"default\",{value:n,enumerable:!0}):o,n)),g=n=>s(r({},\"__esModule\",{value:!0}),n);var d=w((j,l)=>{l.exports=_jsx_runtime});var E={};T(E,{default:()=>u,frontmatter:()=>x});var t=y(d()),x={title:\"State management in Supabase\"};function c(n){let e={a:\"a\",code:\"code\",h1:\"h1\",p:\"p\",pre:\"pre\",...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:\"[C: State management in creating a table in Supabase]\"}),`\n`,(0,t.jsx)(e.p,{children:`In this guide, we analyse how state management in creating a new table in Table Editor works. We review the\\r\ncode behind this action and find out how the state is managed once a new table is added.`}),`\n`,(0,t.jsx)(e.h1,{id:\"where-is-the-new-table-button\",children:\"Where is the New Table button?\"}),`\n`,(0,t.jsxs)(e.p,{children:[`Locating the \"New Table\" button in the Supabase codebase is a good start. On the UI, you will find this\\r\nbutton at the route `,(0,t.jsx)(e.code,{children:\"dashboard/project/{projectId}/editor\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:\"[Insert screenshot of - New Table button]\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Supabase, at the time of writing this guide, uses \",(0,t.jsx)(e.code,{children:\"pages\"}),` router. You get the hint from the url, this button\\r\nwill be found `,(0,t.jsx)(e.code,{children:\"project/[some-id]/editor\"}),\". There is \",(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/project/%5Bref%5D/editor/index.tsx#L1\",children:\"/studio/pages/project/[ref]/editor/index.tsx\"}),`\\r\nbut it is straight forward to locate the \"New Table\" because this button is not found in this file,\\r\nbut by looking at the below we could make some assumptions and try to locate this button.`]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`const TableEditorPage: NextPageWithLayout = () => {\\r\n  const { ref: projectRef } = useParams()\\r\n  const router = useRouter()\\r\n\\r\n  const onTableCreated = (table: { id: number }) => {\\r\n    router.push(\\`/project/\\${projectRef}/editor/\\${table.id}\\`)\\r\n  }\\r\n\\r\n  return (\\r\n    <>\\r\n      <EmptyState />\\r\n      <SidePanelEditor onTableCreated={onTableCreated} />\\r\n    </>\\r\n  )\\r\n}\\r\n\\r\nTableEditorPage.getLayout = (page) => (\\r\n  <ProjectContextFromParamsProvider>\\r\n    <TableEditorLayout>{page}</TableEditorLayout>\\r\n  </ProjectContextFromParamsProvider>\\r\n)\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"Empty State\"}),\" also shows a button that lets you create new table. \",(0,t.jsx)(e.code,{children:\"SidePanelEditor\"}),` is the side panel editor\\r\nthat provides you a form to fill out the table information. We will need to understand how the state is\\r\nmanaged in this form soon.`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"At this point, we should look at \",(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/layouts/TableEditorLayout/TableEditorLayout.tsx#L9\",children:\"TableEditorLayout\"}),`.\\r\nAt `,(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/layouts/TableEditorLayout/TableEditorLayout.tsx#L13\",children:\"line 13 in TableEditorLayout\"}),`,\\r\nyou will find this below line:`]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`const tableEditorMenu = useMemo(() => <TableEditorMenu />, [])\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Finally in \",(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/layouts/TableEditorLayout/TableEditorMenu.tsx#L131\",children:\"TableEditorMenu.tsx\"}),`,\\r\nyou will find the New Table button.`]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`<ButtonTooltip\\r\n  block\\r\n  title=\"Create a new table\"\\r\n  name=\"New table\"\\r\n  disabled={!canCreateTables}\\r\n  size=\"tiny\"\\r\n  icon={<Plus size={14} strokeWidth={1.5} className=\"text-foreground-muted\" />}\\r\n  type=\"default\"\\r\n  className=\"justify-start\"\\r\n  onClick={snap.onAddTable}\\r\n  tooltip={{\\r\n    content: {\\r\n      side: 'bottom',\\r\n      text: !canCreateTables\\r\n        ? 'You need additional permissions to create tables'\\r\n        : undefined,\\r\n    },\\r\n  }}\\r\n>\\r\n  New table\\r\n</ButtonTooltip>\n`})}),`\n`,(0,t.jsx)(e.h1,{id:\"what-happens-on-clicking-new-table-button\",children:\"What happens on clicking New Table button?\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"In this below code, you see that onClick calls a function \",(0,t.jsx)(e.code,{children:\"snap.onAddTable\"})]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`<ButtonTooltip\\r\n  block\\r\n  title=\"Create a new table\"\\r\n  name=\"New table\"\\r\n  disabled={!canCreateTables}\\r\n  size=\"tiny\"\\r\n  icon={<Plus size={14} strokeWidth={1.5} className=\"text-foreground-muted\" />}\\r\n  type=\"default\"\\r\n  className=\"justify-start\"\\r\n  onClick={snap.onAddTable}\\r\n  tooltip={{\\r\n    content: {\\r\n      side: 'bottom',\\r\n      text: !canCreateTables\\r\n        ? 'You need additional permissions to create tables'\\r\n        : undefined,\\r\n    },\\r\n  }}\\r\n>\\r\n  New table\\r\n</ButtonTooltip>\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"At \",(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/layouts/TableEditorLayout/TableEditorMenu.tsx#L46\",children:\"line 46\"}),`,\\r\nyou will see that snap is a value returned by a function `,(0,t.jsx)(e.code,{children:\"useTableEditorStateSnapshot\"}),\".\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`const snap = useTableEditorStateSnapshot()\n`})})]})}function u(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(c,{...n})}):c(n)}return g(E);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/supabase/state-management/create-table.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/supabase/state-management/create-table.mdx",
      "sourceFileName": "create-table.mdx",
      "sourceFileDir": "guide/codebase-architecture/supabase/state-management",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/supabase/state-management/create-table"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/supabase/state-management/create-table",
    "slugAsParams": "codebase-architecture/supabase/state-management/create-table"
  },
  {
    "title": "State management in Supabase\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\n[C: State management in /dashboard/projects]\r\n\r\nAt the time of writing this article, Supabase uses Pages router. We want to find out which page is responsible\r\nto load the /dashboard/projects page. Pages router uses file-based routing and the route in consideraion here\r\nends with /projects, so we want to find a file named projects.tsx in [Supabase studio](https://github.com/supabase/supabase/blob/master/apps/studio/pages/projects.tsx#L26) \r\n\r\nSupabase is open-source and uses a monorepo. [Studio](https://github.com/supabase/supabase/tree/master/apps/www) \r\nis the dashboard you would see when you visit https://supabase.com/dashboard/projects, but when you visit https://supabase.com/\r\n[www](https://github.com/supabase/supabase/tree/master/apps/www) is used. Here `studio`, `www` are workspaces.\r\n\r\n# projects.tsx\r\n\r\nYou will find that [projects.tsx](https://github.com/supabase/supabase/blob/master/apps/studio/pages/projects.tsx#L26)\r\nis in studio's [pages folder](https://github.com/supabase/supabase/tree/master/apps/studio/pages).\r\n\r\nYou have to ask the right questions here. What data do I see when I visit projects? There's projects and \r\norganizations data that are fetched via an API. \r\n\r\n[Insert a screenshot of /projects route]\r\n\r\nSo how's this fetched? At [line 23](https://github.com/supabase/supabase/blob/master/apps/studio/pages/projects.tsx#L23)\r\n, you will find this below code snippet:\r\n\r\n```\r\nconst { data: organizations, isError, isSuccess } = useOrganizationsQuery()\r\n```\r\n\r\nYou need to check out the Supabase's API layer to understand `useOrganizationQuery` shown above. In this guide, \r\nwe are intrested in state management. At this point, next question would be what sort of rendering mechanism is \r\napplied here? You want to read about [Rendering in Next.js Pages Router docs](https://nextjs.org/docs/pages/building-your-application/rendering)\r\n\r\nRendering strategy used in projects.tsx is client-side rendering because useOrganizationsQuery uses \r\n@tanstack/react-query found in [lib/fetch/organizations.ts](https://github.com/supabase/supabase/blob/master/apps/docs/lib/fetch/organizations.ts#L1)\r\nIt is mentioned in the [Client-side rendering documentation](https://nextjs.org/docs/pages/building-your-application/rendering/client-side-rendering)\r\nthat using a data fetching library like SWR or TanStack Query to fetch data on the client is recommended and this\r\nway you implement client side rendering.\r\n\r\n[Insert a screenshot of https://github.com/supabase/supabase/blob/master/apps/studio/pages/projects.tsx#L72-L77]\r\n\r\nThese organizations fetched are passed down as props to a component named `HomePageActions`. \r\n\r\n## HomePageActions\r\n\r\n[HomePageActions](https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/HomePageActions.tsx#L33) \r\nrenders `New Project` button, `New Organization` button, `Search` input and the `Filter` button.\r\n\r\nWhy would the organizations be passed down to these actions? clicking on a New Project shows you these list of\r\norganizations.\r\n\r\n[Insert screenshot of clicking new project to show list of organizations] \r\n\r\nOrganizations fetched are also used to show list of organizations in the Sidebar\r\n\r\n[Insert screenshot of supabase dashboard sidebar with list of organizations]\r\n\r\n## Organizations in Sidebar\r\n\r\nIt is a common standard to place the Sidebar in the Layout. [At Line 93](https://github.com/supabase/supabase/blob/master/apps/studio/pages/projects.tsx#L93)\r\nyou will find this below code snippet:\r\n\r\n```\r\nProjectsPage.getLayout = (page) => (\r\n  <AccountLayout\r\n    title=\"Dashboard\"\r\n    breadcrumbs={[\r\n      {\r\n        key: `supabase-projects`,\r\n        label: 'Projects',\r\n      },\r\n    ]}\r\n  >\r\n    {page}\r\n  </AccountLayout>\r\n)\r\n``` \r\n\r\nIn the AccountLayout, Organizations are fetched using the query, but this time the results are from the cache, \r\nthis is one of the advantages of using Tanstack query, you can also confirm this by inspecting the network call \r\nto fetch organizations, this gets called only once.\r\n\r\n[Insert screenshot of - https://github.com/supabase/supabase/blob/master/apps/studio/components/layouts/AccountLayout/AccountLayout.tsx#L27]\r\n\r\n[AccountLayout](https://github.com/supabase/supabase/blob/master/apps/studio/components/layouts/AccountLayout/AccountLayout.tsx#L25)\r\nrenders the sidebar and children as shown below:\r\n\r\n```\r\n<div className=\"h-screen min-h-[0px] basis-0 flex-1\">\r\n  <WithSidebar\r\n    hideSidebar={navLayoutV2}\r\n    title={title}\r\n    breadcrumbs={breadcrumbs}\r\n    sections={sectionsWithHeaders}\r\n  >\r\n    {children}\r\n  </WithSidebar>\r\n</div>\r\n```\r\n\r\n`sectionsWithHeaders` uses this organizations array to render list of organizations \r\n\r\n```\r\nconst organizationsLinks = (organizations ?? [])\r\n    .map((organization) => ({\r\n      isActive:\r\n        router.pathname.startsWith('/org/') && selectedOrganization?.slug === organization.slug,\r\n      label: organization.name,\r\n      href: `/org/${organization.slug}/general`,\r\n      key: organization.slug,\r\n      icon: <PartnerIcon organization={organization} />,\r\n    }))\r\n    .sort((a, b) => a.label.localeCompare(b.label))\r\n```",
      "code": "var Component=(()=>{var u=Object.create;var r=Object.defineProperty;var l=Object.getOwnPropertyDescriptor;var b=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var f=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),w=(n,e)=>{for(var s in e)r(n,s,{get:e[s],enumerable:!0})},i=(n,e,s,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of b(e))!m.call(n,a)&&a!==s&&r(n,a,{get:()=>e[a],enumerable:!(o=l(e,a))||o.enumerable});return n};var y=(n,e,s)=>(s=n!=null?u(g(n)):{},i(e||!n||!n.__esModule?r(s,\"default\",{value:n,enumerable:!0}):s,n)),j=n=>i(r({},\"__esModule\",{value:!0}),n);var h=f((A,c)=>{c.exports=_jsx_runtime});var x={};w(x,{default:()=>p,frontmatter:()=>z});var t=y(h()),z={title:\"State management in Supabase\"};function d(n){let e={a:\"a\",code:\"code\",h1:\"h1\",h2:\"h2\",p:\"p\",pre:\"pre\",...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:\"[C: State management in /dashboard/projects]\"}),`\n`,(0,t.jsxs)(e.p,{children:[`At the time of writing this article, Supabase uses Pages router. We want to find out which page is responsible\\r\nto load the /dashboard/projects page. Pages router uses file-based routing and the route in consideraion here\\r\nends with /projects, so we want to find a file named projects.tsx in `,(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/projects.tsx#L26\",children:\"Supabase studio\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Supabase is open-source and uses a monorepo. \",(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/master/apps/www\",children:\"Studio\"}),`\\r\nis the dashboard you would see when you visit `,(0,t.jsx)(e.a,{href:\"https://supabase.com/dashboard/projects\",children:\"https://supabase.com/dashboard/projects\"}),\", but when you visit \",(0,t.jsx)(e.a,{href:\"https://supabase.com/\",children:\"https://supabase.com/\"}),`\\r\n`,(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/master/apps/www\",children:\"www\"}),\" is used. Here \",(0,t.jsx)(e.code,{children:\"studio\"}),\", \",(0,t.jsx)(e.code,{children:\"www\"}),\" are workspaces.\"]}),`\n`,(0,t.jsx)(e.h1,{id:\"projectstsx\",children:\"projects.tsx\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"You will find that \",(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/projects.tsx#L26\",children:\"projects.tsx\"}),`\\r\nis in studio's `,(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/master/apps/studio/pages\",children:\"pages folder\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:`You have to ask the right questions here. What data do I see when I visit projects? There's projects and\\r\norganizations data that are fetched via an API.`}),`\n`,(0,t.jsx)(e.p,{children:\"[Insert a screenshot of /projects route]\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"So how's this fetched? At \",(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/projects.tsx#L23\",children:\"line 23\"}),`\\r\n, you will find this below code snippet:`]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`const { data: organizations, isError, isSuccess } = useOrganizationsQuery()\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"You need to check out the Supabase's API layer to understand \",(0,t.jsx)(e.code,{children:\"useOrganizationQuery\"}),` shown above. In this guide,\\r\nwe are intrested in state management. At this point, next question would be what sort of rendering mechanism is\\r\napplied here? You want to read about `,(0,t.jsx)(e.a,{href:\"https://nextjs.org/docs/pages/building-your-application/rendering\",children:\"Rendering in Next.js Pages Router docs\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[`Rendering strategy used in projects.tsx is client-side rendering because useOrganizationsQuery uses\\r\n@tanstack/react-query found in `,(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/docs/lib/fetch/organizations.ts#L1\",children:\"lib/fetch/organizations.ts\"}),`\\r\nIt is mentioned in the `,(0,t.jsx)(e.a,{href:\"https://nextjs.org/docs/pages/building-your-application/rendering/client-side-rendering\",children:\"Client-side rendering documentation\"}),`\\r\nthat using a data fetching library like SWR or TanStack Query to fetch data on the client is recommended and this\\r\nway you implement client side rendering.`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"[Insert a screenshot of \",(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/projects.tsx#L72-L77\",children:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/projects.tsx#L72-L77\"}),\"]\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"These organizations fetched are passed down as props to a component named \",(0,t.jsx)(e.code,{children:\"HomePageActions\"}),\".\"]}),`\n`,(0,t.jsx)(e.h2,{id:\"homepageactions\",children:\"HomePageActions\"}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/HomePageActions.tsx#L33\",children:\"HomePageActions\"}),`\\r\nrenders `,(0,t.jsx)(e.code,{children:\"New Project\"}),\" button, \",(0,t.jsx)(e.code,{children:\"New Organization\"}),\" button, \",(0,t.jsx)(e.code,{children:\"Search\"}),\" input and the \",(0,t.jsx)(e.code,{children:\"Filter\"}),\" button.\"]}),`\n`,(0,t.jsx)(e.p,{children:`Why would the organizations be passed down to these actions? clicking on a New Project shows you these list of\\r\norganizations.`}),`\n`,(0,t.jsx)(e.p,{children:\"[Insert screenshot of clicking new project to show list of organizations]\"}),`\n`,(0,t.jsx)(e.p,{children:\"Organizations fetched are also used to show list of organizations in the Sidebar\"}),`\n`,(0,t.jsx)(e.p,{children:\"[Insert screenshot of supabase dashboard sidebar with list of organizations]\"}),`\n`,(0,t.jsx)(e.h2,{id:\"organizations-in-sidebar\",children:\"Organizations in Sidebar\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"It is a common standard to place the Sidebar in the Layout. \",(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/projects.tsx#L93\",children:\"At Line 93\"}),`\\r\nyou will find this below code snippet:`]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`ProjectsPage.getLayout = (page) => (\\r\n  <AccountLayout\\r\n    title=\"Dashboard\"\\r\n    breadcrumbs={[\\r\n      {\\r\n        key: \\`supabase-projects\\`,\\r\n        label: 'Projects',\\r\n      },\\r\n    ]}\\r\n  >\\r\n    {page}\\r\n  </AccountLayout>\\r\n)\n`})}),`\n`,(0,t.jsx)(e.p,{children:`In the AccountLayout, Organizations are fetched using the query, but this time the results are from the cache,\\r\nthis is one of the advantages of using Tanstack query, you can also confirm this by inspecting the network call\\r\nto fetch organizations, this gets called only once.`}),`\n`,(0,t.jsxs)(e.p,{children:[\"[Insert screenshot of - \",(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/layouts/AccountLayout/AccountLayout.tsx#L27\",children:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/layouts/AccountLayout/AccountLayout.tsx#L27\"}),\"]\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/layouts/AccountLayout/AccountLayout.tsx#L25\",children:\"AccountLayout\"}),`\\r\nrenders the sidebar and children as shown below:`]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`<div className=\"h-screen min-h-[0px] basis-0 flex-1\">\\r\n  <WithSidebar\\r\n    hideSidebar={navLayoutV2}\\r\n    title={title}\\r\n    breadcrumbs={breadcrumbs}\\r\n    sections={sectionsWithHeaders}\\r\n  >\\r\n    {children}\\r\n  </WithSidebar>\\r\n</div>\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.code,{children:\"sectionsWithHeaders\"}),\" uses this organizations array to render list of organizations\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:`const organizationsLinks = (organizations ?? [])\\r\n    .map((organization) => ({\\r\n      isActive:\\r\n        router.pathname.startsWith('/org/') && selectedOrganization?.slug === organization.slug,\\r\n      label: organization.name,\\r\n      href: \\`/org/\\${organization.slug}/general\\`,\\r\n      key: organization.slug,\\r\n      icon: <PartnerIcon organization={organization} />,\\r\n    }))\\r\n    .sort((a, b) => a.label.localeCompare(b.label))\n`})})]})}function p(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}return j(x);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/supabase/state-management/dashboard-projects.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/supabase/state-management/dashboard-projects.mdx",
      "sourceFileName": "dashboard-projects.mdx",
      "sourceFileDir": "guide/codebase-architecture/supabase/state-management",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/supabase/state-management/dashboard-projects"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/supabase/state-management/dashboard-projects",
    "slugAsParams": "codebase-architecture/supabase/state-management/dashboard-projects"
  },
  {
    "title": "State management in Supabase\r",
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "\r\n# Introduction\r\n\r\n## State management in Supabase\r\n\r\nState management is closely related to the way you manage API layer. \r\nIn this guide, we will analyze how the state is managed in Supabase.\r\n\r\nThe way we approach is we pick a route in the Supabase studio and then find the page responsible for \r\nthat route (Supabase at the time of writing this article uses Page Router). We have to take a closer look\r\nat actions such as:\r\n\r\n### 1. /dashboard/projects\r\n\r\nIn this route, we are interested in finding out how the projects and organzations are rendered. \r\nOnce the data is fetched, is there any state set based on this API response? or is there any other way \r\nAPI response is handled?\r\n\r\nThese actions are specific to Supabase, these actions vary based on an application. \r\nIn cal.com, to understand how how state is managed, you would look at operations such as bookings list, \r\nevent-types etc., \r\n\r\n### 2. Create a project\r\n\r\nIn this action, we analyse how the state is managed when you add a new project in Supabase dashboard. \r\n\r\n[Insert a screenshot of Create project page]\r\n\r\n### 3. Create a table\r\n\r\nIn this action, we analyse how the state is managed when you add a new table. When you click on new table inside\r\na table editor, you will see a dialog positioned to the right of the screen.\r\n\r\n[Insert a screenshot of this create table dialog.]\r\n\r\nWe provide an explanation as to what happens when you click on \"Save\" by reviewing the code. It would be\r\ninteresting to find out how the list of tables gets refreshed after you create a table.",
      "code": "var Component=(()=>{var p=Object.create;var s=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var w=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var m=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=>{for(var n in e)s(t,n,{get:e[n],enumerable:!0})},i=(t,e,n,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of w(e))!g.call(t,o)&&o!==n&&s(t,o,{get:()=>e[o],enumerable:!(r=u(e,o))||r.enumerable});return t};var f=(t,e,n)=>(n=t!=null?p(b(t)):{},i(e||!t||!t.__esModule?s(n,\"default\",{value:t,enumerable:!0}):n,t)),j=t=>i(s({},\"__esModule\",{value:!0}),t);var d=m((k,h)=>{h.exports=_jsx_runtime});var S={};y(S,{default:()=>l,frontmatter:()=>I});var a=f(d()),I={title:\"State management in Supabase\"};function c(t){let e={h1:\"h1\",h2:\"h2\",h3:\"h3\",p:\"p\",...t.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.h1,{id:\"introduction\",children:\"Introduction\"}),`\n`,(0,a.jsx)(e.h2,{id:\"state-management-in-supabase\",children:\"State management in Supabase\"}),`\n`,(0,a.jsx)(e.p,{children:`State management is closely related to the way you manage API layer.\\r\nIn this guide, we will analyze how the state is managed in Supabase.`}),`\n`,(0,a.jsx)(e.p,{children:`The way we approach is we pick a route in the Supabase studio and then find the page responsible for\\r\nthat route (Supabase at the time of writing this article uses Page Router). We have to take a closer look\\r\nat actions such as:`}),`\n`,(0,a.jsx)(e.h3,{id:\"1-dashboardprojects\",children:\"1. /dashboard/projects\"}),`\n`,(0,a.jsx)(e.p,{children:`In this route, we are interested in finding out how the projects and organzations are rendered.\\r\nOnce the data is fetched, is there any state set based on this API response? or is there any other way\\r\nAPI response is handled?`}),`\n`,(0,a.jsx)(e.p,{children:`These actions are specific to Supabase, these actions vary based on an application.\\r\nIn cal.com, to understand how how state is managed, you would look at operations such as bookings list,\\r\nevent-types etc.,`}),`\n`,(0,a.jsx)(e.h3,{id:\"2-create-a-project\",children:\"2. Create a project\"}),`\n`,(0,a.jsx)(e.p,{children:\"In this action, we analyse how the state is managed when you add a new project in Supabase dashboard.\"}),`\n`,(0,a.jsx)(e.p,{children:\"[Insert a screenshot of Create project page]\"}),`\n`,(0,a.jsx)(e.h3,{id:\"3-create-a-table\",children:\"3. Create a table\"}),`\n`,(0,a.jsx)(e.p,{children:`In this action, we analyse how the state is managed when you add a new table. When you click on new table inside\\r\na table editor, you will see a dialog positioned to the right of the screen.`}),`\n`,(0,a.jsx)(e.p,{children:\"[Insert a screenshot of this create table dialog.]\"}),`\n`,(0,a.jsx)(e.p,{children:`We provide an explanation as to what happens when you click on \"Save\" by reviewing the code. It would be\\r\ninteresting to find out how the list of tables gets refreshed after you create a table.`})]})}function l(t={}){let{wrapper:e}=t.components||{};return e?(0,a.jsx)(e,{...t,children:(0,a.jsx)(c,{...t})}):c(t)}return j(S);})();\n;return Component;"
    },
    "_id": "guide/codebase-architecture/supabase/state-management/introduction.mdx",
    "_raw": {
      "sourceFilePath": "guide/codebase-architecture/supabase/state-management/introduction.mdx",
      "sourceFileName": "introduction.mdx",
      "sourceFileDir": "guide/codebase-architecture/supabase/state-management",
      "contentType": "mdx",
      "flattenedPath": "guide/codebase-architecture/supabase/state-management/introduction"
    },
    "type": "Doc",
    "slug": "/guide/codebase-architecture/supabase/state-management/introduction",
    "slugAsParams": "codebase-architecture/supabase/state-management/introduction"
  },
  {
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "[Components Structure inspired by shadcn-ui/ui]:\r\n[L: Introduction]\r\n\r\nIn this course, we apply the [shadcn-ui/ui architectural concept, components structure](link-to-guide) to the project\r\nyou built in this [setup course](link-to-course).\r\n\r\nAs you progress through this course, you will make some decisions on how to structure your components and at the same time,\r\nconsider the tradeoffs. \r\n\r\nFor example: \r\n- Breaking down a large file into smaller components and placing them in a common `components` folder at root/src level\r\n  would be fine for now as you are only dealing with Contacts page.\r\n- But should you refactor your components structure as your application grows? the answer is yes. \r\n- What principles should you follow? Find out at the end of this course.\r\n\r\nPre-requisites:\r\n- You must have a basic understanding of Next.js\r\n- You must have completed this [set up course](link-to-course) as that code is used to refactor and upgrade the components\r\nstructure.\r\n\r\nYou are expected to solve these below challenges in this course by refactoring the large Contacts file into smaller\r\ncomponents and organizing these components in folders following the components structure that closel:\r\n\r\nRefactor the large Contacts file into smaller components and organize/structure these components in a folder, following\r\nthe [shadcn-ui/ui architectural concept, components structure](link-to-guide)\r\n\r\n[L: Refactor Sidebar ]\r\n# Challenge\r\nIn this challenge, you are expected to refactor the sidebar in the Contacts page \r\nby moving the sidebar related code into a separate file and folder.\r\n\r\nHow to solve this challenge?\r\n1. You can place this sidebar in any file/folder you want and name it as you wish, but to \r\npractice the shadcn-ui/ui architecture, try to match your folder organization to that of shadcn-ui/ui's.\r\n2. Navigate to [shadcn-ui/ui](https://github.com/shadcn-ui/ui) and figure out the how the site header and site footer are implemented. \r\n3. Follow the same file organization and naming convention patterns as site header/side footer to refactor this sidebar. \r\n\r\nHint 1:\r\nYou can find that [site-header](https://github.com/shadcn-ui/ui/blob/bd54184e6016261148cd4e806fe17c9043678a88/apps/www/components/site-footer.tsx#L1)\r\n and [site-footer](https://github.com/shadcn-ui/ui/tree/bd54184e6016261148cd4e806fe17c9043678a88/apps/www/components)\r\nlocated inside `www/components` folder.\r\n\r\nHint 2:\r\nYou should create a folder named components at root level.\r\n\r\nHint 3:\r\nYou should create a file named site-sidebar and put the sidebar code in it. \r\n\r\n# Solution\r\n\r\n[Insert video explanation]\r\n\r\nLet's refactor the sidebar related by placing that code in a separate component.\r\n\r\n## 1. Create components folder at the root\r\nCreate a folder named `components` at the root of your project.\r\n\r\n## 2. Create a file named site-sidebar.tsx\r\nCreate a file named site-sidebar.tsx inside `components` folder and paste the code from the [Contacts page](link-to-shadcn-base).\r\n\r\nInsert the code snippet and show a screenshot of it.\r\n\r\n## 3. Import `SiteSidebar` in Contacts page:\r\n\r\nSince you now have `SiteSidebar` created, you want to import this component at the top of Contacts page and replace it with the\r\nexisting sidebar\r\n\r\nYour contacts page should now look like it is in this [commit](link-to-commit)\r\n\r\n[L: Refactor Header ]\r\n# Challenge\r\nIn this challenge, you are expected to refactor the header in the Contacts page \r\nby moving the header related code into a separate file and folder.\r\n\r\nHow to solve this challenge?\r\n1. You can place this header in any file/folder you want and name it as you wish, but to \r\npractice the shadcn-ui/ui architecture, try to match your folder organization to that of shadcn-ui/ui's.\r\n2. Navigate to [shadcn-ui/ui](https://github.com/shadcn-ui/ui) and figure out the how the site header and site footer are implemented. \r\n3. Follow the same file organization and naming convention patterns as site header/side footer to refactor this header. \r\n\r\nHint 1:\r\nYou can find that [site-header](https://github.com/shadcn-ui/ui/blob/bd54184e6016261148cd4e806fe17c9043678a88/apps/www/components/site-footer.tsx#L1)\r\n and [site-footer](https://github.com/shadcn-ui/ui/tree/bd54184e6016261148cd4e806fe17c9043678a88/apps/www/components)\r\nlocated inside `www/components` folder.\r\n\r\nHint 2:\r\nYou should have already created a components folder from [Refactor Sidebar](link-to-sidebar).\r\nIf not, You should create a folder named components at root level.\r\n\r\nHint 3:\r\nYou should create a file named site-header.tsx and put the header code in it. \r\n\r\n# Solution\r\n\r\n[Insert video explanation]\r\n\r\nLet's refactor the header by placing that code in a separate component.\r\n\r\n## 1. components folder at the root\r\nYou should have already created a `components` folder from [Refactor Sidebar](link-to-lesson).\r\nIf not, Create a folder named `components` at the root of your project.\r\n\r\n## 2. Create a file named site-header.tsx\r\nCreate a file named site-header.tsx inside `components` folder and paste the code from the [Contacts page](link-to-shadcn-base).\r\n\r\nInsert the code snippet and show a screenshot of it.\r\n\r\n\r\n## 3. Import `SiteHeader` in Contacts page:\r\n\r\nSince you now have `SiteHeader` created, you want to import this component at the top of Contacts page and replace it with the\r\nexisting header \r\n\r\nYour contacts page code should now look like it is in this [commit](link-to-commit).\r\n\r\n[C: Contacts Page]\r\n[L: Refactor ContactHeader]\r\n\r\n# Challenge\r\nSo far, we have refactored sidebar component at site level and commonly reused across our CRM application.\r\nLet's now focus on refactoring Contacts Header.\r\n\r\n[Insert screenshot of contacts header]\r\n\r\nHow to solve this challenge?\r\n\r\n1. You can place this contacts page header in any file/folder you want and name it as you wish, but to \r\npractice the shadcn-ui/ui architecture, try to match your folder organization to that of [shadcn-ui/ui's mail example](https://github.com/shadcn-ui/ui/tree/main/apps/www/app/(app)/examples/mail).\r\n2. Navigate to [shadcn-ui/ui's mail example](https://github.com/shadcn-ui/ui/tree/main/apps/www/app/(app)/examples/mail) and figure out the how the mails example is implemented. \r\n3. You can also read our [architectural guide about mails components structure](link-to-architectural-guide)\r\n4. Follow the same file organization and naming convention patterns as shadcn-ui/ui's mail example to refactor this contacts header. \r\n\r\nHint 1:\r\nYou can find that [mail example](https://github.com/shadcn-ui/ui/tree/main/apps/www/app/(app)/examples/mail) \r\ncolocates the components it uses with in the mail folder\r\n[Insert screenshots of components]\r\n\r\nHint 2:\r\nYou could create components folder inside Contacts folder at pages.tsx level \r\nand colocate the components in this folder that are used in Contacts page\r\n\r\n# Solution\r\nLet's colocate the Contacts Header components just like [Shadcn-ui/ui's Mail example](https://github.com/shadcn-ui/ui/tree/main/apps/www/app/(app)/examples/mail)\r\n\r\nStep 1: Create components folder inside contacts route.\r\n\r\nStep 2: Create a file named header.tsx\r\n\r\n> You could name it contacts-header, but keep in mind, we are already inside contacts/components. It just seemed redundant to have contacts\r\nat this point in the file name.\r\n\r\nStep 3: Paste the code inside header.tsx\r\n\r\n```\r\nPaste the code from contacts/page.tsx into header.tsx\r\n```\r\n\r\nStep 4: Import header in contacts page\r\n\r\nImport the header component we just created in the above steps and put it in the location where there was header related code before.\r\n\r\n[Insert a screenshot of imported header.tsx]\r\n\r\n[C: Contacts Page]\r\n[L: Refactor Contacts Table]\r\n\r\n# Challenge:\r\nSo far, we have refactored sidebar, header, contacts header components in our CRM application.\r\nLet's now focus on refactoring Contacts Table.\r\n\r\n[Insert screenshot of contacts table]\r\n\r\nThe way this contacts table is written is that it's part of Card and is dependent on Tabs value.\r\n\r\n[Insert code snippet of Card here]\r\n\r\nOur focus at the moment is only on refactoring Contacts table by moving it into a separate file.\r\n\r\nHow to solve this challenge?\r\n\r\n1. You can place this contacts table in any file/folder you want and name it as you wish, but to \r\npractice the shadcn-ui/ui architecture, try to match your folder organization to that of [shadcn-ui/ui's mail example](https://github.com/shadcn-ui/ui/tree/main/apps/www/app/(app)/examples/mail).\r\n2. Navigate to [shadcn-ui/ui's mail example](https://github.com/shadcn-ui/ui/tree/main/apps/www/app/(app)/examples/mail) and figure out the how the mails example is implemented. \r\n3. You can also read our [architectural guide about mails components structure](link-to-architectural-guide)\r\n4. Follow the same file organization and naming convention patterns as shadcn-ui/ui's mail example to refactor this contacts header. \r\n5. You can also follow the same convention used in refactoring contacts header.\r\n\r\nHint 1:\r\nYou can follow the same convention used to refactor contacts header.\r\n\r\nHint 2:\r\nCreate a file named table.tsx inside contacts/components\r\n\r\n# Solution\r\nLet's colocate the Contacts table component just like [Shadcn-ui/ui's Mail example](https://github.com/shadcn-ui/ui/tree/main/apps/www/app/(app)/examples/mail)\r\n\r\nStep 1: Create table.tsx file inside contacts route.\r\n\r\n> You could name it contacts-table, but keep in mind, we are already inside contacts/components. It just seemed redundant to have contacts\r\nat this point in the file name.\r\n\r\nStep 2: Paste the code inside header.tsx\r\n\r\n```\r\nPaste the code from contacts/page.tsx into table.tsx\r\n```\r\n\r\nStep 3: Import table in contacts page\r\n\r\nImport the table component we just created in the above steps and put it at the line where there was table related code before.\r\n\r\n[Insert a screenshot of imported table.tsx]",
      "code": "var Component=(()=>{var p=Object.create;var i=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var w=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),b=(t,e)=>{for(var a in e)i(t,a,{get:e[a],enumerable:!0})},c=(t,e,a,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of m(e))!g.call(t,o)&&o!==a&&i(t,o,{get:()=>e[o],enumerable:!(r=u(e,o))||r.enumerable});return t};var x=(t,e,a)=>(a=t!=null?p(f(t)):{},c(e||!t||!t.__esModule?i(a,\"default\",{value:t,enumerable:!0}):a,t)),y=t=>c(i({},\"__esModule\",{value:!0}),t);var h=w((k,d)=>{d.exports=_jsx_runtime});var v={};b(v,{default:()=>l,frontmatter:()=>C});var n=x(h()),C=void 0;function s(t){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:`[Components Structure inspired by shadcn-ui/ui]:\\r\n[L: Introduction]`}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this course, we apply the \",(0,n.jsx)(e.a,{href:\"link-to-guide\",children:\"shadcn-ui/ui architectural concept, components structure\"}),` to the project\\r\nyou built in this `,(0,n.jsx)(e.a,{href:\"link-to-course\",children:\"setup course\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:`As you progress through this course, you will make some decisions on how to structure your components and at the same time,\\r\nconsider the tradeoffs.`}),`\n`,(0,n.jsx)(e.p,{children:\"For example:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Breaking down a large file into smaller components and placing them in a common \",(0,n.jsx)(e.code,{children:\"components\"}),` folder at root/src level\\r\nwould be fine for now as you are only dealing with Contacts page.`]}),`\n`,(0,n.jsx)(e.li,{children:\"But should you refactor your components structure as your application grows? the answer is yes.\"}),`\n`,(0,n.jsx)(e.li,{children:\"What principles should you follow? Find out at the end of this course.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Pre-requisites:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"You must have a basic understanding of Next.js\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"You must have completed this \",(0,n.jsx)(e.a,{href:\"link-to-course\",children:\"set up course\"}),` as that code is used to refactor and upgrade the components\\r\nstructure.`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:`You are expected to solve these below challenges in this course by refactoring the large Contacts file into smaller\\r\ncomponents and organizing these components in folders following the components structure that closel:`}),`\n`,(0,n.jsxs)(e.p,{children:[`Refactor the large Contacts file into smaller components and organize/structure these components in a folder, following\\r\nthe `,(0,n.jsx)(e.a,{href:\"link-to-guide\",children:\"shadcn-ui/ui architectural concept, components structure\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"[L: Refactor Sidebar ]\"}),`\n`,(0,n.jsx)(e.h1,{id:\"challenge\",children:\"Challenge\"}),`\n`,(0,n.jsx)(e.p,{children:`In this challenge, you are expected to refactor the sidebar in the Contacts page\\r\nby moving the sidebar related code into a separate file and folder.`}),`\n`,(0,n.jsx)(e.p,{children:\"How to solve this challenge?\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:`You can place this sidebar in any file/folder you want and name it as you wish, but to\\r\npractice the shadcn-ui/ui architecture, try to match your folder organization to that of shadcn-ui/ui's.`}),`\n`,(0,n.jsxs)(e.li,{children:[\"Navigate to \",(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui\",children:\"shadcn-ui/ui\"}),\" and figure out the how the site header and site footer are implemented.\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Follow the same file organization and naming convention patterns as site header/side footer to refactor this sidebar.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[`Hint 1:\\r\nYou can find that `,(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/blob/bd54184e6016261148cd4e806fe17c9043678a88/apps/www/components/site-footer.tsx#L1\",children:\"site-header\"}),`\\r\nand `,(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/tree/bd54184e6016261148cd4e806fe17c9043678a88/apps/www/components\",children:\"site-footer\"}),`\\r\nlocated inside `,(0,n.jsx)(e.code,{children:\"www/components\"}),\" folder.\"]}),`\n`,(0,n.jsx)(e.p,{children:`Hint 2:\\r\nYou should create a folder named components at root level.`}),`\n`,(0,n.jsx)(e.p,{children:`Hint 3:\\r\nYou should create a file named site-sidebar and put the sidebar code in it.`}),`\n`,(0,n.jsx)(e.h1,{id:\"solution\",children:\"Solution\"}),`\n`,(0,n.jsx)(e.p,{children:\"[Insert video explanation]\"}),`\n`,(0,n.jsx)(e.p,{children:\"Let's refactor the sidebar related by placing that code in a separate component.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"1-create-components-folder-at-the-root\",children:\"1. Create components folder at the root\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Create a folder named \",(0,n.jsx)(e.code,{children:\"components\"}),\" at the root of your project.\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"2-create-a-file-named-site-sidebartsx\",children:\"2. Create a file named site-sidebar.tsx\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Create a file named site-sidebar.tsx inside \",(0,n.jsx)(e.code,{children:\"components\"}),\" folder and paste the code from the \",(0,n.jsx)(e.a,{href:\"link-to-shadcn-base\",children:\"Contacts page\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Insert the code snippet and show a screenshot of it.\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"3-import-sitesidebar-in-contacts-page\",children:[\"3. Import \",(0,n.jsx)(e.code,{children:\"SiteSidebar\"}),\" in Contacts page:\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Since you now have \",(0,n.jsx)(e.code,{children:\"SiteSidebar\"}),` created, you want to import this component at the top of Contacts page and replace it with the\\r\nexisting sidebar`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Your contacts page should now look like it is in this \",(0,n.jsx)(e.a,{href:\"link-to-commit\",children:\"commit\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"[L: Refactor Header ]\"}),`\n`,(0,n.jsx)(e.h1,{id:\"challenge-1\",children:\"Challenge\"}),`\n`,(0,n.jsx)(e.p,{children:`In this challenge, you are expected to refactor the header in the Contacts page\\r\nby moving the header related code into a separate file and folder.`}),`\n`,(0,n.jsx)(e.p,{children:\"How to solve this challenge?\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:`You can place this header in any file/folder you want and name it as you wish, but to\\r\npractice the shadcn-ui/ui architecture, try to match your folder organization to that of shadcn-ui/ui's.`}),`\n`,(0,n.jsxs)(e.li,{children:[\"Navigate to \",(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui\",children:\"shadcn-ui/ui\"}),\" and figure out the how the site header and site footer are implemented.\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Follow the same file organization and naming convention patterns as site header/side footer to refactor this header.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[`Hint 1:\\r\nYou can find that `,(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/blob/bd54184e6016261148cd4e806fe17c9043678a88/apps/www/components/site-footer.tsx#L1\",children:\"site-header\"}),`\\r\nand `,(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/tree/bd54184e6016261148cd4e806fe17c9043678a88/apps/www/components\",children:\"site-footer\"}),`\\r\nlocated inside `,(0,n.jsx)(e.code,{children:\"www/components\"}),\" folder.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[`Hint 2:\\r\nYou should have already created a components folder from `,(0,n.jsx)(e.a,{href:\"link-to-sidebar\",children:\"Refactor Sidebar\"}),`.\\r\nIf not, You should create a folder named components at root level.`]}),`\n`,(0,n.jsx)(e.p,{children:`Hint 3:\\r\nYou should create a file named site-header.tsx and put the header code in it.`}),`\n`,(0,n.jsx)(e.h1,{id:\"solution-1\",children:\"Solution\"}),`\n`,(0,n.jsx)(e.p,{children:\"[Insert video explanation]\"}),`\n`,(0,n.jsx)(e.p,{children:\"Let's refactor the header by placing that code in a separate component.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"1-components-folder-at-the-root\",children:\"1. components folder at the root\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"You should have already created a \",(0,n.jsx)(e.code,{children:\"components\"}),\" folder from \",(0,n.jsx)(e.a,{href:\"link-to-lesson\",children:\"Refactor Sidebar\"}),`.\\r\nIf not, Create a folder named `,(0,n.jsx)(e.code,{children:\"components\"}),\" at the root of your project.\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"2-create-a-file-named-site-headertsx\",children:\"2. Create a file named site-header.tsx\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Create a file named site-header.tsx inside \",(0,n.jsx)(e.code,{children:\"components\"}),\" folder and paste the code from the \",(0,n.jsx)(e.a,{href:\"link-to-shadcn-base\",children:\"Contacts page\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Insert the code snippet and show a screenshot of it.\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"3-import-siteheader-in-contacts-page\",children:[\"3. Import \",(0,n.jsx)(e.code,{children:\"SiteHeader\"}),\" in Contacts page:\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Since you now have \",(0,n.jsx)(e.code,{children:\"SiteHeader\"}),` created, you want to import this component at the top of Contacts page and replace it with the\\r\nexisting header`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Your contacts page code should now look like it is in this \",(0,n.jsx)(e.a,{href:\"link-to-commit\",children:\"commit\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:`[C: Contacts Page]\\r\n[L: Refactor ContactHeader]`}),`\n`,(0,n.jsx)(e.h1,{id:\"challenge-2\",children:\"Challenge\"}),`\n`,(0,n.jsx)(e.p,{children:`So far, we have refactored sidebar component at site level and commonly reused across our CRM application.\\r\nLet's now focus on refactoring Contacts Header.`}),`\n`,(0,n.jsx)(e.p,{children:\"[Insert screenshot of contacts header]\"}),`\n`,(0,n.jsx)(e.p,{children:\"How to solve this challenge?\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`You can place this contacts page header in any file/folder you want and name it as you wish, but to\\r\npractice the shadcn-ui/ui architecture, try to match your folder organization to that of `,(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/apps/www/app/(app)/examples/mail\",children:\"shadcn-ui/ui's mail example\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Navigate to \",(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/apps/www/app/(app)/examples/mail\",children:\"shadcn-ui/ui's mail example\"}),\" and figure out the how the mails example is implemented.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"You can also read our \",(0,n.jsx)(e.a,{href:\"link-to-architectural-guide\",children:\"architectural guide about mails components structure\"})]}),`\n`,(0,n.jsx)(e.li,{children:\"Follow the same file organization and naming convention patterns as shadcn-ui/ui's mail example to refactor this contacts header.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[`Hint 1:\\r\nYou can find that `,(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/apps/www/app/(app)/examples/mail\",children:\"mail example\"}),`\\r\ncolocates the components it uses with in the mail folder\\r\n[Insert screenshots of components]`]}),`\n`,(0,n.jsx)(e.p,{children:`Hint 2:\\r\nYou could create components folder inside Contacts folder at pages.tsx level\\r\nand colocate the components in this folder that are used in Contacts page`}),`\n`,(0,n.jsx)(e.h1,{id:\"solution-2\",children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Let's colocate the Contacts Header components just like \",(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/apps/www/app/(app)/examples/mail\",children:\"Shadcn-ui/ui's Mail example\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"Step 1: Create components folder inside contacts route.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Step 2: Create a file named header.tsx\"}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:`You could name it contacts-header, but keep in mind, we are already inside contacts/components. It just seemed redundant to have contacts\\r\nat this point in the file name.`}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Step 3: Paste the code inside header.tsx\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`Paste the code from contacts/page.tsx into header.tsx\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Step 4: Import header in contacts page\"}),`\n`,(0,n.jsx)(e.p,{children:\"Import the header component we just created in the above steps and put it in the location where there was header related code before.\"}),`\n`,(0,n.jsx)(e.p,{children:\"[Insert a screenshot of imported header.tsx]\"}),`\n`,(0,n.jsx)(e.p,{children:`[C: Contacts Page]\\r\n[L: Refactor Contacts Table]`}),`\n`,(0,n.jsx)(e.h1,{id:\"challenge-3\",children:\"Challenge:\"}),`\n`,(0,n.jsx)(e.p,{children:`So far, we have refactored sidebar, header, contacts header components in our CRM application.\\r\nLet's now focus on refactoring Contacts Table.`}),`\n`,(0,n.jsx)(e.p,{children:\"[Insert screenshot of contacts table]\"}),`\n`,(0,n.jsx)(e.p,{children:\"The way this contacts table is written is that it's part of Card and is dependent on Tabs value.\"}),`\n`,(0,n.jsx)(e.p,{children:\"[Insert code snippet of Card here]\"}),`\n`,(0,n.jsx)(e.p,{children:\"Our focus at the moment is only on refactoring Contacts table by moving it into a separate file.\"}),`\n`,(0,n.jsx)(e.p,{children:\"How to solve this challenge?\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`You can place this contacts table in any file/folder you want and name it as you wish, but to\\r\npractice the shadcn-ui/ui architecture, try to match your folder organization to that of `,(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/apps/www/app/(app)/examples/mail\",children:\"shadcn-ui/ui's mail example\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Navigate to \",(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/apps/www/app/(app)/examples/mail\",children:\"shadcn-ui/ui's mail example\"}),\" and figure out the how the mails example is implemented.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"You can also read our \",(0,n.jsx)(e.a,{href:\"link-to-architectural-guide\",children:\"architectural guide about mails components structure\"})]}),`\n`,(0,n.jsx)(e.li,{children:\"Follow the same file organization and naming convention patterns as shadcn-ui/ui's mail example to refactor this contacts header.\"}),`\n`,(0,n.jsx)(e.li,{children:\"You can also follow the same convention used in refactoring contacts header.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:`Hint 1:\\r\nYou can follow the same convention used to refactor contacts header.`}),`\n`,(0,n.jsx)(e.p,{children:`Hint 2:\\r\nCreate a file named table.tsx inside contacts/components`}),`\n`,(0,n.jsx)(e.h1,{id:\"solution-3\",children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Let's colocate the Contacts table component just like \",(0,n.jsx)(e.a,{href:\"https://github.com/shadcn-ui/ui/tree/main/apps/www/app/(app)/examples/mail\",children:\"Shadcn-ui/ui's Mail example\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"Step 1: Create table.tsx file inside contacts route.\"}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:`You could name it contacts-table, but keep in mind, we are already inside contacts/components. It just seemed redundant to have contacts\\r\nat this point in the file name.`}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Step 2: Paste the code inside header.tsx\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`Paste the code from contacts/page.tsx into table.tsx\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Step 3: Import table in contacts page\"}),`\n`,(0,n.jsx)(e.p,{children:\"Import the table component we just created in the above steps and put it at the line where there was table related code before.\"}),`\n`,(0,n.jsx)(e.p,{children:\"[Insert a screenshot of imported table.tsx]\"})]})}function l(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(s,{...t})}):s(t)}return y(v);})();\n;return Component;"
    },
    "_id": "guide/best-practices/crm-contacts-page/components-structure/shadcn-ui/introduction.mdx",
    "_raw": {
      "sourceFilePath": "guide/best-practices/crm-contacts-page/components-structure/shadcn-ui/introduction.mdx",
      "sourceFileName": "introduction.mdx",
      "sourceFileDir": "guide/best-practices/crm-contacts-page/components-structure/shadcn-ui",
      "contentType": "mdx",
      "flattenedPath": "guide/best-practices/crm-contacts-page/components-structure/shadcn-ui/introduction"
    },
    "type": "Doc",
    "slug": "/guide/best-practices/crm-contacts-page/components-structure/shadcn-ui/introduction",
    "slugAsParams": "best-practices/crm-contacts-page/components-structure/shadcn-ui/introduction"
  },
  {
    "published": false,
    "featured": false,
    "component": false,
    "toc": true,
    "body": {
      "raw": "[Components Structure inspired by Supabase]:\r\n[L: Introduction]\r\n\r\nIn this course, we apply the [Supabase architectural concept, components structure](link-to-guide) \r\nto the project you built in this [setup course](link-to-course).\r\n\r\nAs you progress through this course, you will make some decisions on \r\nhow to structure your components and at the same time, consider the tradeoffs. \r\n\r\nFor example: \r\n- Breaking down a large file into smaller components and placing them \r\nin a common `components` folder at root/src level would be fine for now \r\nas you are only dealing with Contacts page.\r\n- But should you refactor your components structure as your application grows? the answer is yes. \r\n- What principles should you follow? Find out how to apply a components strcture similar \r\nto Supabase in this course.\r\n\r\nPre-requisites:\r\n- You must have a basic understanding of Next.js\r\n- You must have completed this [set up course](link-to-course) as that code is used to \r\nrefactor and upgrade the components structure.\r\n\r\nRefactor the large Contacts file into smaller components and organize/structure these components \r\nin a folder, following the [Supabase architectural concept, components structure](link-to-guide)\r\n\r\n[L: Refactor Sidebar ]\r\n# Challenge\r\nIn this challenge, you are expected to refactor the sidebar in the Contacts page \r\nby moving the sidebar related code into a separate file and folder.\r\n\r\nHow to solve this challenge?\r\n1. You can place this sidebar in any file/folder you want and name it as you wish, but to \r\npractice the Supabase architecture, try to match your folder organization to that of Supabase's.\r\n2. Navigate to [Supabase studio](https://github.com/supabase/supabase/tree/master/apps/studio) \r\nand study and figure out the how the sidebar is implemented in the Supabase dashboard. \r\n\r\n[Insert screenshot here of the dashboard sidebar]\r\n\r\n3. Follow the same file organization and naming convention patterns as WithSidebar to refactor this sidebar. \r\n\r\nHint 1:\r\nYou can find that [WithSidebar](https://github.com/supabase/supabase/blob/d75161e88d2502c5de4fdc2a8c164e1603dc1fac/apps/studio/components/layouts/AccountLayout/WithSidebar.tsx#L5)\r\nis located inside `studio/components/layouts/AccountLayout` folder.\r\n\r\nHint 2:\r\nRead about the components structure officially documented in the Supabase's [studio/components folder](https://github.com/supabase/supabase/tree/d75161e88d2502c5de4fdc2a8c164e1603dc1fac/apps/studio/components)\r\n\r\n# Solution\r\n\r\n[Insert video explanation]\r\n\r\nThe way the sidebar is implemented in Supabase involves changes to our Layout. Let's start \r\nthere by creating necessary folder and files and then let's compare our components \r\nstructure to that of Supabase's.\r\n\r\nAt the time of writing this guide, Supabase used pages router but the way components are \r\norganized is still applicable to app router.\r\n\r\nAt the root level, let's create a folder named `components`. Now, let's create a new folder named \r\n`layouts` inside `components` folder. \r\n\r\nNow we need to decide the name to be used here, we shall name it DashboardLayout. You can choose any name\r\nyou want, but make sure it makes sense to name it that way to fit the context for this layout as this \r\nis the common layout we will be using across the app. Comes handy when you add more modules like companies \r\nand kanban board in the [Production-grade projects course](link-to-course).\r\n\r\nLet's create a folder named DashboardLayout inside `components/layouts` folder. Create another file named\r\n`DashboardLayout.tsx`.\r\n\r\nIdeally, you would want to put your meta configuration, header and footer in the RootLayout \r\nwhich is `app/layout.tsx`\r\n\r\nmain layout containing Sidebar can be placed inside `DashboardLayout.tsx`. \r\n\r\nAt this point, add the below code in `DashboardLayout.tsx`:\r\n\r\n```\r\nexport default function DashboardLayout({ children }) {\r\n  return\r\n}\r\n```\r\n\r\nLet's now create a file named `WithSidebar.tsx` at the same level as DashboardLayout.tsx and add the below code into\r\nit:\r\n\r\n```\r\nexport default function WithSidebar() {\r\n  return (\r\n  [TODO: put the sidebar code here]\r\n  )\r\n}\r\n```\r\n\r\n[L: Refactor Header ]\r\n# Challenge\r\n\r\nIn this challenge, you are expected to refactor the header in the Contacts page \r\nby moving the header related code into a separate file and folder.\r\n\r\nHow to solve this challenge?\r\n1. You can place this header in any file/folder you want and name it as you wish, but to \r\npractice the Supabase architecture, try to match your folder organization to that of Supabase's.\r\n2. Navigate to [Supabase studio](https://github.com/supabase/supabase/tree/f6cf84858e73f91c2071a3fcac061691a8031679/apps/studio/components/layouts/ProjectLayout/LayoutHeader) \r\nand study and figure out how the header is implemented in the Supabase dashboard's projects page. \r\n\r\n[Insert screenshot here of the dashboard header]\r\n\r\n3. Follow the same file organization and naming convention patterns as WithSidebar to refactor this sidebar. \r\n\r\nHint 1:\r\nYou can find that [LayoutHeader](https://github.com/supabase/supabase/tree/f6cf84858e73f91c2071a3fcac061691a8031679/apps/studio/components/layouts/ProjectLayout/LayoutHeader)\r\nis located inside `studio/components/layouts/AccountLayout` folder.\r\n\r\nHint 2:\r\nRead about the components structure officially documented in the Supabase's [studio/components folder](https://github.com/supabase/supabase/tree/d75161e88d2502c5de4fdc2a8c164e1603dc1fac/apps/studio/components)\r\n\r\n\r\n# Solution\r\n\r\nYou will find [LayoutHeader.tsx](https://github.com/supabase/supabase/tree/f6cf84858e73f91c2071a3fcac061691a8031679/apps/studio/components/layouts/ProjectLayout/LayoutHeader)\r\nin ProjectLayout. What this tells us is that you could place your Header inside `DashboardLayout` that you\r\ncreated in the Sidebar lesson.\r\n\r\nCreate a file named Header.tsx in DashboardLayout folder and put the below code in that file.\r\n\r\n```\r\nInsert the code here for the header\r\n```\r\n\r\nYou need to place this Header in the DashboardLayout.\r\n\r\n```\r\nDashboardLayout.tsx\r\n\r\nUpdate the header here.\r\n```\r\n\r\n[C: Contacts Page]\r\n[L: Refactor ContactHeader]\r\n# Challenge\r\n# Solution\r\n\r\n[C: Contacts Page]\r\n[L: Refactor Contacts Table]\r\n# Challenge:\r\n# Solution\r\n\r\n",
      "code": "var Component=(()=>{var u=Object.create;var r=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var f=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=>{for(var a in e)r(t,a,{get:e[a],enumerable:!0})},d=(t,e,a,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of f(e))!b.call(t,o)&&o!==a&&r(t,o,{get:()=>e[o],enumerable:!(i=p(e,o))||i.enumerable});return t};var w=(t,e,a)=>(a=t!=null?u(m(t)):{},d(e||!t||!t.__esModule?r(a,\"default\",{value:t,enumerable:!0}):a,t)),L=t=>d(r({},\"__esModule\",{value:!0}),t);var c=y((v,s)=>{s.exports=_jsx_runtime});var x={};g(x,{default:()=>l,frontmatter:()=>S});var n=w(c()),S=void 0;function h(t){let e={a:\"a\",code:\"code\",h1:\"h1\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:`[Components Structure inspired by Supabase]:\\r\n[L: Introduction]`}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this course, we apply the \",(0,n.jsx)(e.a,{href:\"link-to-guide\",children:\"Supabase architectural concept, components structure\"}),`\\r\nto the project you built in this `,(0,n.jsx)(e.a,{href:\"link-to-course\",children:\"setup course\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:`As you progress through this course, you will make some decisions on\\r\nhow to structure your components and at the same time, consider the tradeoffs.`}),`\n`,(0,n.jsx)(e.p,{children:\"For example:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`Breaking down a large file into smaller components and placing them\\r\nin a common `,(0,n.jsx)(e.code,{children:\"components\"}),` folder at root/src level would be fine for now\\r\nas you are only dealing with Contacts page.`]}),`\n`,(0,n.jsx)(e.li,{children:\"But should you refactor your components structure as your application grows? the answer is yes.\"}),`\n`,(0,n.jsx)(e.li,{children:`What principles should you follow? Find out how to apply a components strcture similar\\r\nto Supabase in this course.`}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Pre-requisites:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"You must have a basic understanding of Next.js\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"You must have completed this \",(0,n.jsx)(e.a,{href:\"link-to-course\",children:\"set up course\"}),` as that code is used to\\r\nrefactor and upgrade the components structure.`]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[`Refactor the large Contacts file into smaller components and organize/structure these components\\r\nin a folder, following the `,(0,n.jsx)(e.a,{href:\"link-to-guide\",children:\"Supabase architectural concept, components structure\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"[L: Refactor Sidebar ]\"}),`\n`,(0,n.jsx)(e.h1,{id:\"challenge\",children:\"Challenge\"}),`\n`,(0,n.jsx)(e.p,{children:`In this challenge, you are expected to refactor the sidebar in the Contacts page\\r\nby moving the sidebar related code into a separate file and folder.`}),`\n`,(0,n.jsx)(e.p,{children:\"How to solve this challenge?\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:`You can place this sidebar in any file/folder you want and name it as you wish, but to\\r\npractice the Supabase architecture, try to match your folder organization to that of Supabase's.`}),`\n`,(0,n.jsxs)(e.li,{children:[\"Navigate to \",(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/master/apps/studio\",children:\"Supabase studio\"}),`\\r\nand study and figure out the how the sidebar is implemented in the Supabase dashboard.`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"[Insert screenshot here of the dashboard sidebar]\"}),`\n`,(0,n.jsxs)(e.ol,{start:\"3\",children:[`\n`,(0,n.jsx)(e.li,{children:\"Follow the same file organization and naming convention patterns as WithSidebar to refactor this sidebar.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[`Hint 1:\\r\nYou can find that `,(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/d75161e88d2502c5de4fdc2a8c164e1603dc1fac/apps/studio/components/layouts/AccountLayout/WithSidebar.tsx#L5\",children:\"WithSidebar\"}),`\\r\nis located inside `,(0,n.jsx)(e.code,{children:\"studio/components/layouts/AccountLayout\"}),\" folder.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[`Hint 2:\\r\nRead about the components structure officially documented in the Supabase's `,(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/d75161e88d2502c5de4fdc2a8c164e1603dc1fac/apps/studio/components\",children:\"studio/components folder\"})]}),`\n`,(0,n.jsx)(e.h1,{id:\"solution\",children:\"Solution\"}),`\n`,(0,n.jsx)(e.p,{children:\"[Insert video explanation]\"}),`\n`,(0,n.jsx)(e.p,{children:`The way the sidebar is implemented in Supabase involves changes to our Layout. Let's start\\r\nthere by creating necessary folder and files and then let's compare our components\\r\nstructure to that of Supabase's.`}),`\n`,(0,n.jsx)(e.p,{children:`At the time of writing this guide, Supabase used pages router but the way components are\\r\norganized is still applicable to app router.`}),`\n`,(0,n.jsxs)(e.p,{children:[\"At the root level, let's create a folder named \",(0,n.jsx)(e.code,{children:\"components\"}),`. Now, let's create a new folder named\\r\n`,(0,n.jsx)(e.code,{children:\"layouts\"}),\" inside \",(0,n.jsx)(e.code,{children:\"components\"}),\" folder.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[`Now we need to decide the name to be used here, we shall name it DashboardLayout. You can choose any name\\r\nyou want, but make sure it makes sense to name it that way to fit the context for this layout as this\\r\nis the common layout we will be using across the app. Comes handy when you add more modules like companies\\r\nand kanban board in the `,(0,n.jsx)(e.a,{href:\"link-to-course\",children:\"Production-grade projects course\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Let's create a folder named DashboardLayout inside \",(0,n.jsx)(e.code,{children:\"components/layouts\"}),` folder. Create another file named\\r\n`,(0,n.jsx)(e.code,{children:\"DashboardLayout.tsx\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[`Ideally, you would want to put your meta configuration, header and footer in the RootLayout\\r\nwhich is `,(0,n.jsx)(e.code,{children:\"app/layout.tsx\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"main layout containing Sidebar can be placed inside \",(0,n.jsx)(e.code,{children:\"DashboardLayout.tsx\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"At this point, add the below code in \",(0,n.jsx)(e.code,{children:\"DashboardLayout.tsx\"}),\":\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`export default function DashboardLayout({ children }) {\\r\n  return\\r\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Let's now create a file named \",(0,n.jsx)(e.code,{children:\"WithSidebar.tsx\"}),` at the same level as DashboardLayout.tsx and add the below code into\\r\nit:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`export default function WithSidebar() {\\r\n  return (\\r\n  [TODO: put the sidebar code here]\\r\n  )\\r\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"[L: Refactor Header ]\"}),`\n`,(0,n.jsx)(e.h1,{id:\"challenge-1\",children:\"Challenge\"}),`\n`,(0,n.jsx)(e.p,{children:`In this challenge, you are expected to refactor the header in the Contacts page\\r\nby moving the header related code into a separate file and folder.`}),`\n`,(0,n.jsx)(e.p,{children:\"How to solve this challenge?\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:`You can place this header in any file/folder you want and name it as you wish, but to\\r\npractice the Supabase architecture, try to match your folder organization to that of Supabase's.`}),`\n`,(0,n.jsxs)(e.li,{children:[\"Navigate to \",(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/f6cf84858e73f91c2071a3fcac061691a8031679/apps/studio/components/layouts/ProjectLayout/LayoutHeader\",children:\"Supabase studio\"}),`\\r\nand study and figure out how the header is implemented in the Supabase dashboard's projects page.`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"[Insert screenshot here of the dashboard header]\"}),`\n`,(0,n.jsxs)(e.ol,{start:\"3\",children:[`\n`,(0,n.jsx)(e.li,{children:\"Follow the same file organization and naming convention patterns as WithSidebar to refactor this sidebar.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[`Hint 1:\\r\nYou can find that `,(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/f6cf84858e73f91c2071a3fcac061691a8031679/apps/studio/components/layouts/ProjectLayout/LayoutHeader\",children:\"LayoutHeader\"}),`\\r\nis located inside `,(0,n.jsx)(e.code,{children:\"studio/components/layouts/AccountLayout\"}),\" folder.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[`Hint 2:\\r\nRead about the components structure officially documented in the Supabase's `,(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/d75161e88d2502c5de4fdc2a8c164e1603dc1fac/apps/studio/components\",children:\"studio/components folder\"})]}),`\n`,(0,n.jsx)(e.h1,{id:\"solution-1\",children:\"Solution\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"You will find \",(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/tree/f6cf84858e73f91c2071a3fcac061691a8031679/apps/studio/components/layouts/ProjectLayout/LayoutHeader\",children:\"LayoutHeader.tsx\"}),`\\r\nin ProjectLayout. What this tells us is that you could place your Header inside `,(0,n.jsx)(e.code,{children:\"DashboardLayout\"}),` that you\\r\ncreated in the Sidebar lesson.`]}),`\n`,(0,n.jsx)(e.p,{children:\"Create a file named Header.tsx in DashboardLayout folder and put the below code in that file.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`Insert the code here for the header\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"You need to place this Header in the DashboardLayout.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`DashboardLayout.tsx\\r\n\\r\nUpdate the header here.\n`})}),`\n`,(0,n.jsx)(e.p,{children:`[C: Contacts Page]\\r\n[L: Refactor ContactHeader]`}),`\n`,(0,n.jsx)(e.h1,{id:\"challenge-2\",children:\"Challenge\"}),`\n`,(0,n.jsx)(e.h1,{id:\"solution-2\",children:\"Solution\"}),`\n`,(0,n.jsx)(e.p,{children:`[C: Contacts Page]\\r\n[L: Refactor Contacts Table]`}),`\n`,(0,n.jsx)(e.h1,{id:\"challenge-3\",children:\"Challenge:\"}),`\n`,(0,n.jsx)(e.h1,{id:\"solution-3\",children:\"Solution\"})]})}function l(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(h,{...t})}):h(t)}return L(x);})();\n;return Component;"
    },
    "_id": "guide/best-practices/crm-contacts-page/components-structure/supabase/introduction.mdx",
    "_raw": {
      "sourceFilePath": "guide/best-practices/crm-contacts-page/components-structure/supabase/introduction.mdx",
      "sourceFileName": "introduction.mdx",
      "sourceFileDir": "guide/best-practices/crm-contacts-page/components-structure/supabase",
      "contentType": "mdx",
      "flattenedPath": "guide/best-practices/crm-contacts-page/components-structure/supabase/introduction"
    },
    "type": "Doc",
    "slug": "/guide/best-practices/crm-contacts-page/components-structure/supabase/introduction",
    "slugAsParams": "best-practices/crm-contacts-page/components-structure/supabase/introduction"
  }
]
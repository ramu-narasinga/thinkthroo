{
  "title": "Supabase Security\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\nIn this guide, we look at security practices used in Supabase. \r\n\r\nFollowing these resources, \r\n- [Security in Next.js](https://nextjs.org/blog/security-nextjs-server-components-actions) \r\n- [Bulletproof React's Security](https://github.com/alan2207/bulletproof-react/blob/master/docs/security.md)\r\n- [Strap's authentication guide](https://strapi.io/integrations/nextjs-cms/topics/next-js-authentication)\r\n\r\nWe analyze the following concepts in the Supabase source code:\r\n\r\n1. Authentication\r\n2. Authorization\r\n3. Data Handling Model\r\n\r\n[L: Authentication]\r\nSupabase makes authentication easy to implement but have you ever wondered how Supabase implemented its own authentication on their\r\napplication?\r\n\r\nIn this guide, we will analyze the Authentication mechanism in Supabase.\r\n\r\nSupabase uses pages router, at the time of writing this guide. Let's first analyze the sign in with email and password\r\n\r\n[Insert screenshot of email and password screen here]\r\n\r\nThere is [pages/sign-in.tsx](https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx), it has a lot of\r\nimports, but in this guide, out focus is on [SigninForm](https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx#L51)\r\n\r\n[Insert screenshot of Line - https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx#L51]\r\n\r\n## SigninForm\r\n\r\n[sign-in page](https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx#L51) has a component named [SigninForm](https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/SignIn/SignInForm.tsx#L22)\r\n\r\nLet's analyze sign-in form.\r\n\r\n```\r\n<Form\r\n      validateOnBlur\r\n      id=\"signIn-form\"\r\n      initialValues={{ email: '', password: '' }}\r\n      validationSchema={signInSchema}\r\n      onSubmit={onSignIn}\r\n    >\r\n      {({ isSubmitting }: { isSubmitting: boolean }) => {\r\n        return (\r\n          <div className=\"flex flex-col gap-4\">\r\n            <Input\r\n              id=\"email\"\r\n              name=\"email\"\r\n              type=\"email\"\r\n              label=\"Email\"\r\n              placeholder=\"you@example.com\"\r\n              disabled={isSubmitting}\r\n              autoComplete=\"email\"\r\n            />\r\n\r\n            <div className=\"relative\">\r\n              <Input\r\n                id=\"password\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                label=\"Password\"\r\n                placeholder=\"&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;\"\r\n                disabled={isSubmitting}\r\n                autoComplete=\"current-password\"\r\n              />\r\n\r\n              {/* positioned using absolute instead of labelOptional prop so tabbing between inputs works smoothly */}\r\n              <Link\r\n                href=\"/forgot-password\"\r\n                className=\"absolute top-0 right-0 text-sm text-foreground-lighter\"\r\n              >\r\n                Forgot Password?\r\n              </Link>\r\n            </div>\r\n\r\n            <div className=\"self-center\">\r\n              <HCaptcha\r\n                ref={captchaRef}\r\n                sitekey={process.env.NEXT_PUBLIC_HCAPTCHA_SITE_KEY!}\r\n                size=\"invisible\"\r\n                onVerify={(token) => {\r\n                  setCaptchaToken(token)\r\n                }}\r\n                onExpire={() => {\r\n                  setCaptchaToken(null)\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            <LastSignInWrapper type=\"email\">\r\n              <Button\r\n                block\r\n                form=\"signIn-form\"\r\n                htmlType=\"submit\"\r\n                size=\"large\"\r\n                disabled={isSubmitting}\r\n                loading={isSubmitting}\r\n              >\r\n                Sign In\r\n              </Button>\r\n            </LastSignInWrapper>\r\n          </div>\r\n        )\r\n      }}\r\n    </Form>\r\n```\r\n\r\nForm, Input, Button are imported from [internal package ui](link-to-ui-package).\r\n\r\nLet's focus on the following functionalities:\r\n1. validationSchema\r\n2. onSubmit\r\n3. HCaptcha\r\n\r\n### validationSchema\r\n\r\n```\r\nconst signInSchema = object({\r\n  email: string().email('Must be a valid email').required('Email is required'),\r\n  password: string().required('Password is required'),\r\n})\r\n```\r\n\r\nSupabase uses [yup](https://www.npmjs.com/package/yup), a schema builder for runtime value parsing and validation\r\n\r\n[Insert screenshot of this line - https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/SignIn/SignInForm.tsx#L87C13-L87C38]\r\n\r\n## onSubmit\r\n\r\nonSubmit calls a function named `onSignIn`.\r\n\r\n[Insert screenshot of line - https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/SignIn/SignInForm.tsx#L88]\r\n\r\nThere's a lot happening inside [onSignIn function](https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/SignIn/SignInForm.tsx#L30).\r\n\r\n```\r\nconst toastId = toast.loading('Signing in...')\r\n\r\nlet token = captchaToken\r\nif (!token) {\r\n      const captchaResponse = await captchaRef.current?.execute({ async: true })\r\n      token = captchaResponse?.response ?? null\r\n}\r\n``` \r\ntoast is from [sonner package](https://www.npmjs.com/package/sonner)\r\n\r\n```\r\nlet token = captchaToken\r\nif (!token) {\r\n      const captchaResponse = await captchaRef.current?.execute({ async: true })\r\n      token = captchaResponse?.response ?? null\r\n}\r\n```\r\n\r\ncaptchaRef is reference to HCaptcha element\r\n\r\n```\r\n      <HCaptcha\r\n            ref={captchaRef}\r\n            sitekey={process.env.NEXT_PUBLIC_HCAPTCHA_SITE_KEY!}\r\n            size=\"invisible\"\r\n            onVerify={(token) => {\r\n            setCaptchaToken(token)\r\n            }}\r\n            onExpire={() => {\r\n            setCaptchaToken(null)\r\n            }}\r\n      />\r\n```\r\nHCaptcha is imported at the top of the file.\r\n\r\n```\r\nimport HCaptcha from '@hcaptcha/react-hcaptcha'\r\n```\r\n\r\nToken is updated based on captchaResponse.\r\n\r\nWith HCaptcha, you can send upto 1 million requests per month on free plan.\r\n\r\n```\r\nconst { error } = await auth.signInWithPassword({\r\n      email,\r\n      password,\r\n      options: { captchaToken: token ?? undefined },\r\n})\r\n```\r\n\r\n`auth` is imported from `lib/gotrue`\r\n\r\n```\r\nimport { auth, buildPathWithParams, getReturnToPath } from 'lib/gotrue'\r\n```\r\n\r\n> Note: Our focus is on the way the authentication is implemented. This means, we look at the sequence of operations performed,\r\nat a high level.\r\n\r\n### When the auth succeeds\r\n\r\nWhen the auth succeeds, the following are operations are performed based on error flag.\r\n\r\n```\r\nif (!error) {\r\n      setLastSignIn('email')\r\n      try {\r\n        const data = await getMfaAuthenticatorAssuranceLevel()\r\n        if (data) {\r\n          if (data.currentLevel !== data.nextLevel) {\r\n            toast.success(`You need to provide your second factor authentication`, { id: toastId })\r\n            const url = buildPathWithParams('/sign-in-mfa')\r\n            router.replace(url)\r\n            return\r\n          }\r\n        }\r\n\r\n        toast.success(`Signed in successfully!`, { id: toastId })\r\n        await queryClient.resetQueries()\r\n        const returnTo = getReturnToPath()\r\n        // since we're already on the /sign-in page, prevent redirect loops\r\n        router.push(returnTo === '/sign-in' ? '/projects' : returnTo)\r\n      } catch (error: any) {\r\n        toast.error(`Failed to sign in: ${(error as AuthError).message}`, { id: toastId })\r\n        Sentry.captureMessage('[CRITICAL] Failed to sign in via EP: ' + error.message)\r\n      }\r\n    }\r\n```\r\n\r\nLet's analyze the operations in the above snippet.\r\n\r\n```\r\nsetLastSignIn('email')\r\ntry {\r\n  const data = await getMfaAuthenticatorAssuranceLevel()\r\n  if (data) {\r\n    if (data.currentLevel !== data.nextLevel) {\r\n      toast.success(`You need to provide your second factor authentication`, { id: toastId })\r\n      const url = buildPathWithParams('/sign-in-mfa')\r\n      router.replace(url)\r\n      return\r\n    }\r\n  }\r\n```\r\nThis code handles the second factor authentication, notice how it redirects to a different url - `/sign-in-mfa`\r\nbased on the data returned by [getMfaAuthenticatorAssuranceLevel](https://github.com/supabase/supabase/blob/master/apps/studio/data/profile/mfa-authenticator-assurance-level-query.ts#L9)\r\n\r\n```\r\ntoast.success(`Signed in successfully!`, { id: toastId })\r\nawait queryClient.resetQueries()\r\nconst returnTo = getReturnToPath()\r\n// since we're already on the /sign-in page, prevent redirect loops\r\nrouter.push(returnTo === '/sign-in' ? '/projects' : returnTo)\r\n```\r\n\r\ntoast is shown, queryClient resets queries, supabase uses a query param - `returnTo` to redirect a user\r\nto the page they came from to \"signin\".\r\n\r\nThe comment there explains the mechanism to prevent redirect loops.\r\n\r\n```\r\ncatch (error: any) {\r\n  toast.error(`Failed to sign in: ${(error as AuthError).message}`, { id: toastId })\r\n  Sentry.captureMessage('[CRITICAL] Failed to sign in via EP: ' + error.message)\r\n}\r\n```\r\n\r\nWhen the sign in fails, it is reported to Sentry vai `captureMessage`.\r\n\r\n```\r\nelse {\r\n      setCaptchaToken(null)\r\n      captchaRef.current?.resetCaptcha()\r\n      \r\n      if (error.message.toLowerCase() === 'email not confirmed') {\r\n        return toast.error(\r\n          'Account has not been verified, please check the link sent to your email',\r\n          { id: toastId }\r\n        )\r\n      }\r\n      \r\n      toast.error(error.message, { id: toastId })\r\n      }\r\n}\r\n```\r\n\r\n`setCaptchaToken` is set to null, captchaRef is reset.\r\n\r\n`if (error.message.toLowerCase() === 'email not confirmed') {` - this checks if the error message contains 'email not confirmed'\r\nand shows a toast.error with a message.\r\n\r\nSummary of onSubmit operations:\r\n1. Show a toaster\r\n2. Get token from captchaResponse\r\n3. Call the signinWithPassword function\r\n4. If there's no error, check if the 2FA is enabled and redirect to get the 2FA code.\r\n5. If there's no 2FA, `router.push` based on redirectTo but with ternary operation to prevent redirect loop\r\n6. If for any reason steps 4, 5 fail, error is reported to Sentry via `captureMessage`\r\n7. If there's an error in signin, captcha is reset. In case the account is not verified, a toaster is shown\r\n\r\n\r\n# References:\r\n1. https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx\r\n2. https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/SignIn/SignInForm.tsx#L22\r\n3. https://www.hcaptcha.com/\r\n4. https://github.com/supabase/supabase/blob/master/apps/studio/lib/gotrue.ts\r\n5. https://github.com/supabase/supabase/blob/master/apps/studio/data/profile/mfa-authenticator-assurance-level-query.ts#L9",
    "code": "var Component=(()=>{var d=Object.create;var a=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),S=(r,e)=>{for(var t in e)a(r,t,{get:e[t],enumerable:!0})},o=(r,e,t,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of m(e))!g.call(r,s)&&s!==t&&a(r,s,{get:()=>e[s],enumerable:!(i=u(e,s))||i.enumerable});return r};var w=(r,e,t)=>(t=r!=null?d(b(r)):{},o(e||!r||!r.__esModule?a(t,\"default\",{value:r,enumerable:!0}):t,r)),I=r=>o(a({},\"__esModule\",{value:!0}),r);var l=f((L,c)=>{c.exports=_jsx_runtime});var v={};S(v,{default:()=>p,frontmatter:()=>y});var n=w(l()),y={title:\"Supabase Security\"};function h(r){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",h1:\"h1\",h2:\"h2\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",ul:\"ul\",...r.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"In this guide, we look at security practices used in Supabase.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Following these resources,\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://nextjs.org/blog/security-nextjs-server-components-actions\",children:\"Security in Next.js\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/alan2207/bulletproof-react/blob/master/docs/security.md\",children:\"Bulletproof React's Security\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://strapi.io/integrations/nextjs-cms/topics/next-js-authentication\",children:\"Strap's authentication guide\"})}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"We analyze the following concepts in the Supabase source code:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Authentication\"}),`\n`,(0,n.jsx)(e.li,{children:\"Authorization\"}),`\n`,(0,n.jsx)(e.li,{children:\"Data Handling Model\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:`[L: Authentication]\\r\nSupabase makes authentication easy to implement but have you ever wondered how Supabase implemented its own authentication on their\\r\napplication?`}),`\n`,(0,n.jsx)(e.p,{children:\"In this guide, we will analyze the Authentication mechanism in Supabase.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Supabase uses pages router, at the time of writing this guide. Let's first analyze the sign in with email and password\"}),`\n`,(0,n.jsx)(e.p,{children:\"[Insert screenshot of email and password screen here]\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"There is \",(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx\",children:\"pages/sign-in.tsx\"}),`, it has a lot of\\r\nimports, but in this guide, out focus is on `,(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx#L51\",children:\"SigninForm\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert screenshot of Line - \",(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx#L51\",children:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx#L51\"}),\"]\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"signinform\",children:\"SigninForm\"}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx#L51\",children:\"sign-in page\"}),\" has a component named \",(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/SignIn/SignInForm.tsx#L22\",children:\"SigninForm\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"Let's analyze sign-in form.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`<Form\\r\n      validateOnBlur\\r\n      id=\"signIn-form\"\\r\n      initialValues={{ email: '', password: '' }}\\r\n      validationSchema={signInSchema}\\r\n      onSubmit={onSignIn}\\r\n    >\\r\n      {({ isSubmitting }: { isSubmitting: boolean }) => {\\r\n        return (\\r\n          <div className=\"flex flex-col gap-4\">\\r\n            <Input\\r\n              id=\"email\"\\r\n              name=\"email\"\\r\n              type=\"email\"\\r\n              label=\"Email\"\\r\n              placeholder=\"you@example.com\"\\r\n              disabled={isSubmitting}\\r\n              autoComplete=\"email\"\\r\n            />\\r\n\\r\n            <div className=\"relative\">\\r\n              <Input\\r\n                id=\"password\"\\r\n                name=\"password\"\\r\n                type=\"password\"\\r\n                label=\"Password\"\\r\n                placeholder=\"&bull;&bull;&bull;&bull;&bull;&bull;&bull;&bull;\"\\r\n                disabled={isSubmitting}\\r\n                autoComplete=\"current-password\"\\r\n              />\\r\n\\r\n              {/* positioned using absolute instead of labelOptional prop so tabbing between inputs works smoothly */}\\r\n              <Link\\r\n                href=\"/forgot-password\"\\r\n                className=\"absolute top-0 right-0 text-sm text-foreground-lighter\"\\r\n              >\\r\n                Forgot Password?\\r\n              </Link>\\r\n            </div>\\r\n\\r\n            <div className=\"self-center\">\\r\n              <HCaptcha\\r\n                ref={captchaRef}\\r\n                sitekey={process.env.NEXT_PUBLIC_HCAPTCHA_SITE_KEY!}\\r\n                size=\"invisible\"\\r\n                onVerify={(token) => {\\r\n                  setCaptchaToken(token)\\r\n                }}\\r\n                onExpire={() => {\\r\n                  setCaptchaToken(null)\\r\n                }}\\r\n              />\\r\n            </div>\\r\n\\r\n            <LastSignInWrapper type=\"email\">\\r\n              <Button\\r\n                block\\r\n                form=\"signIn-form\"\\r\n                htmlType=\"submit\"\\r\n                size=\"large\"\\r\n                disabled={isSubmitting}\\r\n                loading={isSubmitting}\\r\n              >\\r\n                Sign In\\r\n              </Button>\\r\n            </LastSignInWrapper>\\r\n          </div>\\r\n        )\\r\n      }}\\r\n    </Form>\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Form, Input, Button are imported from \",(0,n.jsx)(e.a,{href:\"link-to-ui-package\",children:\"internal package ui\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Let's focus on the following functionalities:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"validationSchema\"}),`\n`,(0,n.jsx)(e.li,{children:\"onSubmit\"}),`\n`,(0,n.jsx)(e.li,{children:\"HCaptcha\"}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"validationschema\",children:\"validationSchema\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const signInSchema = object({\\r\n  email: string().email('Must be a valid email').required('Email is required'),\\r\n  password: string().required('Password is required'),\\r\n})\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Supabase uses \",(0,n.jsx)(e.a,{href:\"https://www.npmjs.com/package/yup\",children:\"yup\"}),\", a schema builder for runtime value parsing and validation\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert screenshot of this line - \",(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/SignIn/SignInForm.tsx#L87C13-L87C38\",children:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/SignIn/SignInForm.tsx#L87C13-L87C38\"}),\"]\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"onsubmit\",children:\"onSubmit\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"onSubmit calls a function named \",(0,n.jsx)(e.code,{children:\"onSignIn\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert screenshot of line - \",(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/SignIn/SignInForm.tsx#L88\",children:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/SignIn/SignInForm.tsx#L88\"}),\"]\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"There's a lot happening inside \",(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/SignIn/SignInForm.tsx#L30\",children:\"onSignIn function\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const toastId = toast.loading('Signing in...')\\r\n\\r\nlet token = captchaToken\\r\nif (!token) {\\r\n      const captchaResponse = await captchaRef.current?.execute({ async: true })\\r\n      token = captchaResponse?.response ?? null\\r\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"toast is from \",(0,n.jsx)(e.a,{href:\"https://www.npmjs.com/package/sonner\",children:\"sonner package\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`let token = captchaToken\\r\nif (!token) {\\r\n      const captchaResponse = await captchaRef.current?.execute({ async: true })\\r\n      token = captchaResponse?.response ?? null\\r\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"captchaRef is reference to HCaptcha element\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`      <HCaptcha\\r\n            ref={captchaRef}\\r\n            sitekey={process.env.NEXT_PUBLIC_HCAPTCHA_SITE_KEY!}\\r\n            size=\"invisible\"\\r\n            onVerify={(token) => {\\r\n            setCaptchaToken(token)\\r\n            }}\\r\n            onExpire={() => {\\r\n            setCaptchaToken(null)\\r\n            }}\\r\n      />\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"HCaptcha is imported at the top of the file.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import HCaptcha from '@hcaptcha/react-hcaptcha'\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Token is updated based on captchaResponse.\"}),`\n`,(0,n.jsx)(e.p,{children:\"With HCaptcha, you can send upto 1 million requests per month on free plan.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const { error } = await auth.signInWithPassword({\\r\n      email,\\r\n      password,\\r\n      options: { captchaToken: token ?? undefined },\\r\n})\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"auth\"}),\" is imported from \",(0,n.jsx)(e.code,{children:\"lib/gotrue\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import { auth, buildPathWithParams, getReturnToPath } from 'lib/gotrue'\n`})}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsx)(e.p,{children:`Note: Our focus is on the way the authentication is implemented. This means, we look at the sequence of operations performed,\\r\nat a high level.`}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"when-the-auth-succeeds\",children:\"When the auth succeeds\"}),`\n`,(0,n.jsx)(e.p,{children:\"When the auth succeeds, the following are operations are performed based on error flag.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`if (!error) {\\r\n      setLastSignIn('email')\\r\n      try {\\r\n        const data = await getMfaAuthenticatorAssuranceLevel()\\r\n        if (data) {\\r\n          if (data.currentLevel !== data.nextLevel) {\\r\n            toast.success(\\`You need to provide your second factor authentication\\`, { id: toastId })\\r\n            const url = buildPathWithParams('/sign-in-mfa')\\r\n            router.replace(url)\\r\n            return\\r\n          }\\r\n        }\\r\n\\r\n        toast.success(\\`Signed in successfully!\\`, { id: toastId })\\r\n        await queryClient.resetQueries()\\r\n        const returnTo = getReturnToPath()\\r\n        // since we're already on the /sign-in page, prevent redirect loops\\r\n        router.push(returnTo === '/sign-in' ? '/projects' : returnTo)\\r\n      } catch (error: any) {\\r\n        toast.error(\\`Failed to sign in: \\${(error as AuthError).message}\\`, { id: toastId })\\r\n        Sentry.captureMessage('[CRITICAL] Failed to sign in via EP: ' + error.message)\\r\n      }\\r\n    }\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Let's analyze the operations in the above snippet.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`setLastSignIn('email')\\r\ntry {\\r\n  const data = await getMfaAuthenticatorAssuranceLevel()\\r\n  if (data) {\\r\n    if (data.currentLevel !== data.nextLevel) {\\r\n      toast.success(\\`You need to provide your second factor authentication\\`, { id: toastId })\\r\n      const url = buildPathWithParams('/sign-in-mfa')\\r\n      router.replace(url)\\r\n      return\\r\n    }\\r\n  }\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This code handles the second factor authentication, notice how it redirects to a different url - \",(0,n.jsx)(e.code,{children:\"/sign-in-mfa\"}),`\\r\nbased on the data returned by `,(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/data/profile/mfa-authenticator-assurance-level-query.ts#L9\",children:\"getMfaAuthenticatorAssuranceLevel\"})]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`toast.success(\\`Signed in successfully!\\`, { id: toastId })\\r\nawait queryClient.resetQueries()\\r\nconst returnTo = getReturnToPath()\\r\n// since we're already on the /sign-in page, prevent redirect loops\\r\nrouter.push(returnTo === '/sign-in' ? '/projects' : returnTo)\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"toast is shown, queryClient resets queries, supabase uses a query param - \",(0,n.jsx)(e.code,{children:\"returnTo\"}),` to redirect a user\\r\nto the page they came from to \"signin\".`]}),`\n`,(0,n.jsx)(e.p,{children:\"The comment there explains the mechanism to prevent redirect loops.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`catch (error: any) {\\r\n  toast.error(\\`Failed to sign in: \\${(error as AuthError).message}\\`, { id: toastId })\\r\n  Sentry.captureMessage('[CRITICAL] Failed to sign in via EP: ' + error.message)\\r\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"When the sign in fails, it is reported to Sentry vai \",(0,n.jsx)(e.code,{children:\"captureMessage\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`else {\\r\n      setCaptchaToken(null)\\r\n      captchaRef.current?.resetCaptcha()\\r\n      \\r\n      if (error.message.toLowerCase() === 'email not confirmed') {\\r\n        return toast.error(\\r\n          'Account has not been verified, please check the link sent to your email',\\r\n          { id: toastId }\\r\n        )\\r\n      }\\r\n      \\r\n      toast.error(error.message, { id: toastId })\\r\n      }\\r\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"setCaptchaToken\"}),\" is set to null, captchaRef is reset.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"if (error.message.toLowerCase() === 'email not confirmed') {\"}),` - this checks if the error message contains 'email not confirmed'\\r\nand shows a toast.error with a message.`]}),`\n`,(0,n.jsx)(e.p,{children:\"Summary of onSubmit operations:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Show a toaster\"}),`\n`,(0,n.jsx)(e.li,{children:\"Get token from captchaResponse\"}),`\n`,(0,n.jsx)(e.li,{children:\"Call the signinWithPassword function\"}),`\n`,(0,n.jsx)(e.li,{children:\"If there's no error, check if the 2FA is enabled and redirect to get the 2FA code.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"If there's no 2FA, \",(0,n.jsx)(e.code,{children:\"router.push\"}),\" based on redirectTo but with ternary operation to prevent redirect loop\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"If for any reason steps 4, 5 fail, error is reported to Sentry via \",(0,n.jsx)(e.code,{children:\"captureMessage\"})]}),`\n`,(0,n.jsx)(e.li,{children:\"If there's an error in signin, captcha is reset. In case the account is not verified, a toaster is shown\"}),`\n`]}),`\n`,(0,n.jsx)(e.h1,{id:\"references\",children:\"References:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx\",children:\"https://github.com/supabase/supabase/blob/master/apps/studio/pages/sign-in.tsx\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/SignIn/SignInForm.tsx#L22\",children:\"https://github.com/supabase/supabase/blob/master/apps/studio/components/interfaces/SignIn/SignInForm.tsx#L22\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.hcaptcha.com/\",children:\"https://www.hcaptcha.com/\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/lib/gotrue.ts\",children:\"https://github.com/supabase/supabase/blob/master/apps/studio/lib/gotrue.ts\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/supabase/supabase/blob/master/apps/studio/data/profile/mfa-authenticator-assurance-level-query.ts#L9\",children:\"https://github.com/supabase/supabase/blob/master/apps/studio/data/profile/mfa-authenticator-assurance-level-query.ts#L9\"})}),`\n`]})]})}function p(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,{...r,children:(0,n.jsx)(h,{...r})}):h(r)}return I(v);})();\n;return Component;"
  },
  "_id": "guide/codebase-architecture/supabase/security/introduction.mdx",
  "_raw": {
    "sourceFilePath": "guide/codebase-architecture/supabase/security/introduction.mdx",
    "sourceFileName": "introduction.mdx",
    "sourceFileDir": "guide/codebase-architecture/supabase/security",
    "contentType": "mdx",
    "flattenedPath": "guide/codebase-architecture/supabase/security/introduction"
  },
  "type": "Doc",
  "slug": "/guide/codebase-architecture/supabase/security/introduction",
  "slugAsParams": "codebase-architecture/supabase/security/introduction"
}
{
  "title": "arrayToDict function in tRPC source code\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\nIn this article, we analyze arrayToDict function found in [tRPC source code](https://github.com/trpc/trpc/blob/next/packages/client/src/links/internals/httpUtils.ts#L57).\r\n\r\n```javascript\r\n// https://github.com/trpc/trpc/pull/669\r\nfunction arrayToDict(array: unknown[]) {\r\n const dict: Record<number, unknown> = {};\r\n for (let index = 0; index < array.length; index++) {\r\n const element = array[index];\r\n dict[index] = element;\r\n }\r\n return dict;\r\n}\r\n```\r\n\r\nThis function is straight forward. dict is an object initialized above the for loop. In this for loop, array\\[index\\] is assigned to element and dict is an object that array indices as keys and values being array items based on index.\r\n\r\nAlthough this function is simple, a lot was discussed in PR: [https://github.com/trpc/trpc/pull/669](https://github.com/trpc/trpc/pull/669) before this solution was presented to KATT (Creator of tRPC).\r\n\r\nThis pull request was about — fix: batching with zod .optional() input.\r\n\r\nPR’s description:  \r\n\\- JSON.stringify(\\[undefined\\]) === \\[null\\]  \r\n\\- this causes issues with .optional() zod schemas as it expects an object or undefined, not null  \r\n\\- fixed by ugly hack that runs validator twice when it fails if the raw input was === null.  \r\n\\- fixed by [@simonedelmann](http://twitter.com/simonedelmann)’s idea\r\n\r\nI would recommend going through this pull request conversation to give you an insight on how decisions are made. This conversation shows how ideas are bounced around and also talk about what could break based on an idea, if it’s just an edge-case and they finally choose to go with arrayToDict idea.\r\n\r\nIn this pull request, you also find [All Contributors Github app](https://github.com/apps/allcontributors) that gives  \r\nattribution to contributor based on an idea. This is what All Contributors is about — Recognize all contributors, not just the ones who push code. With All Contributes, even if you present an idea without writing any code, you could make them a contributor with a comment:\r\n\r\n“  \r\n[@all](http://twitter.com/all)\\-contributors add [@username](http://twitter.com/username) for reviews  \r\n“\r\n\r\nand [@all](http://twitter.com/all)\\-contributors adds tagged user as a contributor.\r\n\r\n# **About me:**\r\n\r\nHey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\r\n\r\nI am open to work on interesting projects. Send me an email at ramu.narasinga@gmail.com\r\n\r\nMy Github — [https://github.com/ramu-narasinga](https://github.com/ramu-narasinga)\r\n\r\nMy website — [https://ramunarasinga.com](https://ramunarasinga.com/)\r\n\r\nMy Youtube channel — [https://www.youtube.com/@thinkthroo](https://www.youtube.com/@thinkthroo)\r\n\r\nLearning platform — [https://thinkthroo.com](https://thinkthroo.com/)\r\n\r\nCodebase Architecture — [https://app.thinkthroo.com/architecture](https://app.thinkthroo.com/architecture)\r\n\r\nBest practices — [https://app.thinkthroo.com/best-practices](https://app.thinkthroo.com/best-practices)\r\n\r\nProduction-grade projects — [https://app.thinkthroo.com/production-grade-projects](https://app.thinkthroo.com/production-grade-projects)\r\n\r\n# **References:**\r\n\r\n1. [https://github.com/trpc/trpc/blob/next/packages/client/src/links/internals/httpUtils.ts#L57](https://github.com/trpc/trpc/blob/next/packages/client/src/links/internals/httpUtils.ts#L57)\r\n    \r\n2. [https://github.com/trpc/trpc/pull/669](https://github.com/trpc/trpc/pull/669)\r\n",
    "code": "var Component=(()=>{var p=Object.create;var o=Object.defineProperty;var F=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var b=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),g=(t,e)=>{for(var r in e)o(t,r,{get:e[r],enumerable:!0})},c=(t,e,r,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of u(e))!y.call(t,l)&&l!==r&&o(t,l,{get:()=>e[l],enumerable:!(i=F(e,l))||i.enumerable});return t};var f=(t,e,r)=>(r=t!=null?p(m(t)):{},c(e||!t||!t.__esModule?o(r,\"default\",{value:t,enumerable:!0}):r,t)),w=t=>c(o({},\"__esModule\",{value:!0}),t);var a=b((v,s)=>{s.exports=_jsx_runtime});var x={};g(x,{default:()=>d,frontmatter:()=>k});var n=f(a()),k={title:\"arrayToDict function in tRPC source code\"};function h(t){let e={a:\"a\",br:\"br\",code:\"code\",div:\"div\",h1:\"h1\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"In this article, we analyze arrayToDict function found in \",(0,n.jsx)(e.a,{href:\"https://github.com/trpc/trpc/blob/next/packages/client/src/links/internals/httpUtils.ts#L57\",children:\"tRPC source code\"}),\".\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"javascript\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"javascript\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"//\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF4\"},children:\" https://github.com/trpc/trpc/pull/669\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"function\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\" arrayToDict\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"(\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\"array\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\":\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" unknown\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"[])\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" const\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" dict\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\":\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\",fontWeight:\"bold\"},children:\" Record\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"<\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\"number\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\",\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" unknown\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\">\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" =\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" {};\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" for\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" (let\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" index \"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" 0;\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" index \"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"<\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" array\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\".\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\"length\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\";\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" index\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"++)\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" const\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" element \"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" array\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"[\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\"index\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"];\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" dict\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"[\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\"index\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"]\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" =\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" element\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\";\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" }\"})}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\" return\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF\"},children:\" dict\"}),(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\";\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#FFF8\"},children:\"}\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"This function is straight forward. dict is an object initialized above the for loop. In this for loop, array[index] is assigned to element and dict is an object that array indices as keys and values being array items based on index.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Although this function is simple, a lot was discussed in PR: \",(0,n.jsx)(e.a,{href:\"https://github.com/trpc/trpc/pull/669\",children:\"https://github.com/trpc/trpc/pull/669\"}),\" before this solution was presented to KATT (Creator of tRPC).\"]}),`\n`,(0,n.jsx)(e.p,{children:\"This pull request was about \\u2014 fix: batching with zod .optional() input.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"PR\\u2019s description:\",(0,n.jsx)(e.br,{}),`\n`,\"- JSON.stringify([undefined]) === [null]\",(0,n.jsx)(e.br,{}),`\n`,\"- this causes issues with .optional() zod schemas as it expects an object or undefined, not null\",(0,n.jsx)(e.br,{}),`\n`,\"- fixed by ugly hack that runs validator twice when it fails if the raw input was === null.\",(0,n.jsx)(e.br,{}),`\n`,\"- fixed by \",(0,n.jsx)(e.a,{href:\"http://twitter.com/simonedelmann\",children:\"@simonedelmann\"}),\"\\u2019s idea\"]}),`\n`,(0,n.jsx)(e.p,{children:\"I would recommend going through this pull request conversation to give you an insight on how decisions are made. This conversation shows how ideas are bounced around and also talk about what could break based on an idea, if it\\u2019s just an edge-case and they finally choose to go with arrayToDict idea.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this pull request, you also find \",(0,n.jsx)(e.a,{href:\"https://github.com/apps/allcontributors\",children:\"All Contributors Github app\"}),\" that gives\",(0,n.jsx)(e.br,{}),`\n`,\"attribution to contributor based on an idea. This is what All Contributors is about \\u2014 Recognize all contributors, not just the ones who push code. With All Contributes, even if you present an idea without writing any code, you could make them a contributor with a comment:\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\u201C\",(0,n.jsx)(e.br,{}),`\n`,(0,n.jsx)(e.a,{href:\"http://twitter.com/all\",children:\"@all\"}),\"-contributors add \",(0,n.jsx)(e.a,{href:\"http://twitter.com/username\",children:\"@username\"}),\" for reviews\",(0,n.jsx)(e.br,{}),`\n`,\"\\u201C\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"and \",(0,n.jsx)(e.a,{href:\"http://twitter.com/all\",children:\"@all\"}),\"-contributors adds tagged user as a contributor.\"]}),`\n`,(0,n.jsx)(e.h1,{id:\"about-me\",children:(0,n.jsx)(e.strong,{children:\"About me:\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Hey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"I am open to work on interesting projects. Send me an email at \",(0,n.jsx)(e.a,{href:\"mailto:ramu.narasinga@gmail.com\",children:\"ramu.narasinga@gmail.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Github \\u2014 \",(0,n.jsx)(e.a,{href:\"https://github.com/ramu-narasinga\",children:\"https://github.com/ramu-narasinga\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My website \\u2014 \",(0,n.jsx)(e.a,{href:\"https://ramunarasinga.com/\",children:\"https://ramunarasinga.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Youtube channel \\u2014 \",(0,n.jsx)(e.a,{href:\"https://www.youtube.com/@thinkthroo\",children:\"https://www.youtube.com/@thinkthroo\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Learning platform \\u2014 \",(0,n.jsx)(e.a,{href:\"https://thinkthroo.com/\",children:\"https://thinkthroo.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Codebase Architecture \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/architecture\",children:\"https://app.thinkthroo.com/architecture\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Best practices \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/best-practices\",children:\"https://app.thinkthroo.com/best-practices\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Production-grade projects \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/production-grade-projects\",children:\"https://app.thinkthroo.com/production-grade-projects\"})]}),`\n`,(0,n.jsx)(e.h1,{id:\"references\",children:(0,n.jsx)(e.strong,{children:\"References:\"})}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/trpc/trpc/blob/next/packages/client/src/links/internals/httpUtils.ts#L57\",children:\"https://github.com/trpc/trpc/blob/next/packages/client/src/links/internals/httpUtils.ts#L57\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/trpc/trpc/pull/669\",children:\"https://github.com/trpc/trpc/pull/669\"})}),`\n`]}),`\n`]})]})}function d(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(h,{...t})}):h(t)}return w(x);})();\n;return Component;"
  },
  "_id": "blog/arrayToDict-function.mdx",
  "_raw": {
    "sourceFilePath": "blog/arrayToDict-function.mdx",
    "sourceFileName": "arrayToDict-function.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/arrayToDict-function"
  },
  "type": "Doc",
  "slug": "/blog/arrayToDict-function",
  "slugAsParams": "arrayToDict-function"
}
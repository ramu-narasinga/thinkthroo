{
  "title": "How Tailwind CSS detects circular dependancy.\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\n![](https://miro.medium.com/v2/resize:fit:875/1*VThlmyxd0bN028srx1jlVg.png)\r\n\r\nIn this article, we analyze error thrown in [substituteAtApply](https://github.com/tailwindlabs/tailwindcss/blob/c01b8254e822d4f328674357347ca0532f1283a0/packages/tailwindcss/src/apply.ts). This error is about circular dependency detected.\r\n\r\n```plaintext\r\nwalk(rule.nodes, (child) => {\r\n  if (child !== node) return\r\n  throw new Error(\r\n   `You cannot \\`@apply\\` the \\`${candidate}\\` utility here because it creates a circular dependency.`,\r\n   )\r\n})\r\n```\r\n\r\nThis is a high level overview of the code around this error.\r\n\r\n## **walk — recursive function:**\r\n\r\nLet’s begin with [walk](https://github.com/tailwindlabs/tailwindcss/blob/next/packages/tailwindcss/src/ast.ts#L70):\r\n\r\n```plaintext\r\nexport function walk(\r\n   ast: AstNode[],\r\n   visit: (\r\n     node: AstNode,\r\n     utils: {\r\n     parent: AstNode | null\r\n     replaceWith(newNode: AstNode | AstNode[]): void\r\n     context: Record<string, string>\r\n   },\r\n ) => void | WalkAction,\r\n parent: AstNode | null = null,\r\n context: Record<string, string> = {},\r\n) {\r\n for (let i = 0; i < ast.length; i++) {\r\n   let node = ast[i]\r\n  // We want context nodes to be transparent in walks. This means that\r\n   // whenever we encounter one, we immediately walk through its children and\r\n   // furthermore we also don't update the parent.\r\n if (node.kind === 'context') {\r\n   walk(node.nodes, visit, parent, { …context, …node.context })\r\n   continue\r\n }\r\nlet status = visit(node, {\r\n   parent,\r\n   replaceWith(newNode) {\r\n   ast.splice(i, 1, …(Array.isArray(newNode) ? newNode : [newNode]))\r\n   // We want to visit the newly replaced node(s), which start at the\r\n   // current index (i). By decrementing the index here, the next loop\r\n   // will process this position (containing the replaced node) again.\r\n   i - \r\n },\r\n context,\r\n }) ?? WalkAction.Continue\r\n  // Stop the walk entirely\r\n   if (status === WalkAction.Stop) return\r\n  // Skip visiting the children of this node\r\n   if (status === WalkAction.Skip) continue\r\n  if (node.kind === 'rule') {\r\n   walk(node.nodes, visit, node, context)\r\n   }\r\n }\r\n}\r\n```\r\n\r\nwalk is a recursive function located in [ast.ts](https://github.com/tailwindlabs/tailwindcss/blob/next/packages/tailwindcss/src/ast.ts#L70C1-L118C1).\r\n\r\nIt calls itself recursively when `node.kind === ‘context’` or when `node.kind === ‘rule’`, breaking condition is based on status\r\n\r\n```plaintext\r\n// Stop the walk entirely\r\nif (status === WalkAction.Stop) return\r\n// Skip visiting the children of this node\r\nif (status === WalkAction.Skip) continue\r\n```\r\n\r\nNow let’s zoom out a bit and study the code in the vicinity of walk function in [apply.ts](https://github.com/tailwindlabs/tailwindcss/blob/c01b8254e822d4f328674357347ca0532f1283a0/packages/tailwindcss/src/apply.ts)\r\n\r\n```plaintext\r\n// Verify that we don't have any circular dependencies by verifying that\r\n// the current node does not appear in the new nodes.\r\nwalk(newNodes, (child) => {\r\n if (child !== node) return\r\n  // At this point we already know that we have a circular dependency.\r\n  //\r\n  // Figure out which candidate caused the circular dependency. This will\r\n // help to create a useful error message for the end user.\r\n for (let candidate of candidates) {\r\n   let selector = `.${escape(candidate)}`\r\n    for (let rule of candidateAst) {\r\n     if (rule.kind !== 'rule') continue\r\n     if (rule.selector !== selector) continue\r\n      walk(rule.nodes, (child) => {\r\n     if (child !== node) return\r\n      throw new Error(\r\n       `You cannot \\`@apply\\` the \\`${candidate}\\` utility here because it creates a circular dependency.`,\r\n       )\r\n     })\r\n    }\r\n }\r\n})\r\n```\r\n\r\nTailwindCSS authors have added explaining comments across the codebase where required or it makes sense to provide additional context  \r\nwith comments.\r\n\r\n# **About me:**\r\n\r\nHey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\r\n\r\nI am open to work on interesting projects. Send me an email at ramu.narasinga@gmail.com\r\n\r\nMy Github — [https://github.com/ramu-narasinga](https://github.com/ramu-narasinga)\r\n\r\nMy website — [https://ramunarasinga.com](https://ramunarasinga.com/)\r\n\r\nMy Youtube channel — [https://www.youtube.com/@thinkthroo](https://www.youtube.com/@thinkthroo)\r\n\r\nLearning platform — [https://thinkthroo.com](https://thinkthroo.com/)\r\n\r\nCodebase Architecture — [https://app.thinkthroo.com/architecture](https://app.thinkthroo.com/architecture)\r\n\r\nBest practices — [https://app.thinkthroo.com/best-practices](https://app.thinkthroo.com/best-practices)\r\n\r\nProduction-grade projects — [https://app.thinkthroo.com/production-grade-projects](https://app.thinkthroo.com/production-grade-projects)\r\n\r\n# **References:**\r\n\r\n1. [https://github.com/tailwindlabs/tailwindcss/blob/next/packages/tailwindcss/src/ast.ts#L70](https://github.com/tailwindlabs/tailwindcss/blob/next/packages/tailwindcss/src/ast.ts#L70)\r\n    \r\n2. [https://github.com/tailwindlabs/tailwindcss/blob/c01b8254e822d4f328674357347ca0532f1283a0/packages/tailwindcss/src/apply.ts](https://github.com/tailwindlabs/tailwindcss/blob/c01b8254e822d4f328674357347ca0532f1283a0/packages/tailwindcss/src/apply.ts)\r\n    \r\n3. [https://stackoverflow.com/questions/71669246/need-help-using-apply-directive-in-tailwind-css](https://stackoverflow.com/questions/71669246/need-help-using-apply-directive-in-tailwind-css)\r\n    \r\n4. https://github.com/tailwindlabs/tailwindcss/issues/2807\r\n",
    "code": "var Component=(()=>{var o=Object.create;var l=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var N=(a,n)=>()=>(n||a((n={exports:{}}).exports,n),n.exports),f=(a,n)=>{for(var i in n)l(a,i,{get:n[i],enumerable:!0})},t=(a,n,i,c)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let s of u(n))!g.call(a,s)&&s!==i&&l(a,s,{get:()=>n[s],enumerable:!(c=m(n,s))||c.enumerable});return a};var b=(a,n,i)=>(i=a!=null?o(w(a)):{},t(n||!a||!a.__esModule?l(i,\"default\",{value:a,enumerable:!0}):i,a)),k=a=>t(l({},\"__esModule\",{value:!0}),a);var d=N((A,r)=>{r.exports=_jsx_runtime});var x={};f(x,{default:()=>p,frontmatter:()=>y});var e=b(d()),y={title:\"How Tailwind CSS detects circular dependancy.\"};function h(a){let n={a:\"a\",br:\"br\",code:\"code\",div:\"div\",h1:\"h1\",h2:\"h2\",img:\"img\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",...a.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{src:\"https://miro.medium.com/v2/resize:fit:875/1*VThlmyxd0bN028srx1jlVg.png\",alt:\"\"})}),`\n`,(0,e.jsxs)(n.p,{children:[\"In this article, we analyze error thrown in \",(0,e.jsx)(n.a,{href:\"https://github.com/tailwindlabs/tailwindcss/blob/c01b8254e822d4f328674357347ca0532f1283a0/packages/tailwindcss/src/apply.ts\",children:\"substituteAtApply\"}),\". This error is about circular dependency detected.\"]}),`\n`,(0,e.jsx)(n.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,e.jsx)(n.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,e.jsxs)(n.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"walk(rule.nodes, (child) => {\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  if (child !== node) return\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  throw new Error(\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"   `You cannot \\\\`@apply\\\\` the \\\\`${candidate}\\\\` utility here because it creates a circular dependency.`,\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"   )\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"})\"})})]})})}),`\n`,(0,e.jsx)(n.p,{children:\"This is a high level overview of the code around this error.\"}),`\n`,(0,e.jsx)(n.h2,{id:\"walk--recursive-function\",children:(0,e.jsx)(n.strong,{children:\"walk \\u2014 recursive function:\"})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Let\\u2019s begin with \",(0,e.jsx)(n.a,{href:\"https://github.com/tailwindlabs/tailwindcss/blob/next/packages/tailwindcss/src/ast.ts#L70\",children:\"walk\"}),\":\"]}),`\n`,(0,e.jsx)(n.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,e.jsx)(n.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,e.jsxs)(n.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"export function walk(\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"   ast: AstNode[],\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"   visit: (\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"     node: AstNode,\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"     utils: {\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"     parent: AstNode | null\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"     replaceWith(newNode: AstNode | AstNode[]): void\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"     context: Record<string, string>\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"   },\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\" ) => void | WalkAction,\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\" parent: AstNode | null = null,\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\" context: Record<string, string> = {},\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\") {\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\" for (let i = 0; i < ast.length; i++) {\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"   let node = ast[i]\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  // We want context nodes to be transparent in walks. This means that\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"   // whenever we encounter one, we immediately walk through its children and\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"   // furthermore we also don't update the parent.\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\" if (node.kind === 'context') {\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"   walk(node.nodes, visit, parent, { \\u2026context, \\u2026node.context })\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"   continue\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\" }\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"let status = visit(node, {\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"   parent,\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"   replaceWith(newNode) {\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"   ast.splice(i, 1, \\u2026(Array.isArray(newNode) ? newNode : [newNode]))\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"   // We want to visit the newly replaced node(s), which start at the\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"   // current index (i). By decrementing the index here, the next loop\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"   // will process this position (containing the replaced node) again.\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"   i - \"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\" },\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\" context,\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\" }) ?? WalkAction.Continue\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  // Stop the walk entirely\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"   if (status === WalkAction.Stop) return\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  // Skip visiting the children of this node\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"   if (status === WalkAction.Skip) continue\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  if (node.kind === 'rule') {\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"   walk(node.nodes, visit, node, context)\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"   }\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\" }\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"}\"})})]})})}),`\n`,(0,e.jsxs)(n.p,{children:[\"walk is a recursive function located in \",(0,e.jsx)(n.a,{href:\"https://github.com/tailwindlabs/tailwindcss/blob/next/packages/tailwindcss/src/ast.ts#L70C1-L118C1\",children:\"ast.ts\"}),\".\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"It calls itself recursively when \",(0,e.jsx)(n.code,{children:\"node.kind === \\u2018context\\u2019\"}),\" or when \",(0,e.jsx)(n.code,{children:\"node.kind === \\u2018rule\\u2019\"}),\", breaking condition is based on status\"]}),`\n`,(0,e.jsx)(n.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,e.jsx)(n.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,e.jsxs)(n.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"// Stop the walk entirely\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"if (status === WalkAction.Stop) return\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"// Skip visiting the children of this node\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"if (status === WalkAction.Skip) continue\"})})]})})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Now let\\u2019s zoom out a bit and study the code in the vicinity of walk function in \",(0,e.jsx)(n.a,{href:\"https://github.com/tailwindlabs/tailwindcss/blob/c01b8254e822d4f328674357347ca0532f1283a0/packages/tailwindcss/src/apply.ts\",children:\"apply.ts\"})]}),`\n`,(0,e.jsx)(n.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,e.jsx)(n.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,e.jsxs)(n.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"// Verify that we don't have any circular dependencies by verifying that\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"// the current node does not appear in the new nodes.\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"walk(newNodes, (child) => {\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\" if (child !== node) return\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  // At this point we already know that we have a circular dependency.\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  //\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  // Figure out which candidate caused the circular dependency. This will\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\" // help to create a useful error message for the end user.\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\" for (let candidate of candidates) {\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"   let selector = `.${escape(candidate)}`\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"    for (let rule of candidateAst) {\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"     if (rule.kind !== 'rule') continue\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"     if (rule.selector !== selector) continue\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"      walk(rule.nodes, (child) => {\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"     if (child !== node) return\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"      throw new Error(\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"       `You cannot \\\\`@apply\\\\` the \\\\`${candidate}\\\\` utility here because it creates a circular dependency.`,\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"       )\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"     })\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"    }\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\" }\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"})\"})})]})})}),`\n`,(0,e.jsxs)(n.p,{children:[\"TailwindCSS authors have added explaining comments across the codebase where required or it makes sense to provide additional context\",(0,e.jsx)(n.br,{}),`\n`,\"with comments.\"]}),`\n`,(0,e.jsx)(n.h1,{id:\"about-me\",children:(0,e.jsx)(n.strong,{children:\"About me:\"})}),`\n`,(0,e.jsx)(n.p,{children:\"Hey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"I am open to work on interesting projects. Send me an email at \",(0,e.jsx)(n.a,{href:\"mailto:ramu.narasinga@gmail.com\",children:\"ramu.narasinga@gmail.com\"})]}),`\n`,(0,e.jsxs)(n.p,{children:[\"My Github \\u2014 \",(0,e.jsx)(n.a,{href:\"https://github.com/ramu-narasinga\",children:\"https://github.com/ramu-narasinga\"})]}),`\n`,(0,e.jsxs)(n.p,{children:[\"My website \\u2014 \",(0,e.jsx)(n.a,{href:\"https://ramunarasinga.com/\",children:\"https://ramunarasinga.com\"})]}),`\n`,(0,e.jsxs)(n.p,{children:[\"My Youtube channel \\u2014 \",(0,e.jsx)(n.a,{href:\"https://www.youtube.com/@thinkthroo\",children:\"https://www.youtube.com/@thinkthroo\"})]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Learning platform \\u2014 \",(0,e.jsx)(n.a,{href:\"https://thinkthroo.com/\",children:\"https://thinkthroo.com\"})]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Codebase Architecture \\u2014 \",(0,e.jsx)(n.a,{href:\"https://app.thinkthroo.com/architecture\",children:\"https://app.thinkthroo.com/architecture\"})]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Best practices \\u2014 \",(0,e.jsx)(n.a,{href:\"https://app.thinkthroo.com/best-practices\",children:\"https://app.thinkthroo.com/best-practices\"})]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Production-grade projects \\u2014 \",(0,e.jsx)(n.a,{href:\"https://app.thinkthroo.com/production-grade-projects\",children:\"https://app.thinkthroo.com/production-grade-projects\"})]}),`\n`,(0,e.jsx)(n.h1,{id:\"references\",children:(0,e.jsx)(n.strong,{children:\"References:\"})}),`\n`,(0,e.jsxs)(n.ol,{children:[`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.a,{href:\"https://github.com/tailwindlabs/tailwindcss/blob/next/packages/tailwindcss/src/ast.ts#L70\",children:\"https://github.com/tailwindlabs/tailwindcss/blob/next/packages/tailwindcss/src/ast.ts#L70\"})}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.a,{href:\"https://github.com/tailwindlabs/tailwindcss/blob/c01b8254e822d4f328674357347ca0532f1283a0/packages/tailwindcss/src/apply.ts\",children:\"https://github.com/tailwindlabs/tailwindcss/blob/c01b8254e822d4f328674357347ca0532f1283a0/packages/tailwindcss/src/apply.ts\"})}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.a,{href:\"https://stackoverflow.com/questions/71669246/need-help-using-apply-directive-in-tailwind-css\",children:\"https://stackoverflow.com/questions/71669246/need-help-using-apply-directive-in-tailwind-css\"})}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.a,{href:\"https://github.com/tailwindlabs/tailwindcss/issues/2807\",children:\"https://github.com/tailwindlabs/tailwindcss/issues/2807\"})}),`\n`]}),`\n`]})]})}function p(a={}){let{wrapper:n}=a.components||{};return n?(0,e.jsx)(n,{...a,children:(0,e.jsx)(h,{...a})}):h(a)}return k(x);})();\n;return Component;"
  },
  "_id": "blog/How-Tailwind-CSS-detects.mdx",
  "_raw": {
    "sourceFilePath": "blog/How-Tailwind-CSS-detects.mdx",
    "sourceFileName": "How-Tailwind-CSS-detects.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/How-Tailwind-CSS-detects"
  },
  "type": "Doc",
  "slug": "/blog/How-Tailwind-CSS-detects",
  "slugAsParams": "How-Tailwind-CSS-detects"
}
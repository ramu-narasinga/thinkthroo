{
  "title": "asyncDebounce function in Refine codebase, a React framework.\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\nIn this article, we will review a function named [asyncDebounce in Refine source code](https://github.com/refinedev/refine/blob/main/packages/core/src/definitions/helpers/async-debounce/index.ts). \r\n\r\n```plaintext\r\nimport debounce from \"lodash/debounce\";\r\n\r\ntype Callbacks<T extends (...args: any) => any> = {\r\n  resolve?: (value: Awaited<ReturnType<T>>) => void;\r\n  reject?: (reason?: any) => void;\r\n};\r\n\r\ntype DebouncedFunction<T extends (...args: any) => any> = {\r\n  (...args: Parameters<T>): Promise<Awaited<ReturnType<T>>>;\r\n  flush: () => void;\r\n  cancel: () => void;\r\n};\r\n\r\n/**\r\n * Debounces sync and async functions with given wait time. The debounced function returns a promise which can be awaited or catched.\r\n * Only the last call of the debounced function will resolve or reject.\r\n * Previous calls will be rejected with the given cancelReason.\r\n *\r\n * The original debounce function doesn't work well with async functions,\r\n * It won't return a promise to resolve/reject and therefore it's not possible to await the result.\r\n * This will always return a promise to handle and await the result.\r\n * Previous calls will be rejected immediately after a new call made.\r\n */\r\nexport const asyncDebounce = <T extends (...args: any[]) => any>(\r\n  func: T,\r\n  wait = 1000,\r\n  cancelReason?: string,\r\n): DebouncedFunction<T> => {\r\n  let callbacks: Array<Callbacks<T>> = [];\r\n\r\n  const cancelPrevious = () => {\r\n    callbacks.forEach((cb) => cb.reject?.(cancelReason));\r\n    callbacks = [];\r\n  };\r\n\r\n  const debouncedFunc = debounce((...args: Parameters<T>) => {\r\n    const { resolve, reject } = callbacks.pop() || {};\r\n    Promise.resolve(func(...args))\r\n      .then(resolve)\r\n      .catch(reject);\r\n  }, wait);\r\n\r\n  const runner = (...args: Parameters<T>) => {\r\n  };\r\n\r\n  runner.flush = () => debouncedFunc.flush();\r\n  runner.cancel = () => {\r\n    debouncedFunc.cancel();\r\n    cancelPrevious();\r\n  };\r\n\r\n  return runner;\r\n};\r\n```\r\n\r\nThis piece of code is picked from a file named [async-debounce/index.ts](https://github.com/refinedev/refine/blob/main/packages/core/src/definitions/helpers/async-debounce/index.ts)\r\n\r\nLet’s try to understand this code in chunks.\r\n\r\n```plaintext\r\nimport debounce from \"lodash/debounce\";\r\n\r\ntype Callbacks<T extends (...args: any) => any> = {\r\n  resolve?: (value: Awaited<ReturnType<T>>) => void;\r\n  reject?: (reason?: any) => void;\r\n};\r\n\r\ntype DebouncedFunction<T extends (...args: any) => any> = {\r\n  (...args: Parameters<T>): Promise<Awaited<ReturnType<T>>>;\r\n  flush: () => void;\r\n  cancel: () => void;\r\n};\r\n```\r\n\r\nSo Refine still uses debounce from lodash/debounce, evident from that import. There are two generic types written here, Callbacks and DebouncedFunction.\r\n\r\n### Why would you need asyncDebounce?\r\n\r\n> *The original debounce function doesn’t work well with async functions,  \r\n> *It won’t return a promise to resolve/reject and therefore it’s not possible to await the result.  \r\n> \\* This will always return a promise to handle and await the result.  \r\n> \\* Previous calls will be rejected immediately after a new call made.\r\n\r\nThis is a comment I picked from [async-debounce/index.ts](https://github.com/refinedev/refine/blob/main/packages/core/src/definitions/helpers/async-debounce/index.ts) in Refine codebase.\r\n\r\n![](https://cdn-images-1.medium.com/max/1000/1*N8N6c2_RL7MEPudwiJgPJw.png)\r\n\r\n### asyncDebounce function definition\r\n\r\n```plaintext\r\nexport const asyncDebounce = <T extends (...args: any[]) => any>(\r\n  func: T,\r\n  wait = 1000,\r\n  cancelReason?: string,\r\n): DebouncedFunction<T> => {\r\n```\r\n\r\nThis asyncDebounce function accepts three parameters:\r\n\r\n* func\r\n    \r\n* wait\r\n    \r\n* cancelReason \r\n    \r\n\r\n```plaintext\r\nlet callbacks: Array<Callbacks<T>> = [];\r\n\r\nconst cancelPrevious = () => {\r\n  callbacks.forEach((cb) => cb.reject?.(cancelReason));\r\n  callbacks = [];\r\n};\r\n```\r\n\r\ncallbacks is initialized to empty array. cancelPrevious rejects alls the previous requests fired by calling reject with a cancelReason and then set to an empty array.\r\n\r\n```plaintext\r\nconst debouncedFunc = debounce((...args: Parameters<T>) => {\r\n  const { resolve, reject } = callbacks.pop() || {};\r\n  Promise.resolve(func(...args))\r\n    .then(resolve)\r\n    .catch(reject);\r\n}, wait);\r\n```\r\n\r\ncallbacks.pop() returns the last item in the array and the Promise.resolve is called on `func(…args)` in debouncedFunc.\r\n\r\n```plaintext\r\nconst runner = (...args: Parameters<T>) => {\r\n  return new Promise<Awaited<ReturnType<T>>>((resolve, reject) => {\r\n    cancelPrevious();\r\n\r\n    callbacks.push({\r\n      resolve,\r\n      reject,\r\n    });\r\n\r\n    debouncedFunc(...args);\r\n  });\r\n};\r\n```\r\n\r\nThis is an important function and returns a Promise. cancelPrevious function rejects all the previous promises. callbacks is pushed with an object and then debouncedFunc is called with args.\r\n\r\n```plaintext\r\nrunner.flush = () => debouncedFunc.flush();\r\nrunner.cancel = () => {\r\n  debouncedFunc.cancel();\r\n  cancelPrevious();\r\n};\r\n\r\nreturn runner;\r\n```\r\n\r\nSince runner returns a Promise and asyncDebounce returns runner, this is how asyncDebounce returns a Promise according to the comment mentioned above in this article.\r\n\r\n### About me:\r\n\r\nHey, my name is [Ramu Narasinga](https://ramunarasinga.com). I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\r\n\r\n***I am open to work on interesting projects. Send me an email at ramu.narasinga@gmail.com***\r\n\r\nMy Github —  [https://github.com/ramu-narasinga](https://github.com/ramu-narasinga)\r\n\r\nMy website —  [https://ramunarasinga.com](https://ramunarasinga.com/)\r\n\r\nMy Youtube channel —  [https://www.youtube.com/@thinkthroo](https://www.youtube.com/@thinkthroo)\r\n\r\nLearning platform —  [https://thinkthroo.com](https://thinkthroo.com/)\r\n\r\nCodebase Architecture —  [https://app.thinkthroo.com/architecture](https://app.thinkthroo.com/architecture)\r\n\r\nBest practices —  [https://app.thinkthroo.com/best-practices](https://app.thinkthroo.com/best-practices)\r\n\r\nProduction-grade projects —  [https://app.thinkthroo.com/production-grade-projects](https://app.thinkthroo.com/production-grade-projects)\r\n\r\n### References:\r\n\r\n1. [https://github.com/refinedev/refine/blob/main/packages/core/src/definitions/helpers/async-debounce/index.ts](https://github.com/refinedev/refine/blob/main/packages/core/src/definitions/helpers/async-debounce/index.ts)",
    "code": "var Component=(()=>{var o=Object.create;var l=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var N=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),g=(a,e)=>{for(var s in e)l(a,s,{get:e[s],enumerable:!0})},r=(a,e,s,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of u(e))!f.call(a,c)&&c!==s&&l(a,c,{get:()=>e[c],enumerable:!(i=m(e,c))||i.enumerable});return a};var y=(a,e,s)=>(s=a!=null?o(b(a)):{},r(e||!a||!a.__esModule?l(s,\"default\",{value:a,enumerable:!0}):s,a)),w=a=>r(l({},\"__esModule\",{value:!0}),a);var t=N((T,d)=>{d.exports=_jsx_runtime});var k={};g(k,{default:()=>p,frontmatter:()=>v});var n=y(t()),v={title:\"asyncDebounce function in Refine codebase, a React framework.\"};function h(a){let e={a:\"a\",blockquote:\"blockquote\",br:\"br\",code:\"code\",div:\"div\",em:\"em\",h3:\"h3\",img:\"img\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",ul:\"ul\",...a.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"In this article, we will review a function named \",(0,n.jsx)(e.a,{href:\"https://github.com/refinedev/refine/blob/main/packages/core/src/definitions/helpers/async-debounce/index.ts\",children:\"asyncDebounce in Refine source code\"}),\".\\xA0\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:'import debounce from \"lodash/debounce\";'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"type Callbacks<T extends (...args: any) => any> = {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  resolve?: (value: Awaited<ReturnType<T>>) => void;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  reject?: (reason?: any) => void;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"};\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"type DebouncedFunction<T extends (...args: any) => any> = {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  (...args: Parameters<T>): Promise<Awaited<ReturnType<T>>>;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  flush: () => void;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  cancel: () => void;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"};\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"/**\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" * Debounces sync and async functions with given wait time. The debounced function returns a promise which can be awaited or catched.\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" * Only the last call of the debounced function will resolve or reject.\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" * Previous calls will be rejected with the given cancelReason.\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" *\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" * The original debounce function doesn't work well with async functions,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" * It won't return a promise to resolve/reject and therefore it's not possible to await the result.\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" * This will always return a promise to handle and await the result.\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" * Previous calls will be rejected immediately after a new call made.\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" */\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"export const asyncDebounce = <T extends (...args: any[]) => any>(\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  func: T,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  wait = 1000,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  cancelReason?: string,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"): DebouncedFunction<T> => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  let callbacks: Array<Callbacks<T>> = [];\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const cancelPrevious = () => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    callbacks.forEach((cb) => cb.reject?.(cancelReason));\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    callbacks = [];\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  };\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const debouncedFunc = debounce((...args: Parameters<T>) => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    const { resolve, reject } = callbacks.pop() || {};\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    Promise.resolve(func(...args))\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      .then(resolve)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      .catch(reject);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  }, wait);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const runner = (...args: Parameters<T>) => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  };\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  runner.flush = () => debouncedFunc.flush();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  runner.cancel = () => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    debouncedFunc.cancel();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    cancelPrevious();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  };\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  return runner;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"};\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This piece of code is picked from a file named \",(0,n.jsx)(e.a,{href:\"https://github.com/refinedev/refine/blob/main/packages/core/src/definitions/helpers/async-debounce/index.ts\",children:\"async-debounce/index.ts\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"Let\\u2019s try to understand this code in chunks.\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:'import debounce from \"lodash/debounce\";'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"type Callbacks<T extends (...args: any) => any> = {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  resolve?: (value: Awaited<ReturnType<T>>) => void;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  reject?: (reason?: any) => void;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"};\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"type DebouncedFunction<T extends (...args: any) => any> = {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  (...args: Parameters<T>): Promise<Awaited<ReturnType<T>>>;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  flush: () => void;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  cancel: () => void;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"};\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"So Refine still uses debounce from lodash/debounce, evident from that import. There are two generic types written here, Callbacks and DebouncedFunction.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"why-would-you-need-asyncdebounce\",children:\"Why would you need asyncDebounce?\"}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"*The original debounce function doesn\\u2019t work well with async functions,\",(0,n.jsx)(e.br,{}),`\n`,\"*It won\\u2019t return a promise to resolve/reject and therefore it\\u2019s not possible to await the result.\",(0,n.jsx)(e.br,{}),`\n`,\"* This will always return a promise to handle and await the result.\",(0,n.jsx)(e.br,{}),`\n`,\"* Previous calls will be rejected immediately after a new call made.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"This is a comment I picked from \",(0,n.jsx)(e.a,{href:\"https://github.com/refinedev/refine/blob/main/packages/core/src/definitions/helpers/async-debounce/index.ts\",children:\"async-debounce/index.ts\"}),\" in Refine codebase.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://cdn-images-1.medium.com/max/1000/1*N8N6c2_RL7MEPudwiJgPJw.png\",alt:\"\"})}),`\n`,(0,n.jsx)(e.h3,{id:\"asyncdebounce-function-definition\",children:\"asyncDebounce function definition\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"export const asyncDebounce = <T extends (...args: any[]) => any>(\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  func: T,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  wait = 1000,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  cancelReason?: string,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"): DebouncedFunction<T> => {\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"This asyncDebounce function accepts three parameters:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"func\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"wait\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"cancelReason\\xA0\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"let callbacks: Array<Callbacks<T>> = [];\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const cancelPrevious = () => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  callbacks.forEach((cb) => cb.reject?.(cancelReason));\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  callbacks = [];\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"};\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"callbacks is initialized to empty array. cancelPrevious rejects alls the previous requests fired by calling reject with a cancelReason and then set to an empty array.\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const debouncedFunc = debounce((...args: Parameters<T>) => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  const { resolve, reject } = callbacks.pop() || {};\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  Promise.resolve(func(...args))\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    .then(resolve)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    .catch(reject);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}, wait);\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"callbacks.pop() returns the last item in the array and the Promise.resolve is called on \",(0,n.jsx)(e.code,{children:\"func(\\u2026args)\"}),\" in debouncedFunc.\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const runner = (...args: Parameters<T>) => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  return new Promise<Awaited<ReturnType<T>>>((resolve, reject) => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    cancelPrevious();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    callbacks.push({\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      resolve,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"      reject,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    });\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    debouncedFunc(...args);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  });\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"};\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"This is an important function and returns a Promise. cancelPrevious function rejects all the previous promises. callbacks is pushed with an object and then debouncedFunc is called with args.\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"runner.flush = () => debouncedFunc.flush();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"runner.cancel = () => {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  debouncedFunc.cancel();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  cancelPrevious();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"};\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"return runner;\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"Since runner returns a Promise and asyncDebounce returns runner, this is how asyncDebounce returns a Promise according to the comment mentioned above in this article.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"about-me\",children:\"About me:\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Hey, my name is \",(0,n.jsx)(e.a,{href:\"https://ramunarasinga.com\",children:\"Ramu Narasinga\"}),\". I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:(0,n.jsxs)(e.strong,{children:[\"I am open to work on interesting projects. Send me an email at \",(0,n.jsx)(e.a,{href:\"mailto:ramu.narasinga@gmail.com\",children:\"ramu.narasinga@gmail.com\"})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Github\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://github.com/ramu-narasinga\",children:\"https://github.com/ramu-narasinga\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My website\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://ramunarasinga.com/\",children:\"https://ramunarasinga.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Youtube channel\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://www.youtube.com/@thinkthroo\",children:\"https://www.youtube.com/@thinkthroo\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Learning platform\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://thinkthroo.com/\",children:\"https://thinkthroo.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Codebase Architecture\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/architecture\",children:\"https://app.thinkthroo.com/architecture\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Best practices\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/best-practices\",children:\"https://app.thinkthroo.com/best-practices\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Production-grade projects\\u200A\\u2014\\u200A \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/production-grade-projects\",children:\"https://app.thinkthroo.com/production-grade-projects\"})]}),`\n`,(0,n.jsx)(e.h3,{id:\"references\",children:\"References:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/refinedev/refine/blob/main/packages/core/src/definitions/helpers/async-debounce/index.ts\",children:\"https://github.com/refinedev/refine/blob/main/packages/core/src/definitions/helpers/async-debounce/index.ts\"})}),`\n`]})]})}function p(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,{...a,children:(0,n.jsx)(h,{...a})}):h(a)}return w(k);})();\n;return Component;"
  },
  "_id": "blog/asyncDebounce-function-in-Refine.mdx",
  "_raw": {
    "sourceFilePath": "blog/asyncDebounce-function-in-Refine.mdx",
    "sourceFileName": "asyncDebounce-function-in-Refine.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/asyncDebounce-function-in-Refine"
  },
  "type": "Doc",
  "slug": "/blog/asyncDebounce-function-in-Refine",
  "slugAsParams": "asyncDebounce-function-in-Refine"
}
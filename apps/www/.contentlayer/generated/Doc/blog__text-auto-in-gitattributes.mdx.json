{
  "title": "text=auto in .gitattributes file\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\nIn this article, we analyse the .gitattributes from the [react/.gitattributes](https://github.com/facebook/react/blob/main/.gitattributes). When you are part of a team, you and your colleagues often work on projects across different operating systems and development environments. As a result, file formatting issues, especially related to line endings, can arise.\r\n\r\n* **Linux/macOS** use a Line Feed (LF) character.\r\n    \r\n* **Windows** uses a Carriage Return + Line Feed (CRLF) combination.\r\n    \r\n\r\nusing `.gitattributes` you can define file’s line endings. We will study the .gitattributes from React source and find out how.\r\n\r\n# **What is** `.gitattributes`?\r\n\r\n`.gitattributes` is a configuration file that defines attributes for paths in a Git repository. These attributes allow you to control how Git processes different types of files during specific operations, such as:\r\n\r\n1. **Check-in and check-out**: How files are stored in the repository and retrieved in the working directory. [Link to docs](https://git-scm.com/docs/gitattributes#_effects)\r\n    \r\n2. **Diff and merge behavior**: How changes to files are compared or merged. [Link to docs](https://git-scm.com/docs/gitattributes#_diff).\r\n    \r\n3. **EOL (End of Line) conversion**: Ensuring line endings are consistent across operating systems (Linux/macOS vs. Windows). [Link to docs](https://git-scm.com/docs/gitattributes#_eol)\r\n    \r\n\r\nThe file can be committed into the repository and versioned, meaning its rules are applied consistently for every collaborator, regardless of their local settings.\r\n\r\n![](https://miro.medium.com/v2/resize:fit:875/1*EgQVYYylY9Qn2h8TY0Dn6A.png)\r\n\r\n# **Why is** `.gitattributes` Important?\r\n\r\n1. **Cross-Platform Consistency**: Different operating systems use different end-of-line (EOL) characters (LF on Unix-based systems, CRLF on Windows). Without `.gitattributes`, inconsistencies in line endings can result in unnecessary changes being detected, cluttering your Git history and causing conflicts.\r\n    \r\n2. **Binary vs. Text File Handling**: Git automatically tries to detect whether a file is binary or text, but it may not always get it right (e.g., files that are partially ASCII but contain binary data). `.gitattributes` ensures that files are treated correctly, whether they’re text, binary, or specific formats like images or PDFs.\r\n    \r\n\r\nYou can read this more at this [in-depth Stackoverflow answer](https://stackoverflow.com/questions/73086622/is-a-gitattributes-file-really-necessary-for-git).\r\n\r\n**3\\. Control Over Diffs and Merges**: `.gitattributes` can define custom diff and merge strategies, enabling better control over how files are compared and resolved during conflict situations.\r\n\r\n## **Common** `.gitattributes` Configuration\r\n\r\nA typical `.gitattributes` file looks something like this:\r\n\r\n```plaintext\r\n# Auto-detect text files and ensure LF line endings in the repository\r\n* text=auto\r\n# Windows batch scripts must use CRLF\r\n*.bat text eol=crlf\r\n# Go files should use LF only\r\n*.go text eol=lf\r\n# Binary files should not be modified by Git\r\n*.png binary\r\n*.jpg binary\r\n*.pdf binary\r\n```\r\n\r\n* `text=auto`: Automatically detects whether a file is text or binary. If the file is text, Git converts line endings to LF on check-in. This prevents cross-platform issues caused by different EOL characters.\r\n    \r\n* `*.bat text eol=crlf`: Forces Windows batch scripts to always use CRLF for proper execution on Windows.\r\n    \r\n* `*.go text eol=lf`: Ensures Go files use LF, which is the standard line ending on Linux and macOS.\r\n    \r\n* `*.png binary`: Prevents Git from attempting to diff or alter binary files like PNGs, which are not human-readable and should not have EOL conversions.\r\n    \r\n\r\n## `.gitattributes` in React\r\n\r\nReact uses a minimal `.gitattributes` file:\r\n\r\n```plaintext\r\n* text=auto\r\n```\r\n\r\nThis simple line ensures that files with text content (such as JavaScript files) have their line endings converted to LF in the repository while preserving the developers’ local EOL preferences. This setup is enough to prevent line-ending issues across platforms while keeping the repository clean and consistent.\r\n\r\n## **Key Attributes Explained**\r\n\r\n1\\. `text`:\r\n\r\nThis attribute enables Git’s automatic handling of line-ending normalization. It ensures that line endings are consistent (LF) in the repository while allowing the developer’s system to handle them according to local conventions (e.g., CRLF on Windows).\r\n\r\n* **Set**: Enables EOL conversion on check-in and checkout, normalizing line endings to LF in the repository.\r\n    \r\n* **Unset**: Disables any line-ending conversion for the specified files.\r\n    \r\n* `text=auto`: Automatically detects if a file is text or binary. Git performs EOL normalization if the file is identified as text.\r\n    \r\n\r\n## **Is** `.gitattributes` Really Necessary?\r\n\r\nThe necessity of `.gitattributes` depends on the project. For simple projects, Git is often smart enough to handle file types and line endings automatically. However, in larger projects with cross-platform teams, not having a `.gitattributes` file can lead to:\r\n\r\n* **Inconsistent Line Endings**: Developers on Windows may accidentally commit CRLF line endings, creating unnecessary changes in the repository.\r\n    \r\n\r\nImagine just the EOL lines changes appearing in your pull request?\r\n\r\n* **Incorrect Binary Handling**: Git may misinterpret binary files as text, leading to corrupt diffs or merge conflicts.\r\n    \r\n* **Merge and Diff Issues**: Custom merge strategies (e.g., for Unity or image files) are impossible without `.gitattributes`.\r\n    \r\n\r\n## **StackOverflow answer:**\r\n\r\nA [common concern raised on StackOverflow](https://stackoverflow.com/questions/73086622/is-a-gitattributes-file-really-necessary-for-git) is whether `.gitattributes` adds unnecessary complexity to a project.\r\n\r\n> *“Use* `.gitattributes` *if and only if you have to have Git mess with files because users A through M use macOS and users N through Z use Windows.”*\r\n\r\nIn short, while not strictly mandatory, `.gitattributes` provides a level of control that can prevent subtle issues and improve developer experience.\r\n\r\n![](https://miro.medium.com/v2/resize:fit:875/1*jSFEa2iNXE1alcXfAslwSQ.png)\r\n\r\nReact devs kept it simple by just adding 1 line `* text=auto` to ensure you are ***not*** including EOL changes as part of your pull request.\r\n\r\n# **About me:**\r\n\r\nHey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\r\n\r\nI am open to work on interesting projects. Send me an email at ramu.narasinga@gmail.com\r\n\r\nMy Github — [https://github.com/ramu-narasinga](https://github.com/ramu-narasinga)\r\n\r\nMy website — [https://ramunarasinga.com](https://ramunarasinga.com/)\r\n\r\nMy Youtube channel — [https://www.youtube.com/@thinkthroo](https://www.youtube.com/@thinkthroo)\r\n\r\nLearning platform — [https://thinkthroo.com](https://thinkthroo.com/)\r\n\r\nCodebase Architecture — [https://app.thinkthroo.com/architecture](https://app.thinkthroo.com/architecture)\r\n\r\nBest practices — [https://app.thinkthroo.com/best-practices](https://app.thinkthroo.com/best-practices)\r\n\r\nProduction-grade projects — [https://app.thinkthroo.com/production-grade-projects](https://app.thinkthroo.com/production-grade-projects)\r\n\r\n# **References:**\r\n\r\n1. [https://github.com/facebook/react/blob/main/.gitattributes](https://github.com/facebook/react/blob/main/.gitattributes)\r\n    \r\n2. [https://git-scm.com/docs/gitattributes](https://git-scm.com/docs/gitattributes)\r\n    \r\n3. [https://stackoverflow.com/questions/73086622/is-a-gitattributes-file-really-necessary-for-git](https://stackoverflow.com/questions/73086622/is-a-gitattributes-file-really-necessary-for-git)\r\n    \r\n",
    "code": "var Component=(()=>{var p=Object.create;var s=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var b=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),y=(t,e)=>{for(var i in e)s(t,i,{get:e[i],enumerable:!0})},c=(t,e,i,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of g(e))!f.call(t,r)&&r!==i&&s(t,r,{get:()=>e[r],enumerable:!(a=u(e,r))||a.enumerable});return t};var w=(t,e,i)=>(i=t!=null?p(m(t)):{},c(e||!t||!t.__esModule?s(i,\"default\",{value:t,enumerable:!0}):i,t)),v=t=>c(s({},\"__esModule\",{value:!0}),t);var l=b((F,o)=>{o.exports=_jsx_runtime});var k={};y(k,{default:()=>d,frontmatter:()=>x});var n=w(l()),x={title:\"text=auto in .gitattributes file\"};function h(t){let e={a:\"a\",blockquote:\"blockquote\",code:\"code\",div:\"div\",em:\"em\",h1:\"h1\",h2:\"h2\",img:\"img\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",ul:\"ul\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"In this article, we analyse the .gitattributes from the \",(0,n.jsx)(e.a,{href:\"https://github.com/facebook/react/blob/main/.gitattributes\",children:\"react/.gitattributes\"}),\". When you are part of a team, you and your colleagues often work on projects across different operating systems and development environments. As a result, file formatting issues, especially related to line endings, can arise.\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Linux/macOS\"}),\" use a Line Feed (LF) character.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Windows\"}),\" uses a Carriage Return + Line Feed (CRLF) combination.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"using \",(0,n.jsx)(e.code,{children:\".gitattributes\"}),\" you can define file\\u2019s line endings. We will study the .gitattributes from React source and find out how.\"]}),`\n`,(0,n.jsxs)(e.h1,{id:\"what-is-gitattributes\",children:[(0,n.jsx)(e.strong,{children:\"What is\"}),\" \",(0,n.jsx)(e.code,{children:\".gitattributes\"}),\"?\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\".gitattributes\"}),\" is a configuration file that defines attributes for paths in a Git repository. These attributes allow you to control how Git processes different types of files during specific operations, such as:\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Check-in and check-out\"}),\": How files are stored in the repository and retrieved in the working directory. \",(0,n.jsx)(e.a,{href:\"https://git-scm.com/docs/gitattributes#_effects\",children:\"Link to docs\"})]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Diff and merge behavior\"}),\": How changes to files are compared or merged. \",(0,n.jsx)(e.a,{href:\"https://git-scm.com/docs/gitattributes#_diff\",children:\"Link to docs\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"EOL (End of Line) conversion\"}),\": Ensuring line endings are consistent across operating systems (Linux/macOS vs. Windows). \",(0,n.jsx)(e.a,{href:\"https://git-scm.com/docs/gitattributes#_eol\",children:\"Link to docs\"})]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"The file can be committed into the repository and versioned, meaning its rules are applied consistently for every collaborator, regardless of their local settings.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:875/1*EgQVYYylY9Qn2h8TY0Dn6A.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.h1,{id:\"why-is-gitattributes-important\",children:[(0,n.jsx)(e.strong,{children:\"Why is\"}),\" \",(0,n.jsx)(e.code,{children:\".gitattributes\"}),\" Important?\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Cross-Platform Consistency\"}),\": Different operating systems use different end-of-line (EOL) characters (LF on Unix-based systems, CRLF on Windows). Without \",(0,n.jsx)(e.code,{children:\".gitattributes\"}),\", inconsistencies in line endings can result in unnecessary changes being detected, cluttering your Git history and causing conflicts.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Binary vs. Text File Handling\"}),\": Git automatically tries to detect whether a file is binary or text, but it may not always get it right (e.g., files that are partially ASCII but contain binary data). \",(0,n.jsx)(e.code,{children:\".gitattributes\"}),\" ensures that files are treated correctly, whether they\\u2019re text, binary, or specific formats like images or PDFs.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can read this more at this \",(0,n.jsx)(e.a,{href:\"https://stackoverflow.com/questions/73086622/is-a-gitattributes-file-really-necessary-for-git\",children:\"in-depth Stackoverflow answer\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"3. Control Over Diffs and Merges\"}),\": \",(0,n.jsx)(e.code,{children:\".gitattributes\"}),\" can define custom diff and merge strategies, enabling better control over how files are compared and resolved during conflict situations.\"]}),`\n`,(0,n.jsxs)(e.h2,{id:\"common-gitattributes-configuration\",children:[(0,n.jsx)(e.strong,{children:\"Common\"}),\" \",(0,n.jsx)(e.code,{children:\".gitattributes\"}),\" Configuration\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"A typical \",(0,n.jsx)(e.code,{children:\".gitattributes\"}),\" file looks something like this:\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"# Auto-detect text files and ensure LF line endings in the repository\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"* text=auto\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"# Windows batch scripts must use CRLF\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"*.bat text eol=crlf\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"# Go files should use LF only\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"*.go text eol=lf\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"# Binary files should not be modified by Git\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"*.png binary\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"*.jpg binary\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"*.pdf binary\"})})]})})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"text=auto\"}),\": Automatically detects whether a file is text or binary. If the file is text, Git converts line endings to LF on check-in. This prevents cross-platform issues caused by different EOL characters.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"*.bat text eol=crlf\"}),\": Forces Windows batch scripts to always use CRLF for proper execution on Windows.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"*.go text eol=lf\"}),\": Ensures Go files use LF, which is the standard line ending on Linux and macOS.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"*.png binary\"}),\": Prevents Git from attempting to diff or alter binary files like PNGs, which are not human-readable and should not have EOL conversions.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.h2,{id:\"gitattributes-in-react\",children:[(0,n.jsx)(e.code,{children:\".gitattributes\"}),\" in React\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"React uses a minimal \",(0,n.jsx)(e.code,{children:\".gitattributes\"}),\" file:\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsx)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"* text=auto\"})})})})}),`\n`,(0,n.jsx)(e.p,{children:\"This simple line ensures that files with text content (such as JavaScript files) have their line endings converted to LF in the repository while preserving the developers\\u2019 local EOL preferences. This setup is enough to prevent line-ending issues across platforms while keeping the repository clean and consistent.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"key-attributes-explained\",children:(0,n.jsx)(e.strong,{children:\"Key Attributes Explained\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"1. \",(0,n.jsx)(e.code,{children:\"text\"}),\":\"]}),`\n`,(0,n.jsx)(e.p,{children:\"This attribute enables Git\\u2019s automatic handling of line-ending normalization. It ensures that line endings are consistent (LF) in the repository while allowing the developer\\u2019s system to handle them according to local conventions (e.g., CRLF on Windows).\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Set\"}),\": Enables EOL conversion on check-in and checkout, normalizing line endings to LF in the repository.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Unset\"}),\": Disables any line-ending conversion for the specified files.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.code,{children:\"text=auto\"}),\": Automatically detects if a file is text or binary. Git performs EOL normalization if the file is identified as text.\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.h2,{id:\"is-gitattributes-really-necessary\",children:[(0,n.jsx)(e.strong,{children:\"Is\"}),\" \",(0,n.jsx)(e.code,{children:\".gitattributes\"}),\" Really Necessary?\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The necessity of \",(0,n.jsx)(e.code,{children:\".gitattributes\"}),\" depends on the project. For simple projects, Git is often smart enough to handle file types and line endings automatically. However, in larger projects with cross-platform teams, not having a \",(0,n.jsx)(e.code,{children:\".gitattributes\"}),\" file can lead to:\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Inconsistent Line Endings\"}),\": Developers on Windows may accidentally commit CRLF line endings, creating unnecessary changes in the repository.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Imagine just the EOL lines changes appearing in your pull request?\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Incorrect Binary Handling\"}),\": Git may misinterpret binary files as text, leading to corrupt diffs or merge conflicts.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Merge and Diff Issues\"}),\": Custom merge strategies (e.g., for Unity or image files) are impossible without \",(0,n.jsx)(e.code,{children:\".gitattributes\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h2,{id:\"stackoverflow-answer\",children:(0,n.jsx)(e.strong,{children:\"StackOverflow answer:\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"A \",(0,n.jsx)(e.a,{href:\"https://stackoverflow.com/questions/73086622/is-a-gitattributes-file-really-necessary-for-git\",children:\"common concern raised on StackOverflow\"}),\" is whether \",(0,n.jsx)(e.code,{children:\".gitattributes\"}),\" adds unnecessary complexity to a project.\"]}),`\n`,(0,n.jsxs)(e.blockquote,{children:[`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:\"\\u201CUse\"}),\" \",(0,n.jsx)(e.code,{children:\".gitattributes\"}),\" \",(0,n.jsx)(e.em,{children:\"if and only if you have to have Git mess with files because users A through M use macOS and users N through Z use Windows.\\u201D\"})]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In short, while not strictly mandatory, \",(0,n.jsx)(e.code,{children:\".gitattributes\"}),\" provides a level of control that can prevent subtle issues and improve developer experience.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:875/1*jSFEa2iNXE1alcXfAslwSQ.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"React devs kept it simple by just adding 1 line \",(0,n.jsx)(e.code,{children:\"* text=auto\"}),\" to ensure you are \",(0,n.jsx)(e.em,{children:(0,n.jsx)(e.strong,{children:\"not\"})}),\" including EOL changes as part of your pull request.\"]}),`\n`,(0,n.jsx)(e.h1,{id:\"about-me\",children:(0,n.jsx)(e.strong,{children:\"About me:\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Hey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"I am open to work on interesting projects. Send me an email at \",(0,n.jsx)(e.a,{href:\"mailto:ramu.narasinga@gmail.com\",children:\"ramu.narasinga@gmail.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Github \\u2014 \",(0,n.jsx)(e.a,{href:\"https://github.com/ramu-narasinga\",children:\"https://github.com/ramu-narasinga\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My website \\u2014 \",(0,n.jsx)(e.a,{href:\"https://ramunarasinga.com/\",children:\"https://ramunarasinga.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Youtube channel \\u2014 \",(0,n.jsx)(e.a,{href:\"https://www.youtube.com/@thinkthroo\",children:\"https://www.youtube.com/@thinkthroo\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Learning platform \\u2014 \",(0,n.jsx)(e.a,{href:\"https://thinkthroo.com/\",children:\"https://thinkthroo.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Codebase Architecture \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/architecture\",children:\"https://app.thinkthroo.com/architecture\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Best practices \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/best-practices\",children:\"https://app.thinkthroo.com/best-practices\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Production-grade projects \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/production-grade-projects\",children:\"https://app.thinkthroo.com/production-grade-projects\"})]}),`\n`,(0,n.jsx)(e.h1,{id:\"references\",children:(0,n.jsx)(e.strong,{children:\"References:\"})}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/facebook/react/blob/main/.gitattributes\",children:\"https://github.com/facebook/react/blob/main/.gitattributes\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://git-scm.com/docs/gitattributes\",children:\"https://git-scm.com/docs/gitattributes\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://stackoverflow.com/questions/73086622/is-a-gitattributes-file-really-necessary-for-git\",children:\"https://stackoverflow.com/questions/73086622/is-a-gitattributes-file-really-necessary-for-git\"})}),`\n`]}),`\n`]})]})}function d(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(h,{...t})}):h(t)}return v(k);})();\n;return Component;"
  },
  "_id": "blog/text-auto-in-gitattributes.mdx",
  "_raw": {
    "sourceFilePath": "blog/text-auto-in-gitattributes.mdx",
    "sourceFileName": "text-auto-in-gitattributes.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/text-auto-in-gitattributes"
  },
  "type": "Doc",
  "slug": "/blog/text-auto-in-gitattributes",
  "slugAsParams": "text-auto-in-gitattributes"
}
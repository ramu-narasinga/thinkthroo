{
  "title": "withAlpha utility in Tailwind CSS source code.\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\nIn this article, we analyse [withAlpha utitlity function](https://github.com/tailwindlabs/tailwindcss/blob/next/packages/tailwindcss/src/utilities.ts#L108-L123) in Tailwind CSS source code.\r\n\r\n```plaintext\r\n/**\r\n * Apply opacity to a color using `color-mix`.\r\n */\r\nexport function withAlpha(value: string, alpha: string): string {\r\n  if (alpha === null) return value\r\n\r\n  // Convert numeric values (like `0.5`) to percentages (like `50%`) so they\r\n  // work properly with `color-mix`. Assume anything that isn't a number is\r\n  // safe to pass through as-is, like `var(--my-opacity)`.\r\n  let alphaAsNumber = Number(alpha)\r\n  if (!Number.isNaN(alphaAsNumber)) {\r\n    alpha = `${alphaAsNumber * 100}%`\r\n  }\r\n\r\n  // If the alpha value is a percentage, we can pass it directly to\r\n  // `color-mix()`. In any other case, e.g.: `var(…)`, `round(…)`, … we need to\r\n  // make sure it's a percentage.\r\n  else if (alpha[alpha.length - 1] !== '%') {\r\n    alpha = `calc(${alpha} * 100%)`\r\n  }\r\n\r\n  return `color-mix(in srgb, ${value} ${alpha}, transparent)`\r\n}\r\n```\r\n\r\nThe beauty about this utility function is that it comes with comments explaining what the code does.\r\n\r\n```plaintext\r\n// Convert numeric values (like `0.5`) to percentages (like `50%`) so they\r\n// work properly with `color-mix`. Assume anything that isn't a number is\r\n// safe to pass through as-is, like `var(--my-opacity)`.\r\nlet alphaAsNumber = Number(alpha)\r\nif (!Number.isNaN(alphaAsNumber)) {\r\n  alpha = `${alphaAsNumber * 100}%`\r\n}\r\n```\r\n\r\nFirst the alpha is converted to Number, withAlpha accepts `alpha` as a string and is assigned to a variable named `alphaAsNumber`\r\n\r\nif alphaAsNumber is not a number, then this is converted to % by multiplying it with \\* 100.\r\n\r\n```plaintext\r\n// If the alpha value is a percentage, we can pass it directly to\r\n// `color-mix()`. In any other case, e.g.: `var(…)`, `round(…)`, … we need to\r\n// make sure it's a percentage.\r\nelse if (alpha[alpha.length - 1] !== '%') {\r\n  alpha = `calc(${alpha} * 100%)`\r\n}\r\n```\r\n\r\nThe way this above code snippet ensures that alpha value is a percentage is by checking if the item at last index is ‘%’, otherwise, it is multiplied with `*100%`.\r\n\r\nand finally color-mix is returned.\r\n\r\n```plaintext\r\nreturn `color-mix(in srgb, ${value} ${alpha}, transparent)`\r\n```\r\n\r\nbut you might be wondering what a color-mix is.\r\n\r\n# **color-mix**\r\n\r\nThe `color-mix()` functional notation takes two [`<color>`](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value) values and returns the result of mixing them in a given colorspace by a given amount. — [MDN documentation](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-mix).\r\n\r\n![](https://miro.medium.com/v2/resize:fit:875/1*TOWU7KHZMiOGjWdnSs5rfA.png)\r\n\r\n# **About me:**\r\n\r\nHey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\r\n\r\nI am open to work on interesting projects. Send me an email at ramu.narasinga@gmail.com\r\n\r\nMy Github — [https://github.com/ramu-narasinga](https://github.com/ramu-narasinga)\r\n\r\nMy website — [https://ramunarasinga.com](https://ramunarasinga.com/)\r\n\r\nMy Youtube channel — [https://www.youtube.com/@thinkthroo](https://www.youtube.com/@thinkthroo)\r\n\r\nLearning platform — [https://thinkthroo.com](https://thinkthroo.com/)\r\n\r\nCodebase Architecture — [https://app.thinkthroo.com/architecture](https://app.thinkthroo.com/architecture)\r\n\r\nBest practices — [https://app.thinkthroo.com/best-practices](https://app.thinkthroo.com/best-practices)\r\n\r\nProduction-grade projects — [https://app.thinkthroo.com/production-grade-projects](https://app.thinkthroo.com/production-grade-projects)\r\n\r\n# **References:**\r\n\r\n1. [https://github.com/tailwindlabs/tailwindcss/blob/next/packages/tailwindcss/src/utilities.ts#L108-L123](https://github.com/tailwindlabs/tailwindcss/blob/next/packages/tailwindcss/src/utilities.ts#L108-L123)\r\n    \r\n2. [https://github.com/tailwindlabs/tailwindcss/blob/c01b8254e822d4f328674357347ca0532f1283a0/packages/tailwindcss/src/design-system.ts#L136](https://github.com/tailwindlabs/tailwindcss/blob/c01b8254e822d4f328674357347ca0532f1283a0/packages/tailwindcss/src/design-system.ts#L136)\r\n    \r\n3. [https://developer.mozilla.org/en-US/docs/Web/CSS/color\\_value/color-mix](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-mix)\r\n",
    "code": "var Component=(()=>{var o=Object.create;var t=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var f=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),N=(a,e)=>{for(var i in e)t(a,i,{get:e[i],enumerable:!0})},r=(a,e,i,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let l of u(e))!b.call(a,l)&&l!==i&&t(a,l,{get:()=>e[l],enumerable:!(s=m(e,l))||s.enumerable});return a};var w=(a,e,i)=>(i=a!=null?o(g(a)):{},r(e||!a||!a.__esModule?t(i,\"default\",{value:a,enumerable:!0}):i,a)),y=a=>r(t({},\"__esModule\",{value:!0}),a);var h=f((A,c)=>{c.exports=_jsx_runtime});var v={};N(v,{default:()=>p,frontmatter:()=>x});var n=w(h()),x={title:\"withAlpha utility in Tailwind CSS source code.\"};function d(a){let e={a:\"a\",code:\"code\",div:\"div\",h1:\"h1\",img:\"img\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",...a.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"In this article, we analyse \",(0,n.jsx)(e.a,{href:\"https://github.com/tailwindlabs/tailwindcss/blob/next/packages/tailwindcss/src/utilities.ts#L108-L123\",children:\"withAlpha utitlity function\"}),\" in Tailwind CSS source code.\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"/**\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" * Apply opacity to a color using `color-mix`.\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" */\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"export function withAlpha(value: string, alpha: string): string {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  if (alpha === null) return value\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  // Convert numeric values (like `0.5`) to percentages (like `50%`) so they\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  // work properly with `color-mix`. Assume anything that isn't a number is\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  // safe to pass through as-is, like `var(--my-opacity)`.\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  let alphaAsNumber = Number(alpha)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  if (!Number.isNaN(alphaAsNumber)) {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    alpha = `${alphaAsNumber * 100}%`\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  }\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  // If the alpha value is a percentage, we can pass it directly to\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  // `color-mix()`. In any other case, e.g.: `var(\\u2026)`, `round(\\u2026)`, \\u2026 we need to\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  // make sure it's a percentage.\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  else if (alpha[alpha.length - 1] !== '%') {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"    alpha = `calc(${alpha} * 100%)`\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  }\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  return `color-mix(in srgb, ${value} ${alpha}, transparent)`\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"The beauty about this utility function is that it comes with comments explaining what the code does.\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"// Convert numeric values (like `0.5`) to percentages (like `50%`) so they\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"// work properly with `color-mix`. Assume anything that isn't a number is\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"// safe to pass through as-is, like `var(--my-opacity)`.\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"let alphaAsNumber = Number(alpha)\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"if (!Number.isNaN(alphaAsNumber)) {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  alpha = `${alphaAsNumber * 100}%`\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"First the alpha is converted to Number, withAlpha accepts \",(0,n.jsx)(e.code,{children:\"alpha\"}),\" as a string and is assigned to a variable named \",(0,n.jsx)(e.code,{children:\"alphaAsNumber\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"if alphaAsNumber is not a number, then this is converted to % by multiplying it with * 100.\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"// If the alpha value is a percentage, we can pass it directly to\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"// `color-mix()`. In any other case, e.g.: `var(\\u2026)`, `round(\\u2026)`, \\u2026 we need to\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"// make sure it's a percentage.\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"else if (alpha[alpha.length - 1] !== '%') {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  alpha = `calc(${alpha} * 100%)`\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The way this above code snippet ensures that alpha value is a percentage is by checking if the item at last index is \\u2018%\\u2019, otherwise, it is multiplied with \",(0,n.jsx)(e.code,{children:\"*100%\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"and finally color-mix is returned.\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsx)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"return `color-mix(in srgb, ${value} ${alpha}, transparent)`\"})})})})}),`\n`,(0,n.jsx)(e.p,{children:\"but you might be wondering what a color-mix is.\"}),`\n`,(0,n.jsx)(e.h1,{id:\"color-mix\",children:(0,n.jsx)(e.strong,{children:\"color-mix\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.code,{children:\"color-mix()\"}),\" functional notation takes two \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\",children:(0,n.jsx)(e.code,{children:\"<color>\"})}),\" values and returns the result of mixing them in a given colorspace by a given amount. \\u2014 \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-mix\",children:\"MDN documentation\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:875/1*TOWU7KHZMiOGjWdnSs5rfA.png\",alt:\"\"})}),`\n`,(0,n.jsx)(e.h1,{id:\"about-me\",children:(0,n.jsx)(e.strong,{children:\"About me:\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Hey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"I am open to work on interesting projects. Send me an email at \",(0,n.jsx)(e.a,{href:\"mailto:ramu.narasinga@gmail.com\",children:\"ramu.narasinga@gmail.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Github \\u2014 \",(0,n.jsx)(e.a,{href:\"https://github.com/ramu-narasinga\",children:\"https://github.com/ramu-narasinga\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My website \\u2014 \",(0,n.jsx)(e.a,{href:\"https://ramunarasinga.com/\",children:\"https://ramunarasinga.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Youtube channel \\u2014 \",(0,n.jsx)(e.a,{href:\"https://www.youtube.com/@thinkthroo\",children:\"https://www.youtube.com/@thinkthroo\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Learning platform \\u2014 \",(0,n.jsx)(e.a,{href:\"https://thinkthroo.com/\",children:\"https://thinkthroo.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Codebase Architecture \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/architecture\",children:\"https://app.thinkthroo.com/architecture\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Best practices \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/best-practices\",children:\"https://app.thinkthroo.com/best-practices\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Production-grade projects \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/production-grade-projects\",children:\"https://app.thinkthroo.com/production-grade-projects\"})]}),`\n`,(0,n.jsx)(e.h1,{id:\"references\",children:(0,n.jsx)(e.strong,{children:\"References:\"})}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/tailwindlabs/tailwindcss/blob/next/packages/tailwindcss/src/utilities.ts#L108-L123\",children:\"https://github.com/tailwindlabs/tailwindcss/blob/next/packages/tailwindcss/src/utilities.ts#L108-L123\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/tailwindlabs/tailwindcss/blob/c01b8254e822d4f328674357347ca0532f1283a0/packages/tailwindcss/src/design-system.ts#L136\",children:\"https://github.com/tailwindlabs/tailwindcss/blob/c01b8254e822d4f328674357347ca0532f1283a0/packages/tailwindcss/src/design-system.ts#L136\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-mix\",children:\"https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-mix\"})}),`\n`]}),`\n`]})]})}function p(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,{...a,children:(0,n.jsx)(d,{...a})}):d(a)}return y(v);})();\n;return Component;"
  },
  "_id": "blog/withAlpha-utility-in-Tailwind.mdx",
  "_raw": {
    "sourceFilePath": "blog/withAlpha-utility-in-Tailwind.mdx",
    "sourceFileName": "withAlpha-utility-in-Tailwind.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/withAlpha-utility-in-Tailwind"
  },
  "type": "Doc",
  "slug": "/blog/withAlpha-utility-in-Tailwind",
  "slugAsParams": "withAlpha-utility-in-Tailwind"
}
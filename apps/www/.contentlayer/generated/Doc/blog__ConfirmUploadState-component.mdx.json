{
<<<<<<< HEAD
  "title": "ConfirmUploadState component in FilePizza codebase.\r",
=======
  "title": "ConfirmUploadState component in FilePizza codebase.",
>>>>>>> 442b740f3cf43317109944c6cf4b7ca543a8cddf
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
<<<<<<< HEAD
    "raw": "\r\nIn this article, we will review [ConfirmUploadState component in FilePizza codebase](https://github.com/kern/filepizza/blob/main/src/app/page.tsx#L55).\r\n\r\n![](https://cdn-images-1.medium.com/max/1000/1*JFiGdKoihrb0m_913vbxVQ.png)\r\n\r\n### ConfirmUploadState\r\n\r\nThis is the component that you see once you upload a file on FilePizza.\r\n\r\n![](https://cdn-images-1.medium.com/max/1000/1*Av5zfITiLDQuZmEsi32kcw.png)\r\n\r\nWhen you look at the code below for ConfirmUploadState component, it makes sense.\r\n\r\n```plaintext\r\nfunction ConfirmUploadState({\r\n  uploadedFiles,\r\n  password,\r\n  onChangePassword,\r\n  onCancel,\r\n  onStart,\r\n  onRemoveFile,\r\n}: {\r\n  uploadedFiles: UploadedFile[]\r\n  password: string\r\n  onChangePassword: (pw: string) => void\r\n  onCancel: () => void\r\n  onStart: () => void\r\n  onRemoveFile: (index: number) => void\r\n}): JSX.Element {\r\n  const fileListData = useUploaderFileListData(uploadedFiles)\r\n  return (\r\n    <PageWrapper>\r\n      <TitleText>\r\n        You are about to start uploading{' '}\r\n        {pluralize(uploadedFiles.length, 'file', 'files')}.\r\n      </TitleText>\r\n      <UploadFileList files={fileListData} onRemove={onRemoveFile} />\r\n      <PasswordField value={password} onChange={onChangePassword} />\r\n      <div className=\"flex space-x-4\">\r\n        <CancelButton onClick={onCancel} />\r\n        <StartButton onClick={onStart} />\r\n      </div>\r\n    </PageWrapper>\r\n  )\r\n}\r\n```\r\n\r\nYou can see, there’s StartButton, CancelButton and the UploadFileList components, most importantly PasswordField.\r\n\r\n#### PasswordField\r\n\r\n```plaintext\r\nimport React, { JSX, useCallback } from 'react'\r\nimport InputLabel from './InputLabel'\r\n\r\nexport default function PasswordField({\r\n  value,\r\n  onChange,\r\n  isRequired = false,\r\n  isInvalid = false,\r\n}: {\r\n  value: string\r\n  onChange: (v: string) => void\r\n  isRequired?: boolean\r\n  isInvalid?: boolean\r\n}): JSX.Element {\r\n  const handleChange = useCallback(\r\n    function (e: React.ChangeEvent<HTMLInputElement>): void {\r\n      onChange(e.target.value)\r\n    },\r\n    [onChange],\r\n  )\r\n\r\n  return (\r\n    <div className=\"flex flex-col w-full\">\r\n      <InputLabel\r\n        hasError={isInvalid}\r\n        tooltip=\"The downloader must provide this password to start downloading the file. If you don't specify a password here, any downloader with the link to the file will be able to download it. It is not used to encrypt the file, as this is performed by WebRTC's DTLS already.\"\r\n      >\r\n        {isRequired ? 'Password' : 'Password (optional)'}\r\n      </InputLabel>\r\n      <input\r\n        autoFocus\r\n        type=\"password\"\r\n        className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 ${\r\n          isInvalid\r\n            ? 'border-red-500 dark:border-red-400'\r\n            : 'border-stone-300 dark:border-stone-600'\r\n        } bg-white dark:bg-stone-800 text-stone-900 dark:text-stone-100`}\r\n        placeholder=\"Enter a secret password for this slice of FilePizza...\"\r\n        value={value}\r\n        onChange={handleChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n```\r\n\r\nThe password entered here is managed in the root component, UploadPage and is passed as a prop to UploadingState component that has WebRTCProvider as shown below\r\n\r\n```plaintext\r\n<WebRTCPeerProvider>\r\n  <Uploader files={uploadedFiles} password={password} onStop={onStop} />\r\n</WebRTCPeerProvider>\r\n```\r\n\r\nThis password is passed as a parameter to a function named useUploaderConnections\r\n\r\n```plaintext\r\nexport default function Uploader({\r\n  files,\r\n  password,\r\n  onStop,\r\n}: {\r\n  files: UploadedFile[]\r\n  password: string\r\n  onStop: () => void\r\n}): JSX.Element {\r\n  const { peer, stop } = useWebRTCPeer()\r\n  const { isLoading, error, longSlug, shortSlug, longURL, shortURL } =\r\n    useUploaderChannel(peer.id)\r\n  const connections = useUploaderConnections(peer, files, password)\r\n```\r\n\r\n[useUploaderConnections](https://github.com/kern/filepizza/blob/main/src/hooks/useUploaderConnections.ts#L29) hook seems to large and complicated, I might write more about this in another article.\r\n\r\n### About me:\r\n\r\nHey, my name is [Ramu Narasinga](https://ramunarasinga.com). I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\r\n\r\n***I am open to work on interesting projects. Send me an email at ramu.narasinga@gmail.com***\r\n\r\nMy Github — [https://github.com/ramu-narasinga](https://github.com/ramu-narasinga)\r\n\r\nMy website — [https://ramunarasinga.com](https://ramunarasinga.com/)\r\n\r\nMy Youtube channel — [https://www.youtube.com/@ramu-narasinga](https://www.youtube.com/@ramu-narasinga)\r\n\r\nLearning platform — [https://thinkthroo.com](https://thinkthroo.com/)\r\n\r\nCodebase Architecture — [https://app.thinkthroo.com/architecture](https://app.thinkthroo.com/architecture)\r\n\r\nBest practices — [https://app.thinkthroo.com/best-practices](https://app.thinkthroo.com/best-practices)\r\n\r\nProduction-grade projects — [https://app.thinkthroo.com/production-grade-projects](https://app.thinkthroo.com/production-grade-projects)\r\n\r\n### References:\r\n\r\n1. [https://github.com/kern/filepizza/blob/main/src/app/page.tsx#L55](https://github.com/kern/filepizza/blob/main/src/app/page.tsx#L55)\r\n    \r\n2. [https://github.com/kern/filepizza/blob/main/src/app/page.tsx#L146](https://github.com/kern/filepizza/blob/main/src/app/page.tsx#L146)\r\n    \r\n3. [https://github.com/kern/filepizza/blob/main/src/hooks/useUploaderConnections.ts#L29](https://github.com/kern/filepizza/blob/main/src/hooks/useUploaderConnections.ts#L29)",
=======
    "raw": "\nIn this article, we will review [ConfirmUploadState component in FilePizza codebase](https://github.com/kern/filepizza/blob/main/src/app/page.tsx#L55).\n\n![](https://cdn-images-1.medium.com/max/1000/1*JFiGdKoihrb0m_913vbxVQ.png)\n\n### ConfirmUploadState\n\nThis is the component that you see once you upload a file on FilePizza.\n\n![](https://cdn-images-1.medium.com/max/1000/1*Av5zfITiLDQuZmEsi32kcw.png)\n\nWhen you look at the code below for ConfirmUploadState component, it makes sense.\n\n```plaintext\nfunction ConfirmUploadState({\n  uploadedFiles,\n  password,\n  onChangePassword,\n  onCancel,\n  onStart,\n  onRemoveFile,\n}: {\n  uploadedFiles: UploadedFile[]\n  password: string\n  onChangePassword: (pw: string) => void\n  onCancel: () => void\n  onStart: () => void\n  onRemoveFile: (index: number) => void\n}): JSX.Element {\n  const fileListData = useUploaderFileListData(uploadedFiles)\n  return (\n    <PageWrapper>\n      <TitleText>\n        You are about to start uploading{' '}\n        {pluralize(uploadedFiles.length, 'file', 'files')}.\n      </TitleText>\n      <UploadFileList files={fileListData} onRemove={onRemoveFile} />\n      <PasswordField value={password} onChange={onChangePassword} />\n      <div className=\"flex space-x-4\">\n        <CancelButton onClick={onCancel} />\n        <StartButton onClick={onStart} />\n      </div>\n    </PageWrapper>\n  )\n}\n```\n\nYou can see, there’s StartButton, CancelButton and the UploadFileList components, most importantly PasswordField.\n\n#### PasswordField\n\n```plaintext\nimport React, { JSX, useCallback } from 'react'\nimport InputLabel from './InputLabel'\n\nexport default function PasswordField({\n  value,\n  onChange,\n  isRequired = false,\n  isInvalid = false,\n}: {\n  value: string\n  onChange: (v: string) => void\n  isRequired?: boolean\n  isInvalid?: boolean\n}): JSX.Element {\n  const handleChange = useCallback(\n    function (e: React.ChangeEvent<HTMLInputElement>): void {\n      onChange(e.target.value)\n    },\n    [onChange],\n  )\n\n  return (\n    <div className=\"flex flex-col w-full\">\n      <InputLabel\n        hasError={isInvalid}\n        tooltip=\"The downloader must provide this password to start downloading the file. If you don't specify a password here, any downloader with the link to the file will be able to download it. It is not used to encrypt the file, as this is performed by WebRTC's DTLS already.\"\n      >\n        {isRequired ? 'Password' : 'Password (optional)'}\n      </InputLabel>\n      <input\n        autoFocus\n        type=\"password\"\n        className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 ${\n          isInvalid\n            ? 'border-red-500 dark:border-red-400'\n            : 'border-stone-300 dark:border-stone-600'\n        } bg-white dark:bg-stone-800 text-stone-900 dark:text-stone-100`}\n        placeholder=\"Enter a secret password for this slice of FilePizza...\"\n        value={value}\n        onChange={handleChange}\n      />\n    </div>\n  )\n}\n```\n\nThe password entered here is managed in the root component, UploadPage and is passed as a prop to UploadingState component that has WebRTCProvider as shown below\n\n```plaintext\n<WebRTCPeerProvider>\n  <Uploader files={uploadedFiles} password={password} onStop={onStop} />\n</WebRTCPeerProvider>\n```\n\nThis password is passed as a parameter to a function named useUploaderConnections\n\n```plaintext\nexport default function Uploader({\n  files,\n  password,\n  onStop,\n}: {\n  files: UploadedFile[]\n  password: string\n  onStop: () => void\n}): JSX.Element {\n  const { peer, stop } = useWebRTCPeer()\n  const { isLoading, error, longSlug, shortSlug, longURL, shortURL } =\n    useUploaderChannel(peer.id)\n  const connections = useUploaderConnections(peer, files, password)\n```\n\n[useUploaderConnections](https://github.com/kern/filepizza/blob/main/src/hooks/useUploaderConnections.ts#L29) hook seems to large and complicated, I might write more about this in another article.\n\n### About me:\n\nHey, my name is [Ramu Narasinga](https://ramunarasinga.com). I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\n\n***I am open to work on interesting projects. Send me an email at ramu.narasinga@gmail.com***\n\nMy Github — [https://github.com/ramu-narasinga](https://github.com/ramu-narasinga)\n\nMy website — [https://ramunarasinga.com](https://ramunarasinga.com/)\n\nMy Youtube channel — [https://www.youtube.com/@ramu-narasinga](https://www.youtube.com/@ramu-narasinga)\n\nLearning platform — [https://thinkthroo.com](https://thinkthroo.com/)\n\nCodebase Architecture — [https://app.thinkthroo.com/architecture](https://app.thinkthroo.com/architecture)\n\nBest practices — [https://app.thinkthroo.com/best-practices](https://app.thinkthroo.com/best-practices)\n\nProduction-grade projects — [https://app.thinkthroo.com/production-grade-projects](https://app.thinkthroo.com/production-grade-projects)\n\n### References:\n\n1. [https://github.com/kern/filepizza/blob/main/src/app/page.tsx#L55](https://github.com/kern/filepizza/blob/main/src/app/page.tsx#L55)\n    \n2. [https://github.com/kern/filepizza/blob/main/src/app/page.tsx#L146](https://github.com/kern/filepizza/blob/main/src/app/page.tsx#L146)\n    \n3. [https://github.com/kern/filepizza/blob/main/src/hooks/useUploaderConnections.ts#L29](https://github.com/kern/filepizza/blob/main/src/hooks/useUploaderConnections.ts#L29)",
>>>>>>> 442b740f3cf43317109944c6cf4b7ca543a8cddf
    "code": "var Component=(()=>{var o=Object.create;var i=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,N=Object.prototype.hasOwnProperty;var f=(a,n)=>()=>(n||a((n={exports:{}}).exports,n),n.exports),b=(a,n)=>{for(var s in n)i(a,s,{get:n[s],enumerable:!0})},c=(a,n,s,r)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let l of u(n))!N.call(a,l)&&l!==s&&i(a,l,{get:()=>n[l],enumerable:!(r=m(n,l))||r.enumerable});return a};var w=(a,n,s)=>(s=a!=null?o(g(a)):{},c(n||!a||!a.__esModule?i(s,\"default\",{value:a,enumerable:!0}):s,a)),v=a=>c(i({},\"__esModule\",{value:!0}),a);var t=f((y,d)=>{d.exports=_jsx_runtime});var x={};b(x,{default:()=>h,frontmatter:()=>C});var e=w(t()),C={title:\"ConfirmUploadState component in FilePizza codebase.\"};function p(a){let n={a:\"a\",code:\"code\",div:\"div\",em:\"em\",h3:\"h3\",h4:\"h4\",img:\"img\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",...a.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsxs)(n.p,{children:[\"In this article, we will review \",(0,e.jsx)(n.a,{href:\"https://github.com/kern/filepizza/blob/main/src/app/page.tsx#L55\",children:\"ConfirmUploadState component in FilePizza codebase\"}),\".\"]}),`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{src:\"https://cdn-images-1.medium.com/max/1000/1*JFiGdKoihrb0m_913vbxVQ.png\",alt:\"\"})}),`\n`,(0,e.jsx)(n.h3,{id:\"confirmuploadstate\",children:\"ConfirmUploadState\"}),`\n`,(0,e.jsx)(n.p,{children:\"This is the component that you see once you upload a file on FilePizza.\"}),`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{src:\"https://cdn-images-1.medium.com/max/1000/1*Av5zfITiLDQuZmEsi32kcw.png\",alt:\"\"})}),`\n`,(0,e.jsx)(n.p,{children:\"When you look at the code below for ConfirmUploadState component, it makes sense.\"}),`\n`,(0,e.jsx)(n.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,e.jsx)(n.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,e.jsxs)(n.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"function ConfirmUploadState({\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  uploadedFiles,\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  password,\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  onChangePassword,\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  onCancel,\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  onStart,\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  onRemoveFile,\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"}: {\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  uploadedFiles: UploadedFile[]\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  password: string\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  onChangePassword: (pw: string) => void\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  onCancel: () => void\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  onStart: () => void\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  onRemoveFile: (index: number) => void\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"}): JSX.Element {\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  const fileListData = useUploaderFileListData(uploadedFiles)\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  return (\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"    <PageWrapper>\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"      <TitleText>\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"        You are about to start uploading{' '}\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"        {pluralize(uploadedFiles.length, 'file', 'files')}.\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"      </TitleText>\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"      <UploadFileList files={fileListData} onRemove={onRemoveFile} />\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"      <PasswordField value={password} onChange={onChangePassword} />\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:'      <div className=\"flex space-x-4\">'})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"        <CancelButton onClick={onCancel} />\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"        <StartButton onClick={onStart} />\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"      </div>\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"    </PageWrapper>\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  )\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"}\"})})]})})}),`\n`,(0,e.jsx)(n.p,{children:\"You can see, there\\u2019s StartButton, CancelButton and the UploadFileList components, most importantly PasswordField.\"}),`\n`,(0,e.jsx)(n.h4,{id:\"passwordfield\",children:\"PasswordField\"}),`\n`,(0,e.jsx)(n.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,e.jsx)(n.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,e.jsxs)(n.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"import React, { JSX, useCallback } from 'react'\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"import InputLabel from './InputLabel'\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"export default function PasswordField({\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  value,\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  onChange,\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  isRequired = false,\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  isInvalid = false,\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"}: {\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  value: string\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  onChange: (v: string) => void\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  isRequired?: boolean\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  isInvalid?: boolean\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"}): JSX.Element {\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  const handleChange = useCallback(\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"    function (e: React.ChangeEvent<HTMLInputElement>): void {\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"      onChange(e.target.value)\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"    },\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"    [onChange],\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  )\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  return (\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:'    <div className=\"flex flex-col w-full\">'})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"      <InputLabel\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"        hasError={isInvalid}\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:`        tooltip=\"The downloader must provide this password to start downloading the file. If you don't specify a password here, any downloader with the link to the file will be able to download it. It is not used to encrypt the file, as this is performed by WebRTC's DTLS already.\"`})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"      >\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"        {isRequired ? 'Password' : 'Password (optional)'}\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"      </InputLabel>\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"      <input\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"        autoFocus\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:'        type=\"password\"'})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"        className={`w-full px-3 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:focus:ring-blue-400 ${\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"          isInvalid\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"            ? 'border-red-500 dark:border-red-400'\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"            : 'border-stone-300 dark:border-stone-600'\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"        } bg-white dark:bg-stone-800 text-stone-900 dark:text-stone-100`}\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:'        placeholder=\"Enter a secret password for this slice of FilePizza...\"'})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"        value={value}\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"        onChange={handleChange}\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"      />\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"    </div>\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  )\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"}\"})})]})})}),`\n`,(0,e.jsx)(n.p,{children:\"The password entered here is managed in the root component, UploadPage and is passed as a prop to UploadingState component that has WebRTCProvider as shown below\"}),`\n`,(0,e.jsx)(n.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,e.jsx)(n.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,e.jsxs)(n.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"<WebRTCPeerProvider>\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  <Uploader files={uploadedFiles} password={password} onStop={onStop} />\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"</WebRTCPeerProvider>\"})})]})})}),`\n`,(0,e.jsx)(n.p,{children:\"This password is passed as a parameter to a function named useUploaderConnections\"}),`\n`,(0,e.jsx)(n.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,e.jsx)(n.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,e.jsxs)(n.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"export default function Uploader({\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  files,\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  password,\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  onStop,\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"}: {\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  files: UploadedFile[]\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  password: string\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  onStop: () => void\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"}): JSX.Element {\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  const { peer, stop } = useWebRTCPeer()\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  const { isLoading, error, longSlug, shortSlug, longURL, shortURL } =\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"    useUploaderChannel(peer.id)\"})}),`\n`,(0,e.jsx)(n.span,{className:\"line\",children:(0,e.jsx)(n.span,{children:\"  const connections = useUploaderConnections(peer, files, password)\"})})]})})}),`\n`,(0,e.jsxs)(n.p,{children:[(0,e.jsx)(n.a,{href:\"https://github.com/kern/filepizza/blob/main/src/hooks/useUploaderConnections.ts#L29\",children:\"useUploaderConnections\"}),\" hook seems to large and complicated, I might write more about this in another article.\"]}),`\n`,(0,e.jsx)(n.h3,{id:\"about-me\",children:\"About me:\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Hey, my name is \",(0,e.jsx)(n.a,{href:\"https://ramunarasinga.com\",children:\"Ramu Narasinga\"}),\". I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\"]}),`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.em,{children:(0,e.jsxs)(n.strong,{children:[\"I am open to work on interesting projects. Send me an email at \",(0,e.jsx)(n.a,{href:\"mailto:ramu.narasinga@gmail.com\",children:\"ramu.narasinga@gmail.com\"})]})})}),`\n`,(0,e.jsxs)(n.p,{children:[\"My Github\\u200A\\u2014\\u200A\",(0,e.jsx)(n.a,{href:\"https://github.com/ramu-narasinga\",children:\"https://github.com/ramu-narasinga\"})]}),`\n`,(0,e.jsxs)(n.p,{children:[\"My website\\u200A\\u2014\\u200A\",(0,e.jsx)(n.a,{href:\"https://ramunarasinga.com/\",children:\"https://ramunarasinga.com\"})]}),`\n`,(0,e.jsxs)(n.p,{children:[\"My Youtube channel\\u200A\\u2014\\u200A\",(0,e.jsx)(n.a,{href:\"https://www.youtube.com/@ramu-narasinga\",children:\"https://www.youtube.com/@ramu-narasinga\"})]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Learning platform\\u200A\\u2014\\u200A\",(0,e.jsx)(n.a,{href:\"https://thinkthroo.com/\",children:\"https://thinkthroo.com\"})]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Codebase Architecture\\u200A\\u2014\\u200A\",(0,e.jsx)(n.a,{href:\"https://app.thinkthroo.com/architecture\",children:\"https://app.thinkthroo.com/architecture\"})]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Best practices\\u200A\\u2014\\u200A\",(0,e.jsx)(n.a,{href:\"https://app.thinkthroo.com/best-practices\",children:\"https://app.thinkthroo.com/best-practices\"})]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Production-grade projects\\u200A\\u2014\\u200A\",(0,e.jsx)(n.a,{href:\"https://app.thinkthroo.com/production-grade-projects\",children:\"https://app.thinkthroo.com/production-grade-projects\"})]}),`\n`,(0,e.jsx)(n.h3,{id:\"references\",children:\"References:\"}),`\n`,(0,e.jsxs)(n.ol,{children:[`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.a,{href:\"https://github.com/kern/filepizza/blob/main/src/app/page.tsx#L55\",children:\"https://github.com/kern/filepizza/blob/main/src/app/page.tsx#L55\"})}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.a,{href:\"https://github.com/kern/filepizza/blob/main/src/app/page.tsx#L146\",children:\"https://github.com/kern/filepizza/blob/main/src/app/page.tsx#L146\"})}),`\n`]}),`\n`,(0,e.jsxs)(n.li,{children:[`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.a,{href:\"https://github.com/kern/filepizza/blob/main/src/hooks/useUploaderConnections.ts#L29\",children:\"https://github.com/kern/filepizza/blob/main/src/hooks/useUploaderConnections.ts#L29\"})}),`\n`]}),`\n`]})]})}function h(a={}){let{wrapper:n}=a.components||{};return n?(0,e.jsx)(n,{...a,children:(0,e.jsx)(p,{...a})}):p(a)}return v(x);})();\n;return Component;"
  },
  "_id": "blog/ConfirmUploadState-component.mdx",
  "_raw": {
    "sourceFilePath": "blog/ConfirmUploadState-component.mdx",
    "sourceFileName": "ConfirmUploadState-component.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/ConfirmUploadState-component"
  },
  "type": "Doc",
  "slug": "/blog/ConfirmUploadState-component",
  "slugAsParams": "ConfirmUploadState-component"
}
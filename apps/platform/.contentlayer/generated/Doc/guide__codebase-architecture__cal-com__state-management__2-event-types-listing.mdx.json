{
  "title": "state-management in cal.com\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\n[State management in Event types listing]\r\n\r\nIn this guide, we will review the state management mechanism in Event Types listing page. For better \r\nunderstanding, this guide has been structure this way:\r\n\r\n1. Locating the event-types page\r\n2. Error status handling\r\n3. Pending status handling\r\n4. Success status handling\r\n\r\n[Insert screenshot of https://app.cal.com/event-types]\r\n\r\n# Locating the event-types page\r\n\r\nYou will find the [events-types folder](https://github.com/calcom/cal.com/blob/main/apps/web/app/event-types/page.tsx)\r\nin app folder. event-types/page.tsx has the below code:\r\n\r\n```\r\nimport { withAppDirSsr } from \"app/WithAppDirSsr\";\r\nimport { _generateMetadata } from \"app/_utils\";\r\nimport { WithLayout } from \"app/layoutHOC\";\r\n\r\nimport { getServerSideProps } from \"@lib/event-types/getServerSideProps\";\r\n\r\nimport EventTypes from \"~/event-types/views/event-types-listing-view\";\r\n\r\nexport const generateMetadata = async () =>\r\n  await _generateMetadata(\r\n    (t) => t(\"event_types_page_title\"),\r\n    (t) => t(\"event_types_page_subtitle\")\r\n  );\r\n\r\nconst getData = withAppDirSsr(getServerSideProps);\r\n\r\nexport default WithLayout({ getLayout: null, getData, Page: EventTypes })<\"P\">;\r\n```\r\n \r\nThe most important import here is the EventTypes imported from `~/event-types/views/event-types-listing-view`\r\n\"~\"(tilda) is not helping us much in telling us where to look for this file, in this case, you should look\r\nat tsconfig.json to understand the default imports set.\r\n\r\nIn [web/tsconfig.json](https://github.com/calcom/cal.com/blob/main/apps/web/tsconfig.json#L6), you will find\r\nthe below configuration for default imports:\r\n\r\n```\r\n{\r\n  \"extends\": \"@calcom/tsconfig/nextjs.json\",\r\n  \"compilerOptions\": {\r\n    \"baseUrl\": \".\",\r\n    \"paths\": {\r\n      \"~/*\": [\"modules/*\"],\r\n      \"@components/*\": [\"components/*\"],\r\n```\r\n\r\n~ is an alias for modules folder, so the import translates to `modules/event-types/views/event-types-listing-view`\r\n[event-types-listing-view.tsx](https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L886)\r\nrenders the event types listing page. This is where we should look closely to understand how the state is \r\nmanaged in this component.\r\n\r\n[Insert screenshot of https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L886]\r\n\r\n# Error status handling\r\n\r\nIn the [EventsTypePage component](https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L945), \r\nthere was no specific code handling error status.\r\n\r\n```\r\nconst EventTypesPage: React.FC = () => {\r\n  \r\n  ...\r\n\r\n  // TODO: Maybe useSuspenseQuery to focus on success case only? Remember that it would crash the page when there is an error in query. Also, it won't support skeleton\r\n  const {\r\n    data: getUserEventGroupsData,\r\n    status: getUserEventGroupsStatus,\r\n    error: getUserEventGroupsStatusError,\r\n  } = trpc.viewer.eventTypes.getUserEventGroups.useQuery(filters && { filters }, {\r\n    refetchOnWindowFocus: false,\r\n    gcTime: 1 * 60 * 60 * 1000,\r\n    staleTime: 1 * 60 * 60 * 1000,\r\n  });\r\n\r\n  ...\r\n\r\n  return (\r\n    <Shell\r\n      ...\r\n      <InfiniteScrollMain\r\n        profiles={getUserEventGroupsData?.profiles}\r\n        eventTypeGroups={getUserEventGroupsData?.eventTypeGroups}\r\n        status={getUserEventGroupsStatus}\r\n        errorMessage={getUserEventGroupsStatusError?.message}\r\n      />\r\n    </Shell>\r\n  );\r\n};\r\n```\r\n\r\nInstead in [InfiniteScrollMain component](https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L886),\r\nyou have the error status handler as shown below:\r\n\r\n```\r\nconst InfiniteScrollMain = ({\r\n  status,\r\n  errorMessage,\r\n  eventTypeGroups,\r\n  profiles,\r\n}: {\r\n  status: string;\r\n  errorMessage?: string;\r\n  eventTypeGroups: GetUserEventGroupsResponse[\"eventTypeGroups\"] | undefined;\r\n  profiles: GetUserEventGroupsResponse[\"profiles\"] | undefined;\r\n}) => {\r\n  ...\r\n   if (status === \"error\") {\r\n    return <Alert severity=\"error\" title=\"Something went wrong\" message={errorMessage} />;\r\n   }\r\n  ...\r\n}\r\n```\r\n\r\n# Pending status handling\r\n\r\nJust below the error status handler, you will find the pending status related code:\r\n\r\n```\r\nif (!eventTypeGroups || !profiles || status === \"pending\") {\r\n    return <InfiniteSkeletonLoader />;\r\n}\r\n```\r\n\r\nWhat this means is, when the status is pending, `InfiniteSkeletonLoader` is displayed.\r\n\r\n# Success status handling\r\n\r\nDepending on `eventTypeGroups` length, either `CreateFirstEventTypeView` (length = 0) or \r\n`InfiniteTeamsTab` (length >= 1) gets displayed.\r\n\r\n```\r\n{eventTypeGroups.length >= 1 && (\r\n  <>\r\n    <HorizontalTabs tabs={tabs} />\r\n    <InfiniteTeamsTab activeEventTypeGroup={activeEventTypeGroup[0]} />\r\n  </>\r\n)}\r\n{eventTypeGroups.length === 0 && <CreateFirstEventTypeView slug={profiles[0].slug ?? \"\"} />}\r\n```\r\n\r\n\r\n\r\nReferences:\r\n1. https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L886\r\n2. https://github.com/calcom/cal.com/blob/main/apps/web/app/event-types/page.tsx\r\n",
    "code": "var Component=(()=>{var d=Object.create;var i=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var y=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var r in e)i(t,r,{get:e[r],enumerable:!0})},a=(t,e,r,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of g(e))!v.call(t,s)&&s!==r&&i(t,s,{get:()=>e[s],enumerable:!(o=u(e,s))||o.enumerable});return t};var w=(t,e,r)=>(r=t!=null?d(m(t)):{},a(e||!t||!t.__esModule?i(r,\"default\",{value:t,enumerable:!0}):r,t)),b=t=>a(i({},\"__esModule\",{value:!0}),t);var p=y((S,l)=>{l.exports=_jsx_runtime});var x={};f(x,{default:()=>h,frontmatter:()=>T});var n=w(p()),T={title:\"state-management in cal.com\"};function c(t){let e={a:\"a\",code:\"code\",h1:\"h1\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",...t.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"[State management in Event types listing]\"}),`\n`,(0,n.jsx)(e.p,{children:`In this guide, we will review the state management mechanism in Event Types listing page. For better\\r\nunderstanding, this guide has been structure this way:`}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Locating the event-types page\"}),`\n`,(0,n.jsx)(e.li,{children:\"Error status handling\"}),`\n`,(0,n.jsx)(e.li,{children:\"Pending status handling\"}),`\n`,(0,n.jsx)(e.li,{children:\"Success status handling\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert screenshot of \",(0,n.jsx)(e.a,{href:\"https://app.cal.com/event-types\",children:\"https://app.cal.com/event-types\"}),\"]\"]}),`\n`,(0,n.jsx)(e.h1,{id:\"locating-the-event-types-page\",children:\"Locating the event-types page\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"You will find the \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/app/event-types/page.tsx\",children:\"events-types folder\"}),`\\r\nin app folder. event-types/page.tsx has the below code:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`import { withAppDirSsr } from \"app/WithAppDirSsr\";\\r\nimport { _generateMetadata } from \"app/_utils\";\\r\nimport { WithLayout } from \"app/layoutHOC\";\\r\n\\r\nimport { getServerSideProps } from \"@lib/event-types/getServerSideProps\";\\r\n\\r\nimport EventTypes from \"~/event-types/views/event-types-listing-view\";\\r\n\\r\nexport const generateMetadata = async () =>\\r\n  await _generateMetadata(\\r\n    (t) => t(\"event_types_page_title\"),\\r\n    (t) => t(\"event_types_page_subtitle\")\\r\n  );\\r\n\\r\nconst getData = withAppDirSsr(getServerSideProps);\\r\n\\r\nexport default WithLayout({ getLayout: null, getData, Page: EventTypes })<\"P\">;\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The most important import here is the EventTypes imported from \",(0,n.jsx)(e.code,{children:\"~/event-types/views/event-types-listing-view\"}),`\\r\n\"~\"(tilda) is not helping us much in telling us where to look for this file, in this case, you should look\\r\nat tsconfig.json to understand the default imports set.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/tsconfig.json#L6\",children:\"web/tsconfig.json\"}),`, you will find\\r\nthe below configuration for default imports:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`{\\r\n  \"extends\": \"@calcom/tsconfig/nextjs.json\",\\r\n  \"compilerOptions\": {\\r\n    \"baseUrl\": \".\",\\r\n    \"paths\": {\\r\n      \"~/*\": [\"modules/*\"],\\r\n      \"@components/*\": [\"components/*\"],\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"~ is an alias for modules folder, so the import translates to \",(0,n.jsx)(e.code,{children:\"modules/event-types/views/event-types-listing-view\"}),`\\r\n`,(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L886\",children:\"event-types-listing-view.tsx\"}),`\\r\nrenders the event types listing page. This is where we should look closely to understand how the state is\\r\nmanaged in this component.`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"[Insert screenshot of \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L886\",children:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L886\"}),\"]\"]}),`\n`,(0,n.jsx)(e.h1,{id:\"error-status-handling\",children:\"Error status handling\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In the \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L945\",children:\"EventsTypePage component\"}),`,\\r\nthere was no specific code handling error status.`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const EventTypesPage: React.FC = () => {\\r\n  \\r\n  ...\\r\n\\r\n  // TODO: Maybe useSuspenseQuery to focus on success case only? Remember that it would crash the page when there is an error in query. Also, it won't support skeleton\\r\n  const {\\r\n    data: getUserEventGroupsData,\\r\n    status: getUserEventGroupsStatus,\\r\n    error: getUserEventGroupsStatusError,\\r\n  } = trpc.viewer.eventTypes.getUserEventGroups.useQuery(filters && { filters }, {\\r\n    refetchOnWindowFocus: false,\\r\n    gcTime: 1 * 60 * 60 * 1000,\\r\n    staleTime: 1 * 60 * 60 * 1000,\\r\n  });\\r\n\\r\n  ...\\r\n\\r\n  return (\\r\n    <Shell\\r\n      ...\\r\n      <InfiniteScrollMain\\r\n        profiles={getUserEventGroupsData?.profiles}\\r\n        eventTypeGroups={getUserEventGroupsData?.eventTypeGroups}\\r\n        status={getUserEventGroupsStatus}\\r\n        errorMessage={getUserEventGroupsStatusError?.message}\\r\n      />\\r\n    </Shell>\\r\n  );\\r\n};\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Instead in \",(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L886\",children:\"InfiniteScrollMain component\"}),`,\\r\nyou have the error status handler as shown below:`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`const InfiniteScrollMain = ({\\r\n  status,\\r\n  errorMessage,\\r\n  eventTypeGroups,\\r\n  profiles,\\r\n}: {\\r\n  status: string;\\r\n  errorMessage?: string;\\r\n  eventTypeGroups: GetUserEventGroupsResponse[\"eventTypeGroups\"] | undefined;\\r\n  profiles: GetUserEventGroupsResponse[\"profiles\"] | undefined;\\r\n}) => {\\r\n  ...\\r\n   if (status === \"error\") {\\r\n    return <Alert severity=\"error\" title=\"Something went wrong\" message={errorMessage} />;\\r\n   }\\r\n  ...\\r\n}\n`})}),`\n`,(0,n.jsx)(e.h1,{id:\"pending-status-handling\",children:\"Pending status handling\"}),`\n`,(0,n.jsx)(e.p,{children:\"Just below the error status handler, you will find the pending status related code:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`if (!eventTypeGroups || !profiles || status === \"pending\") {\\r\n    return <InfiniteSkeletonLoader />;\\r\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"What this means is, when the status is pending, \",(0,n.jsx)(e.code,{children:\"InfiniteSkeletonLoader\"}),\" is displayed.\"]}),`\n`,(0,n.jsx)(e.h1,{id:\"success-status-handling\",children:\"Success status handling\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Depending on \",(0,n.jsx)(e.code,{children:\"eventTypeGroups\"}),\" length, either \",(0,n.jsx)(e.code,{children:\"CreateFirstEventTypeView\"}),` (length = 0) or\\r\n`,(0,n.jsx)(e.code,{children:\"InfiniteTeamsTab\"}),\" (length >= 1) gets displayed.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`{eventTypeGroups.length >= 1 && (\\r\n  <>\\r\n    <HorizontalTabs tabs={tabs} />\\r\n    <InfiniteTeamsTab activeEventTypeGroup={activeEventTypeGroup[0]} />\\r\n  </>\\r\n)}\\r\n{eventTypeGroups.length === 0 && <CreateFirstEventTypeView slug={profiles[0].slug ?? \"\"} />}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"References:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L886\",children:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/event-types/views/event-types-listing-view.tsx#L886\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/app/event-types/page.tsx\",children:\"https://github.com/calcom/cal.com/blob/main/apps/web/app/event-types/page.tsx\"})}),`\n`]})]})}function h(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,{...t,children:(0,n.jsx)(c,{...t})}):c(t)}return b(x);})();\n;return Component;"
  },
  "_id": "guide/codebase-architecture/cal-com/state-management/2-event-types-listing.mdx",
  "_raw": {
    "sourceFilePath": "guide/codebase-architecture/cal-com/state-management/2-event-types-listing.mdx",
    "sourceFileName": "2-event-types-listing.mdx",
    "sourceFileDir": "guide/codebase-architecture/cal-com/state-management",
    "contentType": "mdx",
    "flattenedPath": "guide/codebase-architecture/cal-com/state-management/2-event-types-listing"
  },
  "type": "Doc",
  "slug": "/guide/codebase-architecture/cal-com/state-management/2-event-types-listing",
  "slugAsParams": "codebase-architecture/cal-com/state-management/2-event-types-listing"
}
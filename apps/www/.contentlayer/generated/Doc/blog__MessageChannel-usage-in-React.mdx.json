{
  "title": "MessageChannel usage in React source code\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\nIn this article, we analyze the [MessageChannel usage in React source code](https://github.com/facebook/react/blob/5d19e1c8d1a6c0b5cd7532d43b707191eaf105b7/packages/shared/enqueueTask.js#L42).\r\n\r\n![](https://miro.medium.com/v2/resize:fit:875/1*xGkPWAcPPeTFBI0C7PJ33A.png)\r\n\r\nLet’s first understand what a MessageChannel is.\r\n\r\n# **MessageChannel**\r\n\r\nThe MessageChannel interface of the Channel Messaging API allows us to create a new message channel and send data through it via its two MessagePort properties.\r\n\r\n## **Example**\r\n\r\nThis following example is picked from [MDN docs](https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel), you can see a new channel being created using the MessageChannel() constructor.\r\n\r\nWhen the IFrame has loaded, we register an onmessage handler for MessageChannel.port1 and transfer MessageChannel.port2 to the IFrame using the window.postMessage method along with a message.\r\n\r\nWhen a message is received back from the IFrame, the onMessage function outputs the message to a paragraph.\r\n\r\n```plaintext\r\nconst channel = new MessageChannel();\r\nconst output = document.querySelector(\".output\");\r\nconst iframe = document.querySelector(\"iframe\");\r\n// Wait for the iframe to load\r\niframe.addEventListener(\"load\", onLoad);\r\nfunction onLoad() {\r\n  // Listen for messages on port1\r\n  channel.port1.onmessage = onMessage;\r\n  // Transfer port2 to the iframe\r\n  iframe.contentWindow.postMessage(\"Hello from the main page!\", \"*\", [\r\n   channel.port2,\r\n  ]);\r\n}\r\n// Handle messages received on port1\r\nfunction onMessage(e) {\r\n output.innerHTML = e.data;\r\n}\r\n```\r\n\r\nOkay, now that we understand the basics of MessageChannel, let’s learn its usage in React source code.\r\n\r\n# **MessageChannel usage in React source code:**\r\n\r\n```plaintext\r\nconst channel = new MessageChannel();\r\nchannel.port1.onmessage = callback;\r\nchannel.port2.postMessage(undefined);\r\n```\r\n\r\nHere’s how React uses it:\r\n\r\n* Create a new MessageChannel instance: React creates a new MessageChannel with two communication ports.\r\n    \r\n* Schedule a task using postMessage: React uses port2.postMessage(undefined) to trigger a task asynchronously without the delays or interferences that might occur with setTimeout or setImmediate.\r\n    \r\n* Execute the task when onmessage is triggered: The task (which is the callback passed to enqueueTask) is executed when port1.onmessage receives the posted message.\r\n    \r\n\r\nWhy not use setTimeout or setImmediate? React code hints that they want to avoid using setTimeout or setImmediate in browser environments because they are not always precise and can be affected by throttling, testing environments, or other optimizations (such as faked timers in test environments). React wants fine control over scheduling, especially when it comes to asynchronous rendering and updates.\r\n\r\n![](https://miro.medium.com/v2/resize:fit:875/1*eJ5Kp1_67hIMjbNVuh08vg.png)\r\n\r\n# **About me:**\r\n\r\nHey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\r\n\r\nI am open to work on interesting projects. Send me an email at ramu.narasinga@gmail.com\r\n\r\nMy Github — [https://github.com/ramu-narasinga](https://github.com/ramu-narasinga)\r\n\r\nMy website — [https://ramunarasinga.com](https://ramunarasinga.com/)\r\n\r\nMy Youtube channel — [https://www.youtube.com/@thinkthroo](https://www.youtube.com/@thinkthroo)\r\n\r\nLearning platform — [https://thinkthroo.com](https://thinkthroo.com/)\r\n\r\nCodebase Architecture — [https://app.thinkthroo.com/architecture](https://app.thinkthroo.com/architecture)\r\n\r\nBest practices — [https://app.thinkthroo.com/best-practices](https://app.thinkthroo.com/best-practices)\r\n\r\nProduction-grade projects — [https://app.thinkthroo.com/production-grade-projects](https://app.thinkthroo.com/production-grade-projects)\r\n\r\n# **References:**\r\n\r\n* [https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel](https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel)\r\n    \r\n* [https://github.com/facebook/react/blob/5d19e1c8d1a6c0b5cd7532d43b707191eaf105b7/packages/shared/enqueueTask.js#L42](https://github.com/facebook/react/blob/5d19e1c8d1a6c0b5cd7532d43b707191eaf105b7/packages/shared/enqueueTask.js#L42)\r\n",
    "code": "var Component=(()=>{var p=Object.create;var r=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var b=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),w=(a,e)=>{for(var s in e)r(a,s,{get:e[s],enumerable:!0})},c=(a,e,s,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of g(e))!f.call(a,t)&&t!==s&&r(a,t,{get:()=>e[t],enumerable:!(i=m(e,t))||i.enumerable});return a};var M=(a,e,s)=>(s=a!=null?p(u(a)):{},c(e||!a||!a.__esModule?r(s,\"default\",{value:a,enumerable:!0}):s,a)),k=a=>c(r({},\"__esModule\",{value:!0}),a);var o=b((v,h)=>{h.exports=_jsx_runtime});var C={};w(C,{default:()=>d,frontmatter:()=>y});var n=M(o()),y={title:\"MessageChannel usage in React source code\"};function l(a){let e={a:\"a\",code:\"code\",div:\"div\",h1:\"h1\",h2:\"h2\",img:\"img\",li:\"li\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",ul:\"ul\",...a.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"In this article, we analyze the \",(0,n.jsx)(e.a,{href:\"https://github.com/facebook/react/blob/5d19e1c8d1a6c0b5cd7532d43b707191eaf105b7/packages/shared/enqueueTask.js#L42\",children:\"MessageChannel usage in React source code\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:875/1*xGkPWAcPPeTFBI0C7PJ33A.png\",alt:\"\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Let\\u2019s first understand what a MessageChannel is.\"}),`\n`,(0,n.jsx)(e.h1,{id:\"messagechannel\",children:(0,n.jsx)(e.strong,{children:\"MessageChannel\"})}),`\n`,(0,n.jsx)(e.p,{children:\"The MessageChannel interface of the Channel Messaging API allows us to create a new message channel and send data through it via its two MessagePort properties.\"}),`\n`,(0,n.jsx)(e.h2,{id:\"example\",children:(0,n.jsx)(e.strong,{children:\"Example\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This following example is picked from \",(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel\",children:\"MDN docs\"}),\", you can see a new channel being created using the MessageChannel() constructor.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"When the IFrame has loaded, we register an onmessage handler for MessageChannel.port1 and transfer MessageChannel.port2 to the IFrame using the window.postMessage method along with a message.\"}),`\n`,(0,n.jsx)(e.p,{children:\"When a message is received back from the IFrame, the onMessage function outputs the message to a paragraph.\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const channel = new MessageChannel();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:'const output = document.querySelector(\".output\");'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:'const iframe = document.querySelector(\"iframe\");'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"// Wait for the iframe to load\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:'iframe.addEventListener(\"load\", onLoad);'})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"function onLoad() {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  // Listen for messages on port1\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  channel.port1.onmessage = onMessage;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  // Transfer port2 to the iframe\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:'  iframe.contentWindow.postMessage(\"Hello from the main page!\", \"*\", ['})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"   channel.port2,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"  ]);\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"// Handle messages received on port1\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"function onMessage(e) {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" output.innerHTML = e.data;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"Okay, now that we understand the basics of MessageChannel, let\\u2019s learn its usage in React source code.\"}),`\n`,(0,n.jsx)(e.h1,{id:\"messagechannel-usage-in-react-source-code\",children:(0,n.jsx)(e.strong,{children:\"MessageChannel usage in React source code:\"})}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"const channel = new MessageChannel();\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"channel.port1.onmessage = callback;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"channel.port2.postMessage(undefined);\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"Here\\u2019s how React uses it:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Create a new MessageChannel instance: React creates a new MessageChannel with two communication ports.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Schedule a task using postMessage: React uses port2.postMessage(undefined) to trigger a task asynchronously without the delays or interferences that might occur with setTimeout or setImmediate.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Execute the task when onmessage is triggered: The task (which is the callback passed to enqueueTask) is executed when port1.onmessage receives the posted message.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Why not use setTimeout or setImmediate? React code hints that they want to avoid using setTimeout or setImmediate in browser environments because they are not always precise and can be affected by throttling, testing environments, or other optimizations (such as faked timers in test environments). React wants fine control over scheduling, especially when it comes to asynchronous rendering and updates.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://miro.medium.com/v2/resize:fit:875/1*eJ5Kp1_67hIMjbNVuh08vg.png\",alt:\"\"})}),`\n`,(0,n.jsx)(e.h1,{id:\"about-me\",children:(0,n.jsx)(e.strong,{children:\"About me:\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Hey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"I am open to work on interesting projects. Send me an email at \",(0,n.jsx)(e.a,{href:\"mailto:ramu.narasinga@gmail.com\",children:\"ramu.narasinga@gmail.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Github \\u2014 \",(0,n.jsx)(e.a,{href:\"https://github.com/ramu-narasinga\",children:\"https://github.com/ramu-narasinga\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My website \\u2014 \",(0,n.jsx)(e.a,{href:\"https://ramunarasinga.com/\",children:\"https://ramunarasinga.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Youtube channel \\u2014 \",(0,n.jsx)(e.a,{href:\"https://www.youtube.com/@thinkthroo\",children:\"https://www.youtube.com/@thinkthroo\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Learning platform \\u2014 \",(0,n.jsx)(e.a,{href:\"https://thinkthroo.com/\",children:\"https://thinkthroo.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Codebase Architecture \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/architecture\",children:\"https://app.thinkthroo.com/architecture\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Best practices \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/best-practices\",children:\"https://app.thinkthroo.com/best-practices\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Production-grade projects \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/production-grade-projects\",children:\"https://app.thinkthroo.com/production-grade-projects\"})]}),`\n`,(0,n.jsx)(e.h1,{id:\"references\",children:(0,n.jsx)(e.strong,{children:\"References:\"})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel\",children:\"https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/facebook/react/blob/5d19e1c8d1a6c0b5cd7532d43b707191eaf105b7/packages/shared/enqueueTask.js#L42\",children:\"https://github.com/facebook/react/blob/5d19e1c8d1a6c0b5cd7532d43b707191eaf105b7/packages/shared/enqueueTask.js#L42\"})}),`\n`]}),`\n`]})]})}function d(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,{...a,children:(0,n.jsx)(l,{...a})}):l(a)}return k(C);})();\n;return Component;"
  },
  "_id": "blog/MessageChannel-usage-in-React.mdx",
  "_raw": {
    "sourceFilePath": "blog/MessageChannel-usage-in-React.mdx",
    "sourceFileName": "MessageChannel-usage-in-React.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/MessageChannel-usage-in-React"
  },
  "type": "Doc",
  "slug": "/blog/MessageChannel-usage-in-React",
  "slugAsParams": "MessageChannel-usage-in-React"
}
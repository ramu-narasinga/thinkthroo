{
  "title": "Error Handling in Cal.com\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\n[Alert component] is used to show errors:\r\n\r\nIn this guide, we analyze how errors are handled in a component in \r\n[cal.com](https://github.com/calcom/cal.com/blob/main/apps/web/pages/bookings/%5Bstatus%5D.tsx).\r\n\r\nHow to find out what error handling mechanisms are used in cal.com codebase? Pick a page on cal.com and\r\nfind the page route in its [source code](link-to-code)\r\n\r\nIn this guide, we choose the \r\n[bookings listing component](https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx).\r\n\r\n[Insert screenshots of bookings page]\r\n\r\nBookings component depends purely on the `query` result to decide what to render based on `query.status`.\r\n\r\n```\r\n// picked from https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L82C3-L95C5\r\nconst query = trpc.viewer.bookings.get.useInfiniteQuery(\r\n    {\r\n      limit: 10,\r\n      filters: {\r\n        ...filterQuery,\r\n        status: filterQuery.status ?? status,\r\n      },\r\n    },\r\n    {\r\n      // first render has status `undefined`\r\n      enabled: true,\r\n      getNextPageParam: (lastPage) => lastPage.nextCursor,\r\n    }\r\n  );\r\n``` \r\n\r\nIn this guide, our focus is only on how errors are handled in a component. So, if there's an error encountered,\r\nquery.status would be \"error\".\r\n\r\n```\r\n{\r\n    query.status === \"error\" && \r\n    (\r\n      <Alert severity=\"error\" title={t(\"something_went_wrong\")} message={query.error.message} />\r\n    )\r\n}\r\n```\r\n\r\n[Alert](https://github.com/calcom/cal.com/blob/main/packages/ui/components/alert/Alert.tsx) is imported from\r\n`packages/ui/components/alert/Alert.tsx`\r\n\r\nReferences:\r\n1. https://github.com/calcom/cal.com/blob/main/apps/web/pages/bookings/%5Bstatus%5D.tsx\r\n2. https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L165\r\n3. https://github.com/calcom/cal.com/blob/main/packages/ui/components/alert/Alert.tsx\r\n// In auth/login error handling:\r\n4. https://github.com/calcom/cal.com/blob/main/apps/web/modules/auth/login-view.tsx#L232C1-L233C80\r\n\r\n[Error tracking]:\r\nCal.com uses Sentry to track production errors. The below code snippet is from [cal.com/apps/web/intrumentation.ts](https://github.com/calcom/cal.com/blob/main/apps/web/instrumentation.ts)\r\n\r\n```\r\nimport * as Sentry from \"@sentry/nextjs\";\r\n\r\nexport function register() {\r\n  if (process.env.NEXT_RUNTIME === \"nodejs\") {\r\n    Sentry.init({\r\n      dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,\r\n    });\r\n  }\r\n\r\n  if (process.env.NEXT_RUNTIME === \"edge\") {\r\n    Sentry.init({\r\n      dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,\r\n    });\r\n  }\r\n}\r\n```\r\nRead this [official Sentry docs](https://docs.sentry.io/platforms/javascript/guides/nextjs/) that explains how to setup Sentry in a Next.js project.\r\n\r\nThis intrumentation file above is automatically generated as part of Sentry setup. \r\n`dsn`:\r\nThe DSN tells the SDK where to send the events. If this value is not provided, the SDK will try to read it from the SENTRY_DSN environment variable. If that variable also does not exist, the SDK will just not send any events.\r\n\r\nIn runtimes without a process environment (such as the browser) that fallback does not apply.\r\n\r\nLearn more about DSN utilization.\r\n  \r\nReferences:\r\n1. https://github.com/calcom/cal.com/blob/main/apps/web/instrumentation.ts\r\n2. https://github.com/calcom/cal.com/blob/main/apps/web/sentry.client.config.ts \r\n3. https://docs.sentry.io/platforms/javascript/guides/nextjs/\r\n\r\n[Error Boundary]\r\n\r\nBy default, if your application throws an error during rendering, React will remove its UI \r\nfrom the screen. To prevent this, you can wrap a part of your UI into an error boundary. \r\nAn error boundary is a special component that lets you display some fallback UI instead of \r\nthe part that crashedâ€”for example, an error message.\r\n\r\nReact docs explains [how to write your own boundary](https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary)\r\n\r\n```\r\nclass ErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    // Update state so the next render will show the fallback UI.\r\n    return { hasError: true };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    // Example \"componentStack\":\r\n    //   in ComponentThatThrows (created by App)\r\n    //   in ErrorBoundary (created by App)\r\n    //   in div (created by App)\r\n    //   in App\r\n    logErrorToMyService(error, info.componentStack);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // You can render any custom fallback UI\r\n      return this.props.fallback;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n```\r\n\r\nYou can write your own ErrorBoundary or use [react-error-boundary](https://github.com/bvaughn/react-error-boundary/tree/master), recommended by React.\r\n\r\nGuess the kind of [ErrorBoundary used in cal.com](https://github.com/calcom/cal.com/blob/5bbccad41d625250ac03a6683e751b8ed6650721/packages/ui/components/errorBoundary/ErrorBoundary.tsx#L4)?\r\n\r\n```\r\nimport type { ErrorInfo } from \"react\";\r\nimport React from \"react\";\r\n\r\nclass ErrorBoundary extends React.Component<\r\n  { children: React.ReactNode; message?: string },\r\n  { error: Error | null; errorInfo: ErrorInfo | null }\r\n> {\r\n  constructor(props: { children: React.ReactNode } | Readonly<{ children: React.ReactNode }>) {\r\n    super(props);\r\n    this.state = { error: null, errorInfo: null };\r\n  }\r\n\r\n  componentDidCatch?(error: Error, errorInfo: ErrorInfo) {\r\n    // Catch errors in any components below and re-render with error message\r\n    this.setState({ error, errorInfo });\r\n    // You can also log error messages to an error reporting service here\r\n  }\r\n\r\n  render() {\r\n    // do not intercept next-not-found error, allow displaying not-found.tsx page when notFound() is thrown on server side\r\n    if (\r\n      this.state.error !== null &&\r\n      \"digest\" in this.state.error &&\r\n      this.state.error.digest === \"NEXT_NOT_FOUND\"\r\n    ) {\r\n      return this.props.children;\r\n    }\r\n\r\n    if (this.state.errorInfo) {\r\n      // Error path\r\n      return (\r\n        <div>\r\n          <h2>{this.props.message || \"Something went wrong.\"}</h2>\r\n          <details style={{ whiteSpace: \"pre-wrap\" }}>\r\n            {this.state.error && this.state.error.toString()}\r\n          </details>\r\n        </div>\r\n      );\r\n    }\r\n    // Normally, just render children\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n```\r\ncal.com has its own ErrorBoundary class. It has `componentDidCatch` and `render` methods defined. Although, documentation\r\nprovides the example containing `getDerivedStateFromError`, it looks like this `getDerivedStateFromError` method is not\r\nused in cal.com ErrorBoundary class. \r\n\r\nReferences:\r\n1. https://github.com/search?q=repo%3Acalcom%2Fcal.com%20ErrorBoundary&type=code\r\n2. https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary\r\n3. https://github.com/bvaughn/react-error-boundary\r\n4. https://github.com/calcom/cal.com/blob/5bbccad41d625250ac03a6683e751b8ed6650721/packages/ui/components/errorBoundary/ErrorBoundary.tsx#L4",
    "code": "var Component=(()=>{var p=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(n,r)=>()=>(r||n((r={exports:{}}).exports,r),r.exports),y=(n,r)=>{for(var o in r)a(n,o,{get:r[o],enumerable:!0})},i=(n,r,o,c)=>{if(r&&typeof r==\"object\"||typeof r==\"function\")for(let t of u(r))!g.call(n,t)&&t!==o&&a(n,t,{get:()=>r[t],enumerable:!(c=m(r,t))||c.enumerable});return n};var w=(n,r,o)=>(o=n!=null?p(b(n)):{},i(r||!n||!n.__esModule?a(o,\"default\",{value:n,enumerable:!0}):o,n)),v=n=>i(a({},\"__esModule\",{value:!0}),n);var l=f((S,s)=>{s.exports=_jsx_runtime});var E={};y(E,{default:()=>d,frontmatter:()=>x});var e=w(l()),x={title:\"Error Handling in Cal.com\"};function h(n){let r={a:\"a\",code:\"code\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",...n.components};return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(r.p,{children:\"[Alert component] is used to show errors:\"}),`\n`,(0,e.jsxs)(r.p,{children:[`In this guide, we analyze how errors are handled in a component in\\r\n`,(0,e.jsx)(r.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/pages/bookings/%5Bstatus%5D.tsx\",children:\"cal.com\"}),\".\"]}),`\n`,(0,e.jsxs)(r.p,{children:[`How to find out what error handling mechanisms are used in cal.com codebase? Pick a page on cal.com and\\r\nfind the page route in its `,(0,e.jsx)(r.a,{href:\"link-to-code\",children:\"source code\"})]}),`\n`,(0,e.jsxs)(r.p,{children:[`In this guide, we choose the\\r\n`,(0,e.jsx)(r.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx\",children:\"bookings listing component\"}),\".\"]}),`\n`,(0,e.jsx)(r.p,{children:\"[Insert screenshots of bookings page]\"}),`\n`,(0,e.jsxs)(r.p,{children:[\"Bookings component depends purely on the \",(0,e.jsx)(r.code,{children:\"query\"}),\" result to decide what to render based on \",(0,e.jsx)(r.code,{children:\"query.status\"}),\".\"]}),`\n`,(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{children:`// picked from https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L82C3-L95C5\\r\nconst query = trpc.viewer.bookings.get.useInfiniteQuery(\\r\n    {\\r\n      limit: 10,\\r\n      filters: {\\r\n        ...filterQuery,\\r\n        status: filterQuery.status ?? status,\\r\n      },\\r\n    },\\r\n    {\\r\n      // first render has status \\`undefined\\`\\r\n      enabled: true,\\r\n      getNextPageParam: (lastPage) => lastPage.nextCursor,\\r\n    }\\r\n  );\n`})}),`\n`,(0,e.jsx)(r.p,{children:`In this guide, our focus is only on how errors are handled in a component. So, if there's an error encountered,\\r\nquery.status would be \"error\".`}),`\n`,(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{children:`{\\r\n    query.status === \"error\" && \\r\n    (\\r\n      <Alert severity=\"error\" title={t(\"something_went_wrong\")} message={query.error.message} />\\r\n    )\\r\n}\n`})}),`\n`,(0,e.jsxs)(r.p,{children:[(0,e.jsx)(r.a,{href:\"https://github.com/calcom/cal.com/blob/main/packages/ui/components/alert/Alert.tsx\",children:\"Alert\"}),` is imported from\\r\n`,(0,e.jsx)(r.code,{children:\"packages/ui/components/alert/Alert.tsx\"})]}),`\n`,(0,e.jsx)(r.p,{children:\"References:\"}),`\n`,(0,e.jsxs)(r.ol,{children:[`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/pages/bookings/%5Bstatus%5D.tsx\",children:\"https://github.com/calcom/cal.com/blob/main/apps/web/pages/bookings/%5Bstatus%5D.tsx\"})}),`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L165\",children:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/bookings/views/bookings-listing-view.tsx#L165\"})}),`\n`,(0,e.jsxs)(r.li,{children:[(0,e.jsx)(r.a,{href:\"https://github.com/calcom/cal.com/blob/main/packages/ui/components/alert/Alert.tsx\",children:\"https://github.com/calcom/cal.com/blob/main/packages/ui/components/alert/Alert.tsx\"}),`\\r\n// In auth/login error handling:`]}),`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/auth/login-view.tsx#L232C1-L233C80\",children:\"https://github.com/calcom/cal.com/blob/main/apps/web/modules/auth/login-view.tsx#L232C1-L233C80\"})}),`\n`]}),`\n`,(0,e.jsxs)(r.p,{children:[`[Error tracking]:\\r\nCal.com uses Sentry to track production errors. The below code snippet is from `,(0,e.jsx)(r.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/instrumentation.ts\",children:\"cal.com/apps/web/intrumentation.ts\"})]}),`\n`,(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{children:`import * as Sentry from \"@sentry/nextjs\";\\r\n\\r\nexport function register() {\\r\n  if (process.env.NEXT_RUNTIME === \"nodejs\") {\\r\n    Sentry.init({\\r\n      dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,\\r\n    });\\r\n  }\\r\n\\r\n  if (process.env.NEXT_RUNTIME === \"edge\") {\\r\n    Sentry.init({\\r\n      dsn: process.env.NEXT_PUBLIC_SENTRY_DSN,\\r\n    });\\r\n  }\\r\n}\n`})}),`\n`,(0,e.jsxs)(r.p,{children:[\"Read this \",(0,e.jsx)(r.a,{href:\"https://docs.sentry.io/platforms/javascript/guides/nextjs/\",children:\"official Sentry docs\"}),\" that explains how to setup Sentry in a Next.js project.\"]}),`\n`,(0,e.jsxs)(r.p,{children:[`This intrumentation file above is automatically generated as part of Sentry setup.\\r\n`,(0,e.jsx)(r.code,{children:\"dsn\"}),`:\\r\nThe DSN tells the SDK where to send the events. If this value is not provided, the SDK will try to read it from the SENTRY_DSN environment variable. If that variable also does not exist, the SDK will just not send any events.`]}),`\n`,(0,e.jsx)(r.p,{children:\"In runtimes without a process environment (such as the browser) that fallback does not apply.\"}),`\n`,(0,e.jsx)(r.p,{children:\"Learn more about DSN utilization.\"}),`\n`,(0,e.jsx)(r.p,{children:\"References:\"}),`\n`,(0,e.jsxs)(r.ol,{children:[`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/instrumentation.ts\",children:\"https://github.com/calcom/cal.com/blob/main/apps/web/instrumentation.ts\"})}),`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.a,{href:\"https://github.com/calcom/cal.com/blob/main/apps/web/sentry.client.config.ts\",children:\"https://github.com/calcom/cal.com/blob/main/apps/web/sentry.client.config.ts\"})}),`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.a,{href:\"https://docs.sentry.io/platforms/javascript/guides/nextjs/\",children:\"https://docs.sentry.io/platforms/javascript/guides/nextjs/\"})}),`\n`]}),`\n`,(0,e.jsx)(r.p,{children:\"[Error Boundary]\"}),`\n`,(0,e.jsx)(r.p,{children:`By default, if your application throws an error during rendering, React will remove its UI\\r\nfrom the screen. To prevent this, you can wrap a part of your UI into an error boundary.\\r\nAn error boundary is a special component that lets you display some fallback UI instead of\\r\nthe part that crashed\\u2014for example, an error message.`}),`\n`,(0,e.jsxs)(r.p,{children:[\"React docs explains \",(0,e.jsx)(r.a,{href:\"https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary\",children:\"how to write your own boundary\"})]}),`\n`,(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{children:`class ErrorBoundary extends React.Component {\\r\n  constructor(props) {\\r\n    super(props);\\r\n    this.state = { hasError: false };\\r\n  }\\r\n\\r\n  static getDerivedStateFromError(error) {\\r\n    // Update state so the next render will show the fallback UI.\\r\n    return { hasError: true };\\r\n  }\\r\n\\r\n  componentDidCatch(error, info) {\\r\n    // Example \"componentStack\":\\r\n    //   in ComponentThatThrows (created by App)\\r\n    //   in ErrorBoundary (created by App)\\r\n    //   in div (created by App)\\r\n    //   in App\\r\n    logErrorToMyService(error, info.componentStack);\\r\n  }\\r\n\\r\n  render() {\\r\n    if (this.state.hasError) {\\r\n      // You can render any custom fallback UI\\r\n      return this.props.fallback;\\r\n    }\\r\n\\r\n    return this.props.children;\\r\n  }\\r\n}\n`})}),`\n`,(0,e.jsxs)(r.p,{children:[\"You can write your own ErrorBoundary or use \",(0,e.jsx)(r.a,{href:\"https://github.com/bvaughn/react-error-boundary/tree/master\",children:\"react-error-boundary\"}),\", recommended by React.\"]}),`\n`,(0,e.jsxs)(r.p,{children:[\"Guess the kind of \",(0,e.jsx)(r.a,{href:\"https://github.com/calcom/cal.com/blob/5bbccad41d625250ac03a6683e751b8ed6650721/packages/ui/components/errorBoundary/ErrorBoundary.tsx#L4\",children:\"ErrorBoundary used in cal.com\"}),\"?\"]}),`\n`,(0,e.jsx)(r.pre,{children:(0,e.jsx)(r.code,{children:`import type { ErrorInfo } from \"react\";\\r\nimport React from \"react\";\\r\n\\r\nclass ErrorBoundary extends React.Component<\\r\n  { children: React.ReactNode; message?: string },\\r\n  { error: Error | null; errorInfo: ErrorInfo | null }\\r\n> {\\r\n  constructor(props: { children: React.ReactNode } | Readonly<{ children: React.ReactNode }>) {\\r\n    super(props);\\r\n    this.state = { error: null, errorInfo: null };\\r\n  }\\r\n\\r\n  componentDidCatch?(error: Error, errorInfo: ErrorInfo) {\\r\n    // Catch errors in any components below and re-render with error message\\r\n    this.setState({ error, errorInfo });\\r\n    // You can also log error messages to an error reporting service here\\r\n  }\\r\n\\r\n  render() {\\r\n    // do not intercept next-not-found error, allow displaying not-found.tsx page when notFound() is thrown on server side\\r\n    if (\\r\n      this.state.error !== null &&\\r\n      \"digest\" in this.state.error &&\\r\n      this.state.error.digest === \"NEXT_NOT_FOUND\"\\r\n    ) {\\r\n      return this.props.children;\\r\n    }\\r\n\\r\n    if (this.state.errorInfo) {\\r\n      // Error path\\r\n      return (\\r\n        <div>\\r\n          <h2>{this.props.message || \"Something went wrong.\"}</h2>\\r\n          <details style={{ whiteSpace: \"pre-wrap\" }}>\\r\n            {this.state.error && this.state.error.toString()}\\r\n          </details>\\r\n        </div>\\r\n      );\\r\n    }\\r\n    // Normally, just render children\\r\n    return this.props.children;\\r\n  }\\r\n}\\r\n\\r\nexport default ErrorBoundary;\n`})}),`\n`,(0,e.jsxs)(r.p,{children:[\"cal.com has its own ErrorBoundary class. It has \",(0,e.jsx)(r.code,{children:\"componentDidCatch\"}),\" and \",(0,e.jsx)(r.code,{children:\"render\"}),` methods defined. Although, documentation\\r\nprovides the example containing `,(0,e.jsx)(r.code,{children:\"getDerivedStateFromError\"}),\", it looks like this \",(0,e.jsx)(r.code,{children:\"getDerivedStateFromError\"}),` method is not\\r\nused in cal.com ErrorBoundary class.`]}),`\n`,(0,e.jsx)(r.p,{children:\"References:\"}),`\n`,(0,e.jsxs)(r.ol,{children:[`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.a,{href:\"https://github.com/search?q=repo%3Acalcom%2Fcal.com%20ErrorBoundary&type=code\",children:\"https://github.com/search?q=repo%3Acalcom%2Fcal.com%20ErrorBoundary&type=code\"})}),`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.a,{href:\"https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary\",children:\"https://react.dev/reference/react/Component#catching-rendering-errors-with-an-error-boundary\"})}),`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.a,{href:\"https://github.com/bvaughn/react-error-boundary\",children:\"https://github.com/bvaughn/react-error-boundary\"})}),`\n`,(0,e.jsx)(r.li,{children:(0,e.jsx)(r.a,{href:\"https://github.com/calcom/cal.com/blob/5bbccad41d625250ac03a6683e751b8ed6650721/packages/ui/components/errorBoundary/ErrorBoundary.tsx#L4\",children:\"https://github.com/calcom/cal.com/blob/5bbccad41d625250ac03a6683e751b8ed6650721/packages/ui/components/errorBoundary/ErrorBoundary.tsx#L4\"})}),`\n`]})]})}function d(n={}){let{wrapper:r}=n.components||{};return r?(0,e.jsx)(r,{...n,children:(0,e.jsx)(h,{...n})}):h(n)}return v(E);})();\n;return Component;"
  },
  "_id": "guide/codebase-architecture/cal-com/error-handling/introduction.mdx",
  "_raw": {
    "sourceFilePath": "guide/codebase-architecture/cal-com/error-handling/introduction.mdx",
    "sourceFileName": "introduction.mdx",
    "sourceFileDir": "guide/codebase-architecture/cal-com/error-handling",
    "contentType": "mdx",
    "flattenedPath": "guide/codebase-architecture/cal-com/error-handling/introduction"
  },
  "type": "Doc",
  "slug": "/guide/codebase-architecture/cal-com/error-handling/introduction",
  "slugAsParams": "codebase-architecture/cal-com/error-handling/introduction"
}
{
  "title": "ClientOptions interface in T3 Env source code explained\r",
  "published": false,
  "featured": false,
  "component": false,
  "toc": true,
  "body": {
    "raw": "\r\nIn this article, we analyse the ClientOptions interface provided for the client object in createEnv parameter, a function in T3 Env. A simple usage of t3-env is provided below:\r\n\r\n```plaintext\r\nexport const env = createEnv({\r\n /*\r\n * Serverside Environment variables, not available on the client.\r\n * Will throw if you access these variables on the client.\r\n */\r\n server: {\r\n DATABASE_URL: z.string().url(),\r\n OPEN_AI_API_KEY: z.string().min(1),\r\n },\r\n /*\r\n * Environment variables available on the client (and server).\r\n *\r\n * 💡 You'll get type errors if these are not prefixed with NEXT_PUBLIC_.\r\n */\r\n client: {\r\n NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: z.string().min(1),\r\n },\r\n /*\r\n * Due to how Next.js bundles environment variables on Edge and Client,\r\n * we need to manually destructure them to make sure all are included in bundle.\r\n *\r\n * 💡 You'll get type errors if not all variables from `server` & `client` are included here.\r\n */\r\n runtimeEnv: {\r\n DATABASE_URL: process.env.DATABASE_URL,\r\n OPEN_AI_API_KEY: process.env.OPEN_AI_API_KEY,\r\n NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY:\r\n process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY,\r\n },\r\n});\r\n```\r\n\r\nWe are interested in finding out the types/interfaces of client object.\r\n\r\n```plaintext\r\nclient: {\r\n NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: z.string().min(1),\r\n },\r\n```\r\n\r\nStraight away, I could tell we could expect this type along the lines of Record&lt;String, ZodType&gt;, but the way t3-env defines is different. Look at the below type picked from [T3 Env source code](https://github.com/t3-oss/t3-env/blob/main/packages/core/src/index.ts#L130C1-L151C2).\r\n\r\n```plaintext\r\nexport interface ClientOptions<\r\n TPrefix extends string | undefined,\r\n TClient extends Record<string, ZodType>,\r\n> {\r\n /**\r\n * The prefix that client-side variables must have. This is enforced both at\r\n * a type-level and at runtime.\r\n */\r\n clientPrefix: TPrefix;\r\n/**\r\n * Specify your client-side environment variables schema here. This way you can ensure the app isn't\r\n * built with invalid env vars.\r\n */\r\n client: Partial<{\r\n [TKey in keyof TClient]: TKey extends `${TPrefix}${string}`\r\n ? TClient[TKey]\r\n : ErrorMessage<`${TKey extends string\r\n ? TKey\r\n : never} is not prefixed with ${TPrefix}.`>;\r\n }>;\r\n}\r\n```\r\n\r\nYou will find that this uses generic type and TClient is of type Record&lt;string, ZodType&gt;, but client does not have this type, instead it has a check in place to ensure your key defined in client is prefixed with whatever you define in ClientPrefix.\r\n\r\nSay, for example, you have defined your prefix as “NEXT\\_PUBLIC\\_” and you try to define some variable with a key that is not prefixed with “NEXT\\_PBULIC\\_”, you will see an error along the lines “\\{variable\\} is not prefixed with “NEXT\\_PBULIC\\_”\r\n\r\nThis is powerful in frameworks like Next.js where you don’t want to accidentally expose server side varaibles to the client side.\r\n\r\nCheck this docs — [https://env.t3.gg/docs/core#create-your-schema](https://env.t3.gg/docs/core#create-your-schema), this talks about prefix error.\r\n\r\n# **About me:**\r\n\r\nHey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\r\n\r\nI am open to work on interesting projects. Send me an email at ramu.narasinga@gmail.com\r\n\r\nMy Github — [https://github.com/ramu-narasinga](https://github.com/ramu-narasinga)\r\n\r\nMy website — [https://ramunarasinga.com](https://ramunarasinga.com/)\r\n\r\nMy Youtube channel — [https://www.youtube.com/@thinkthroo](https://www.youtube.com/@thinkthroo)\r\n\r\nLearning platform — [https://thinkthroo.com](https://thinkthroo.com/)\r\n\r\nCodebase Architecture — [https://app.thinkthroo.com/architecture](https://app.thinkthroo.com/architecture)\r\n\r\nBest practices — [https://app.thinkthroo.com/best-practices](https://app.thinkthroo.com/best-practices)\r\n\r\nProduction-grade projects — [https://app.thinkthroo.com/production-grade-projects](https://app.thinkthroo.com/production-grade-projects)\r\n\r\n### References:\r\n\r\n1. [https://github.com/t3-oss/t3-env/blob/main/packages/core/src/index.ts#L130](https://github.com/t3-oss/t3-env/blob/main/packages/core/src/index.ts#L130)\r\n    \r\n2. [https://env.t3.gg/docs/core#create-your-schema](https://env.t3.gg/docs/core#create-your-schema)\r\n",
    "code": "var Component=(()=>{var o=Object.create;var r=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var f=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var N=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),y=(a,e)=>{for(var i in e)r(a,i,{get:e[i],enumerable:!0})},t=(a,e,i,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of u(e))!g.call(a,s)&&s!==i&&r(a,s,{get:()=>e[s],enumerable:!(l=m(e,s))||l.enumerable});return a};var v=(a,e,i)=>(i=a!=null?o(f(a)):{},t(e||!a||!a.__esModule?r(i,\"default\",{value:a,enumerable:!0}):i,a)),b=a=>t(r({},\"__esModule\",{value:!0}),a);var h=N((T,c)=>{c.exports=_jsx_runtime});var _={};y(_,{default:()=>p,frontmatter:()=>x});var n=v(h()),x={title:\"ClientOptions interface in T3 Env source code explained\"};function d(a){let e={a:\"a\",code:\"code\",div:\"div\",h1:\"h1\",h3:\"h3\",li:\"li\",ol:\"ol\",p:\"p\",pre:\"pre\",span:\"span\",strong:\"strong\",...a.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"In this article, we analyse the ClientOptions interface provided for the client object in createEnv parameter, a function in T3 Env. A simple usage of t3-env is provided below:\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"export const env = createEnv({\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" /*\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" * Serverside Environment variables, not available on the client.\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" * Will throw if you access these variables on the client.\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" */\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" server: {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" DATABASE_URL: z.string().url(),\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" OPEN_AI_API_KEY: z.string().min(1),\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" },\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" /*\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" * Environment variables available on the client (and server).\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" *\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" * \\u{1F4A1} You'll get type errors if these are not prefixed with NEXT_PUBLIC_.\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" */\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" client: {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: z.string().min(1),\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" },\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" /*\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" * Due to how Next.js bundles environment variables on Edge and Client,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" * we need to manually destructure them to make sure all are included in bundle.\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" *\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" * \\u{1F4A1} You'll get type errors if not all variables from `server` & `client` are included here.\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" */\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" runtimeEnv: {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" DATABASE_URL: process.env.DATABASE_URL,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" OPEN_AI_API_KEY: process.env.OPEN_AI_API_KEY,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY:\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" process.env.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" },\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"});\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"We are interested in finding out the types/interfaces of client object.\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"client: {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: z.string().min(1),\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" },\"})})]})})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Straight away, I could tell we could expect this type along the lines of Record<String, ZodType>, but the way t3-env defines is different. Look at the below type picked from \",(0,n.jsx)(e.a,{href:\"https://github.com/t3-oss/t3-env/blob/main/packages/core/src/index.ts#L130C1-L151C2\",children:\"T3 Env source code\"}),\".\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"plaintext\",\"data-theme\":\"default\",children:[(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"export interface ClientOptions<\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" TPrefix extends string | undefined,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" TClient extends Record<string, ZodType>,\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"> {\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" /**\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" * The prefix that client-side variables must have. This is enforced both at\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" * a type-level and at runtime.\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" */\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" clientPrefix: TPrefix;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"/**\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" * Specify your client-side environment variables schema here. This way you can ensure the app isn't\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" * built with invalid env vars.\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" */\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" client: Partial<{\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" [TKey in keyof TClient]: TKey extends `${TPrefix}${string}`\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" ? TClient[TKey]\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" : ErrorMessage<`${TKey extends string\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" ? TKey\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" : never} is not prefixed with ${TPrefix}.`>;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\" }>;\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{children:\"}\"})})]})})}),`\n`,(0,n.jsx)(e.p,{children:\"You will find that this uses generic type and TClient is of type Record<string, ZodType>, but client does not have this type, instead it has a check in place to ensure your key defined in client is prefixed with whatever you define in ClientPrefix.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Say, for example, you have defined your prefix as \\u201CNEXT_PUBLIC_\\u201D and you try to define some variable with a key that is not prefixed with \\u201CNEXT_PBULIC_\\u201D, you will see an error along the lines \\u201C{variable} is not prefixed with \\u201CNEXT_PBULIC_\\u201D\"}),`\n`,(0,n.jsx)(e.p,{children:\"This is powerful in frameworks like Next.js where you don\\u2019t want to accidentally expose server side varaibles to the client side.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Check this docs\\u200A\\u2014\\u200A\",(0,n.jsx)(e.a,{href:\"https://env.t3.gg/docs/core#create-your-schema\",children:\"https://env.t3.gg/docs/core#create-your-schema\"}),\", this talks about prefix error.\"]}),`\n`,(0,n.jsx)(e.h1,{id:\"about-me\",children:(0,n.jsx)(e.strong,{children:\"About me:\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Hey, my name is Ramu Narasinga. I study large open-source projects and create content about their codebase architecture and best practices, sharing it through articles, videos.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"I am open to work on interesting projects. Send me an email at \",(0,n.jsx)(e.a,{href:\"mailto:ramu.narasinga@gmail.com\",children:\"ramu.narasinga@gmail.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Github \\u2014 \",(0,n.jsx)(e.a,{href:\"https://github.com/ramu-narasinga\",children:\"https://github.com/ramu-narasinga\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My website \\u2014 \",(0,n.jsx)(e.a,{href:\"https://ramunarasinga.com/\",children:\"https://ramunarasinga.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"My Youtube channel \\u2014 \",(0,n.jsx)(e.a,{href:\"https://www.youtube.com/@thinkthroo\",children:\"https://www.youtube.com/@thinkthroo\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Learning platform \\u2014 \",(0,n.jsx)(e.a,{href:\"https://thinkthroo.com/\",children:\"https://thinkthroo.com\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Codebase Architecture \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/architecture\",children:\"https://app.thinkthroo.com/architecture\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Best practices \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/best-practices\",children:\"https://app.thinkthroo.com/best-practices\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Production-grade projects \\u2014 \",(0,n.jsx)(e.a,{href:\"https://app.thinkthroo.com/production-grade-projects\",children:\"https://app.thinkthroo.com/production-grade-projects\"})]}),`\n`,(0,n.jsx)(e.h3,{id:\"references\",children:\"References:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://github.com/t3-oss/t3-env/blob/main/packages/core/src/index.ts#L130\",children:\"https://github.com/t3-oss/t3-env/blob/main/packages/core/src/index.ts#L130\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://env.t3.gg/docs/core#create-your-schema\",children:\"https://env.t3.gg/docs/core#create-your-schema\"})}),`\n`]}),`\n`]})]})}function p(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,{...a,children:(0,n.jsx)(d,{...a})}):d(a)}return b(_);})();\n;return Component;"
  },
  "_id": "blog/client-options-interface.mdx",
  "_raw": {
    "sourceFilePath": "blog/client-options-interface.mdx",
    "sourceFileName": "client-options-interface.mdx",
    "sourceFileDir": "blog",
    "contentType": "mdx",
    "flattenedPath": "blog/client-options-interface"
  },
  "type": "Doc",
  "slug": "/blog/client-options-interface",
  "slugAsParams": "client-options-interface"
}